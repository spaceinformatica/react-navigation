{"version":3,"sources":["useNavigationState.tsx"],"names":["React","useNavigation","useNavigationState","selector","navigation","setResult","useState","dangerouslyGetState","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAIA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAT,CAA+BC,QAA/B,EAAyD;AACtE,QAAMC,UAAU,GAAGH,aAAa,EAAhC,CADsE,CAGtE;AACA;;AACA,QAAM,GAAGI,SAAH,IAAgBL,KAAK,CAACM,QAAN,CAAe,MACnCH,QAAQ,CAACC,UAAU,CAACG,mBAAX,EAAD,CADY,CAAtB,CALsE,CAStE;;AACA,QAAMC,WAAW,GAAGR,KAAK,CAACS,MAAN,CAAaN,QAAb,CAApB;AAEAH,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpBF,IAAAA,WAAW,CAACG,OAAZ,GAAsBR,QAAtB;AACD,GAFD;AAIAH,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,UAAME,WAAW,GAAGR,UAAU,CAACS,WAAX,CAAuB,OAAvB,EAAiCC,CAAD,IAAO;AACzDT,MAAAA,SAAS,CAACG,WAAW,CAACG,OAAZ,CAAoBG,CAAC,CAACC,IAAF,CAAOC,KAA3B,CAAD,CAAT;AACD,KAFmB,CAApB;AAIA,WAAOJ,WAAP;AACD,GAND,EAMG,CAACR,UAAD,CANH;AAQA,SAAOD,QAAQ,CAACC,UAAU,CAACG,mBAAX,EAAD,CAAf;AACD","sourcesContent":["import * as React from 'react';\r\nimport type { NavigationState } from '@react-navigation/routers';\r\nimport useNavigation from './useNavigation';\r\n\r\ntype Selector<T> = (state: NavigationState) => T;\r\n\r\n/**\r\n * Hook to get a value from the current navigation state using a selector.\r\n *\r\n * @param selector Selector function to get a value from the state.\r\n */\r\nexport default function useNavigationState<T>(selector: Selector<T>): T {\r\n  const navigation = useNavigation();\r\n\r\n  // We don't care about the state value, we run the selector again at the end\r\n  // The state is only to make sure that there's a re-render when we have a new value\r\n  const [, setResult] = React.useState(() =>\r\n    selector(navigation.dangerouslyGetState())\r\n  );\r\n\r\n  // We store the selector in a ref to avoid re-subscribing listeners every render\r\n  const selectorRef = React.useRef(selector);\r\n\r\n  React.useEffect(() => {\r\n    selectorRef.current = selector;\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribe = navigation.addListener('state', (e) => {\r\n      setResult(selectorRef.current(e.data.state));\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [navigation]);\r\n\r\n  return selector(navigation.dangerouslyGetState());\r\n}\r\n"]}