{"version":3,"sources":["useOnGetState.tsx"],"names":["React","NavigationBuilderContext","NavigationRouteContext","isArrayEqual","useOnGetState","getState","getStateListeners","addKeyedListener","useContext","route","key","getRehydratedState","useCallback","state","routes","map","childState","useEffect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP,MAEO,4BAFP;AAGA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAOA,eAAe,SAASC,aAAT,CAAuB;AACpCC,EAAAA,QADoC;AAEpCC,EAAAA;AAFoC,CAAvB,EAGH;AACV,QAAM;AAAEC,IAAAA;AAAF,MAAuBP,KAAK,CAACQ,UAAN,CAAiBP,wBAAjB,CAA7B;AACA,QAAMQ,KAAK,GAAGT,KAAK,CAACQ,UAAN,CAAiBN,sBAAjB,CAAd;AACA,QAAMQ,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACC,GAAT,GAAe,MAAhC;AAEA,QAAMC,kBAAkB,GAAGX,KAAK,CAACY,WAAN,CAAkB,MAAM;AACjD,UAAMC,KAAK,GAAGR,QAAQ,EAAtB,CADiD,CAGjD;;AACA,UAAMS,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAkBN,KAAD,IAAW;AAAA;;AACzC,YAAMO,UAAU,4BAAGV,iBAAiB,CAACG,KAAK,CAACC,GAAP,CAApB,0DAAG,2BAAAJ,iBAAiB,CAApC;;AAEA,UAAIG,KAAK,CAACI,KAAN,KAAgBG,UAApB,EAAgC;AAC9B,eAAOP,KAAP;AACD;;AAED,aAAO,EAAE,GAAGA,KAAL;AAAYI,QAAAA,KAAK,EAAEG;AAAnB,OAAP;AACD,KARc,CAAf;;AAUA,QAAIb,YAAY,CAACU,KAAK,CAACC,MAAP,EAAeA,MAAf,CAAhB,EAAwC;AACtC,aAAOD,KAAP;AACD;;AAED,WAAO,EAAE,GAAGA,KAAL;AAAYC,MAAAA;AAAZ,KAAP;AACD,GAnB0B,EAmBxB,CAACT,QAAD,EAAWC,iBAAX,CAnBwB,CAA3B;AAqBAN,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,WAAOV,gBAAP,aAAOA,gBAAP,uBAAOA,gBAAgB,CAAG,UAAH,EAAeG,GAAf,EAAoBC,kBAApB,CAAvB;AACD,GAFD,EAEG,CAACJ,gBAAD,EAAmBI,kBAAnB,EAAuCD,GAAvC,CAFH;AAGD","sourcesContent":["import * as React from 'react';\r\nimport type { NavigationState } from '@react-navigation/routers';\r\nimport NavigationBuilderContext, {\r\n  GetStateListener,\r\n} from './NavigationBuilderContext';\r\nimport NavigationRouteContext from './NavigationRouteContext';\r\nimport isArrayEqual from './isArrayEqual';\r\n\r\ntype Options = {\r\n  getState: () => NavigationState;\r\n  getStateListeners: Record<string, GetStateListener | undefined>;\r\n};\r\n\r\nexport default function useOnGetState({\r\n  getState,\r\n  getStateListeners,\r\n}: Options) {\r\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\r\n  const route = React.useContext(NavigationRouteContext);\r\n  const key = route ? route.key : 'root';\r\n\r\n  const getRehydratedState = React.useCallback(() => {\r\n    const state = getState();\r\n\r\n    // Avoid returning new route objects if we don't need to\r\n    const routes = state.routes.map((route) => {\r\n      const childState = getStateListeners[route.key]?.();\r\n\r\n      if (route.state === childState) {\r\n        return route;\r\n      }\r\n\r\n      return { ...route, state: childState };\r\n    });\r\n\r\n    if (isArrayEqual(state.routes, routes)) {\r\n      return state;\r\n    }\r\n\r\n    return { ...state, routes };\r\n  }, [getState, getStateListeners]);\r\n\r\n  React.useEffect(() => {\r\n    return addKeyedListener?.('getState', key, getRehydratedState);\r\n  }, [addKeyedListener, getRehydratedState, key]);\r\n}\r\n"]}