{"version":3,"sources":["useEventEmitter.tsx"],"names":["React","useEventEmitter","listen","listenRef","useRef","useEffect","current","listeners","create","useCallback","target","removeListener","type","callback","callbacks","undefined","index","indexOf","splice","addListener","push","emit","data","canPreventDefault","items","slice","concat","Object","keys","map","t","filter","cb","i","self","lastIndexOf","event","defineProperty","enumerable","get","defaultPrevented","defineProperties","preventDefault","value","forEach","useMemo"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport type { EventEmitter, EventConsumer, EventArg } from './types';\r\n\r\nexport type NavigationEventEmitter<\r\n  T extends Record<string, any>\r\n> = EventEmitter<T> & {\r\n  create: (target: string) => EventConsumer<T>;\r\n};\r\n\r\ntype Listeners = ((e: any) => void)[];\r\n\r\n/**\r\n * Hook to manage the event system used by the navigator to notify screens of various events.\r\n */\r\nexport default function useEventEmitter<T extends Record<string, any>>(\r\n  listen?: (e: any) => void\r\n): NavigationEventEmitter<T> {\r\n  const listenRef = React.useRef(listen);\r\n\r\n  React.useEffect(() => {\r\n    listenRef.current = listen;\r\n  });\r\n\r\n  const listeners = React.useRef<Record<string, Record<string, Listeners>>>({});\r\n\r\n  const create = React.useCallback((target: string) => {\r\n    const removeListener = (type: string, callback: (data: any) => void) => {\r\n      const callbacks = listeners.current[type]\r\n        ? listeners.current[type][target]\r\n        : undefined;\r\n\r\n      if (!callbacks) {\r\n        return;\r\n      }\r\n\r\n      const index = callbacks.indexOf(callback);\r\n\r\n      callbacks.splice(index, 1);\r\n    };\r\n\r\n    const addListener = (type: string, callback: (data: any) => void) => {\r\n      listeners.current[type] = listeners.current[type] || {};\r\n      listeners.current[type][target] = listeners.current[type][target] || [];\r\n      listeners.current[type][target].push(callback);\r\n\r\n      return () => removeListener(type, callback);\r\n    };\r\n\r\n    return {\r\n      addListener,\r\n      removeListener,\r\n    };\r\n  }, []);\r\n\r\n  const emit = React.useCallback(\r\n    ({\r\n      type,\r\n      data,\r\n      target,\r\n      canPreventDefault,\r\n    }: {\r\n      type: string;\r\n      data?: any;\r\n      target?: string;\r\n      canPreventDefault?: boolean;\r\n    }) => {\r\n      const items = listeners.current[type] || {};\r\n\r\n      // Copy the current list of callbacks in case they are mutated during execution\r\n      const callbacks =\r\n        target !== undefined\r\n          ? items[target]?.slice()\r\n          : ([] as Listeners)\r\n              .concat(...Object.keys(items).map((t) => items[t]))\r\n              .filter((cb, i, self) => self.lastIndexOf(cb) === i);\r\n\r\n      const event: EventArg<any, any, any> = {\r\n        get type() {\r\n          return type;\r\n        },\r\n      };\r\n\r\n      if (target !== undefined) {\r\n        Object.defineProperty(event, 'target', {\r\n          enumerable: true,\r\n          get() {\r\n            return target;\r\n          },\r\n        });\r\n      }\r\n\r\n      if (data !== undefined) {\r\n        Object.defineProperty(event, 'data', {\r\n          enumerable: true,\r\n          get() {\r\n            return data;\r\n          },\r\n        });\r\n      }\r\n\r\n      if (canPreventDefault) {\r\n        let defaultPrevented = false;\r\n\r\n        Object.defineProperties(event, {\r\n          defaultPrevented: {\r\n            enumerable: true,\r\n            get() {\r\n              return defaultPrevented;\r\n            },\r\n          },\r\n          preventDefault: {\r\n            enumerable: true,\r\n            value() {\r\n              defaultPrevented = true;\r\n            },\r\n          },\r\n        });\r\n      }\r\n\r\n      listenRef.current?.(event);\r\n\r\n      callbacks?.forEach((cb) => cb(event));\r\n\r\n      return event as any;\r\n    },\r\n    []\r\n  );\r\n\r\n  return React.useMemo(() => ({ create, emit }), [create, emit]);\r\n}\r\n"]}