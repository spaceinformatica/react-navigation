{"version":3,"sources":["useRouteCache.tsx"],"names":["React","SUPPRESS_STATE_ACCESS_WARNING","value","useRouteCache","routes","cache","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","proxy","Object","defineProperty","console","warn","state","Array","from","values"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAUA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAtC;AAEP;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CACbC,MADa,EAEb;AACA;AACA,QAAMC,KAAK,GAAGL,KAAK,CAACM,OAAN,CAAc,OAAO;AAAEC,IAAAA,OAAO,EAAE,IAAIC,GAAJ;AAAX,GAAP,CAAd,EAA4D,EAA5D,CAAd;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA,WAAOP,MAAP;AACD;;AAEDC,EAAAA,KAAK,CAACE,OAAN,GAAgBH,MAAM,CAACQ,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5C,UAAMC,QAAQ,GAAGV,KAAK,CAACE,OAAN,CAAcS,GAAd,CAAkBF,KAAlB,CAAjB;;AAEA,QAAIC,QAAJ,EAAc;AACZ;AACAF,MAAAA,GAAG,CAACI,GAAJ,CAAQH,KAAR,EAAeC,QAAf;AACD,KAHD,MAGO;AACL,YAAMG,KAAK,GAAG,EAAE,GAAGJ;AAAL,OAAd;AAEAK,MAAAA,MAAM,CAACC,cAAP,CAAsBF,KAAtB,EAA6B,OAA7B,EAAsC;AACpCF,QAAAA,GAAG,GAAG;AACJ,cAAI,CAACf,6BAA6B,CAACC,KAAnC,EAA0C;AACxCmB,YAAAA,OAAO,CAACC,IAAR,CACE,oSADF;AAGD;;AAED,iBAAOR,KAAK,CAACS,KAAb;AACD;;AATmC,OAAtC;AAYAV,MAAAA,GAAG,CAACI,GAAJ,CAAQH,KAAR,EAAeI,KAAf;AACD;;AAED,WAAOL,GAAP;AACD,GAzBe,EAyBb,IAAIL,GAAJ,EAzBa,CAAhB;AA2BA,SAAOgB,KAAK,CAACC,IAAN,CAAWpB,KAAK,CAACE,OAAN,CAAcmB,MAAd,EAAX,CAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport type {\r\n  ParamListBase,\r\n  NavigationState,\r\n  Route,\r\n} from '@react-navigation/routers';\r\nimport type { RouteProp } from './types';\r\n\r\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase, string>>;\r\n\r\n/**\r\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\r\n * So we need a way to suppress the warning for those use cases.\r\n * This is fine since they are internal utilities and this is not public API.\r\n */\r\nexport const SUPPRESS_STATE_ACCESS_WARNING = { value: false };\r\n\r\n/**\r\n * Hook to cache route props for each screen in the navigator.\r\n * This lets add warnings and modifications to the route object but keep references between renders.\r\n */\r\nexport default function useRouteCache<State extends NavigationState>(\r\n  routes: State['routes']\r\n) {\r\n  // Cache object which holds route objects for each screen\r\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // We don't want the overhead of creating extra maps every render in prod\r\n    return routes;\r\n  }\r\n\r\n  cache.current = routes.reduce((acc, route) => {\r\n    const previous = cache.current.get(route);\r\n\r\n    if (previous) {\r\n      // If a cached route object already exists, reuse it\r\n      acc.set(route, previous);\r\n    } else {\r\n      const proxy = { ...route };\r\n\r\n      Object.defineProperty(proxy, 'state', {\r\n        get() {\r\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\r\n            console.warn(\r\n              \"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\"\r\n            );\r\n          }\r\n\r\n          return route.state;\r\n        },\r\n      });\r\n\r\n      acc.set(route, proxy);\r\n    }\r\n\r\n    return acc;\r\n  }, new Map() as RouteCache);\r\n\r\n  return Array.from(cache.current.values());\r\n}\r\n"]}