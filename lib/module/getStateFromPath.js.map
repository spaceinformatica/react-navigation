{"version":3,"sources":["getStateFromPath.tsx"],"names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","connectedRoutes","Object","keys","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","parse","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","segments","shift","state","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","value","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","routeName","flatConfig","findInitialRoute","includes","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseConfig","query"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\r\nimport * as queryString from 'query-string';\r\nimport type {\r\n  NavigationState,\r\n  PartialState,\r\n  InitialState,\r\n} from '@react-navigation/routers';\r\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\r\nimport type { PathConfigMap } from './types';\r\n\r\ntype Options = {\r\n  initialRouteName?: string;\r\n  screens: PathConfigMap;\r\n};\r\n\r\ntype ParseConfig = Record<string, (value: string) => any>;\r\n\r\ntype RouteConfig = {\r\n  screen: string;\r\n  regex?: RegExp;\r\n  path: string;\r\n  pattern: string;\r\n  routeNames: string[];\r\n  parse?: ParseConfig;\r\n};\r\n\r\ntype InitialRouteConfig = {\r\n  initialRouteName: string;\r\n  connectedRoutes: string[];\r\n};\r\n\r\ntype ResultState = PartialState<NavigationState> & {\r\n  state?: ResultState;\r\n};\r\n\r\ntype ParsedRoute = {\r\n  name: string;\r\n  params?: Record<string, any> | undefined;\r\n};\r\n\r\n/**\r\n * Utility to parse a path string to initial state object accepted by the container.\r\n * This is useful for deep linking when we need to handle the incoming URL.\r\n *\r\n * @example\r\n * ```js\r\n * getStateFromPath(\r\n *   '/chat/jane/42',\r\n *   {\r\n *     screens: {\r\n *       Chat: {\r\n *         path: 'chat/:author/:id',\r\n *         parse: { id: Number }\r\n *       }\r\n *     }\r\n *   }\r\n * )\r\n * ```\r\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\r\n * @param options Extra options to fine-tune how to parse the path.\r\n */\r\nexport default function getStateFromPath(\r\n  path: string,\r\n  options?: Options\r\n): ResultState | undefined {\r\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\r\n\r\n  let initialRoutes: InitialRouteConfig[] = [];\r\n\r\n  if (compatOptions?.initialRouteName) {\r\n    initialRoutes.push({\r\n      initialRouteName: compatOptions.initialRouteName,\r\n      connectedRoutes: Object.keys(compatOptions.screens),\r\n    });\r\n  }\r\n\r\n  const screens = compatOptions?.screens;\r\n\r\n  let remaining = path\r\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\r\n    .replace(/^\\//, '') // Remove extra leading slash\r\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\r\n\r\n  // Make sure there is a trailing slash\r\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\r\n\r\n  if (screens === undefined) {\r\n    // When no config is specified, use the path segments as route names\r\n    const routes = remaining\r\n      .split('/')\r\n      .filter(Boolean)\r\n      .map((segment, i, self) => {\r\n        const name = decodeURIComponent(segment);\r\n\r\n        if (i === self.length - 1) {\r\n          return { name, params: parseQueryParams(path) };\r\n        }\r\n\r\n        return { name };\r\n      });\r\n\r\n    if (routes.length) {\r\n      return createNestedStateObject(routes, initialRoutes);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  // Create a normalized configs array which will be easier to use\r\n  const configs = ([] as RouteConfig[])\r\n    .concat(\r\n      ...Object.keys(screens).map((key) =>\r\n        createNormalizedConfigs(\r\n          legacy,\r\n          key,\r\n          screens as PathConfigMap,\r\n          [],\r\n          initialRoutes\r\n        )\r\n      )\r\n    )\r\n    .sort((a, b) => {\r\n      // Sort config so that:\r\n      // - the most exhaustive ones are always at the beginning\r\n      // - patterns with wildcard are always at the end\r\n\r\n      // If 2 patterns are same, move the one with less route names up\r\n      // This is an error state, so it's only useful for consistent error messages\r\n      if (a.pattern === b.pattern) {\r\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\r\n      }\r\n\r\n      // If one of the patterns starts with the other, it's more exhaustive\r\n      // So move it up\r\n      if (a.pattern.startsWith(b.pattern)) {\r\n        return -1;\r\n      }\r\n\r\n      if (b.pattern.startsWith(a.pattern)) {\r\n        return 1;\r\n      }\r\n\r\n      const aParts = a.pattern.split('/');\r\n      const bParts = b.pattern.split('/');\r\n\r\n      const aWildcardIndex = aParts.indexOf('*');\r\n      const bWildcardIndex = bParts.indexOf('*');\r\n\r\n      // If only one of the patterns has a wildcard, move it down in the list\r\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\r\n        return -1;\r\n      }\r\n\r\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\r\n        return 1;\r\n      }\r\n\r\n      if (aWildcardIndex === bWildcardIndex) {\r\n        // If `b` has more `/`, it's more exhaustive\r\n        // So we move it up in the list\r\n        return bParts.length - aParts.length;\r\n      }\r\n\r\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\r\n      // So we move it up in the list\r\n      return bWildcardIndex - aWildcardIndex;\r\n    });\r\n\r\n  // Check for duplicate patterns in the config\r\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\r\n    if (acc[config.pattern]) {\r\n      const a = acc[config.pattern].routeNames;\r\n      const b = config.routeNames;\r\n\r\n      // It's not a problem if the path string omitted from a inner most screen\r\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\r\n      const intersects =\r\n        a.length > b.length\r\n          ? b.every((it, i) => a[i] === it)\r\n          : a.every((it, i) => b[i] === it);\r\n\r\n      if (!intersects) {\r\n        throw new Error(\r\n          `Found conflicting screens with the same pattern. The pattern '${\r\n            config.pattern\r\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\r\n            ' > '\r\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return Object.assign(acc, {\r\n      [config.pattern]: config,\r\n    });\r\n  }, {});\r\n\r\n  if (remaining === '/') {\r\n    // We need to add special handling of empty path so navigation to empty path also works\r\n    // When handling empty path, we should only look at the root level config\r\n    const match = configs.find(\r\n      (config) =>\r\n        config.path === '' &&\r\n        config.routeNames.every(\r\n          // Make sure that none of the parent configs have a non-empty path defined\r\n          (name) => !configs.find((c) => c.screen === name)?.path\r\n        )\r\n    );\r\n\r\n    if (match) {\r\n      return createNestedStateObject(\r\n        match.routeNames.map((name, i, self) => {\r\n          if (i === self.length - 1) {\r\n            return { name, params: parseQueryParams(path, match.parse) };\r\n          }\r\n\r\n          return { name };\r\n        }),\r\n        initialRoutes\r\n      );\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  let result: PartialState<NavigationState> | undefined;\r\n  let current: PartialState<NavigationState> | undefined;\r\n\r\n  if (legacy === false) {\r\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\r\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\r\n    const { routes, remainingPath } = matchAgainstConfigs(\r\n      remaining,\r\n      configs.map((c) => ({\r\n        ...c,\r\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\r\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\r\n      }))\r\n    );\r\n\r\n    if (routes !== undefined) {\r\n      // This will always be empty if full path matched\r\n      current = createNestedStateObject(routes, initialRoutes);\r\n      remaining = remainingPath;\r\n      result = current;\r\n    }\r\n  } else {\r\n    // In legacy mode, we divide the path into segments and match piece by piece\r\n    // This preserves the legacy behaviour, but we should remove it in next major\r\n    while (remaining) {\r\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\r\n\r\n      remaining = remainingPath;\r\n\r\n      // If we hadn't matched any segments earlier, use the path as route name\r\n      if (routes === undefined) {\r\n        const segments = remaining.split('/');\r\n\r\n        routes = [{ name: decodeURIComponent(segments[0]) }];\r\n        segments.shift();\r\n        remaining = segments.join('/');\r\n      }\r\n\r\n      const state = createNestedStateObject(routes, initialRoutes);\r\n\r\n      if (current) {\r\n        // The state should be nested inside the deepest route we parsed before\r\n        while (current?.routes[current.index || 0].state) {\r\n          current = current.routes[current.index || 0].state;\r\n        }\r\n\r\n        (current as PartialState<NavigationState>).routes[\r\n          current?.index || 0\r\n        ].state = state;\r\n      } else {\r\n        result = state;\r\n      }\r\n\r\n      current = state;\r\n    }\r\n  }\r\n\r\n  if (current == null || result == null) {\r\n    return undefined;\r\n  }\r\n\r\n  const route = findFocusedRoute(current);\r\n  const params = parseQueryParams(\r\n    path,\r\n    findParseConfigForRoute(route.name, configs)\r\n  );\r\n\r\n  if (params) {\r\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\r\n    route.params = { ...route.params, ...params };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst joinPaths = (...paths: string[]): string =>\r\n  ([] as string[])\r\n    .concat(...paths.map((p) => p.split('/')))\r\n    .filter(Boolean)\r\n    .join('/');\r\n\r\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\r\n  let routes: ParsedRoute[] | undefined;\r\n  let remainingPath = remaining;\r\n\r\n  // Go through all configs, and see if the next path segment matches our regex\r\n  for (const config of configs) {\r\n    if (!config.regex) {\r\n      continue;\r\n    }\r\n\r\n    const match = remainingPath.match(config.regex);\r\n\r\n    // If our regex matches, we need to extract params from the path\r\n    if (match) {\r\n      const matchedParams = config.pattern\r\n        ?.split('/')\r\n        .filter((p) => p.startsWith(':'))\r\n        .reduce<Record<string, any>>(\r\n          (acc, p, i) =>\r\n            Object.assign(acc, {\r\n              // The param segments appear every second item starting from 2 in the regex match result\r\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\r\n            }),\r\n          {}\r\n        );\r\n\r\n      routes = config.routeNames.map((name) => {\r\n        const config = configs.find((c) => c.screen === name);\r\n        const params = config?.path\r\n          ?.split('/')\r\n          .filter((p) => p.startsWith(':'))\r\n          .reduce<Record<string, any>>((acc, p) => {\r\n            const value = matchedParams[p];\r\n\r\n            if (value) {\r\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\r\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\r\n            }\r\n\r\n            return acc;\r\n          }, {});\r\n\r\n        if (params && Object.keys(params).length) {\r\n          return { name, params };\r\n        }\r\n\r\n        return { name };\r\n      });\r\n\r\n      remainingPath = remainingPath.replace(match[1], '');\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  return { routes, remainingPath };\r\n};\r\n\r\nconst createNormalizedConfigs = (\r\n  legacy: boolean,\r\n  screen: string,\r\n  routeConfig: PathConfigMap,\r\n  routeNames: string[] = [],\r\n  initials: InitialRouteConfig[],\r\n  parentPattern?: string\r\n): RouteConfig[] => {\r\n  const configs: RouteConfig[] = [];\r\n\r\n  routeNames.push(screen);\r\n\r\n  const config = routeConfig[screen];\r\n\r\n  if (typeof config === 'string') {\r\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\r\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\r\n\r\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\r\n  } else if (typeof config === 'object') {\r\n    let pattern: string | undefined;\r\n\r\n    // if an object is specified as the value (e.g. Foo: { ... }),\r\n    // it can have `path` property and\r\n    // it could have `screens` prop which has nested configs\r\n    if (typeof config.path === 'string') {\r\n      if (legacy) {\r\n        pattern =\r\n          config.exact !== true && parentPattern\r\n            ? joinPaths(parentPattern, config.path)\r\n            : config.path;\r\n      } else {\r\n        if (config.exact && config.path === undefined) {\r\n          throw new Error(\r\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\r\n          );\r\n        }\r\n\r\n        pattern =\r\n          config.exact !== true\r\n            ? joinPaths(parentPattern || '', config.path || '')\r\n            : config.path || '';\r\n      }\r\n\r\n      configs.push(\r\n        createConfigItem(\r\n          legacy,\r\n          screen,\r\n          routeNames,\r\n          pattern,\r\n          config.path,\r\n          config.parse\r\n        )\r\n      );\r\n    }\r\n\r\n    if (config.screens) {\r\n      // property `initialRouteName` without `screens` has no purpose\r\n      if (config.initialRouteName) {\r\n        initials.push({\r\n          initialRouteName: config.initialRouteName,\r\n          connectedRoutes: Object.keys(config.screens),\r\n        });\r\n      }\r\n\r\n      Object.keys(config.screens).forEach((nestedConfig) => {\r\n        const result = createNormalizedConfigs(\r\n          legacy,\r\n          nestedConfig,\r\n          config.screens as PathConfigMap,\r\n          routeNames,\r\n          initials,\r\n          pattern ?? parentPattern\r\n        );\r\n\r\n        configs.push(...result);\r\n      });\r\n    }\r\n  }\r\n\r\n  routeNames.pop();\r\n\r\n  return configs;\r\n};\r\n\r\nconst createConfigItem = (\r\n  legacy: boolean,\r\n  screen: string,\r\n  routeNames: string[],\r\n  pattern: string,\r\n  path: string,\r\n  parse?: ParseConfig\r\n): RouteConfig => {\r\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\r\n  pattern = pattern.split('/').filter(Boolean).join('/');\r\n\r\n  const regex = pattern\r\n    ? new RegExp(\r\n        `^(${pattern\r\n          .split('/')\r\n          .map((it) => {\r\n            if (legacy && it === '*') {\r\n              throw new Error(\r\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\r\n              );\r\n            }\r\n\r\n            if (it.startsWith(':')) {\r\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\r\n            }\r\n\r\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\r\n          })\r\n          .join('')})`\r\n      )\r\n    : undefined;\r\n\r\n  return {\r\n    screen,\r\n    regex,\r\n    pattern,\r\n    path,\r\n    // The routeNames array is mutated, so copy it to keep the current state\r\n    routeNames: [...routeNames],\r\n    parse,\r\n  };\r\n};\r\n\r\nconst findParseConfigForRoute = (\r\n  routeName: string,\r\n  flatConfig: RouteConfig[]\r\n): ParseConfig | undefined => {\r\n  for (const config of flatConfig) {\r\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\r\n      return config.parse;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n// Try to find an initial route connected with the one passed\r\nconst findInitialRoute = (\r\n  routeName: string,\r\n  initialRoutes: InitialRouteConfig[]\r\n): string | undefined => {\r\n  for (const config of initialRoutes) {\r\n    if (config.connectedRoutes.includes(routeName)) {\r\n      return config.initialRouteName === routeName\r\n        ? undefined\r\n        : config.initialRouteName;\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\n// returns state object with values depending on whether\r\n// it is the end of state and if there is initialRoute for this level\r\nconst createStateObject = (\r\n  initialRoute: string | undefined,\r\n  route: ParsedRoute,\r\n  isEmpty: boolean\r\n): InitialState => {\r\n  if (isEmpty) {\r\n    if (initialRoute) {\r\n      return {\r\n        index: 1,\r\n        routes: [{ name: initialRoute }, route],\r\n      };\r\n    } else {\r\n      return {\r\n        routes: [route],\r\n      };\r\n    }\r\n  } else {\r\n    if (initialRoute) {\r\n      return {\r\n        index: 1,\r\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\r\n      };\r\n    } else {\r\n      return {\r\n        routes: [{ ...route, state: { routes: [] } }],\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst createNestedStateObject = (\r\n  routes: ParsedRoute[],\r\n  initialRoutes: InitialRouteConfig[]\r\n) => {\r\n  let state: InitialState;\r\n  let route = routes.shift() as ParsedRoute;\r\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\r\n\r\n  state = createStateObject(initialRoute, route, routes.length === 0);\r\n\r\n  if (routes.length > 0) {\r\n    let nestedState = state;\r\n\r\n    while ((route = routes.shift() as ParsedRoute)) {\r\n      initialRoute = findInitialRoute(route.name, initialRoutes);\r\n\r\n      const nestedStateIndex =\r\n        nestedState.index || nestedState.routes.length - 1;\r\n\r\n      nestedState.routes[nestedStateIndex].state = createStateObject(\r\n        initialRoute,\r\n        route,\r\n        routes.length === 0\r\n      );\r\n\r\n      if (routes.length > 0) {\r\n        nestedState = nestedState.routes[nestedStateIndex]\r\n          .state as InitialState;\r\n      }\r\n    }\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst findFocusedRoute = (state: InitialState) => {\r\n  let current: InitialState | undefined = state;\r\n\r\n  while (current?.routes[current.index || 0].state) {\r\n    // The query params apply to the deepest route\r\n    current = current.routes[current.index || 0].state;\r\n  }\r\n\r\n  const route = (current as PartialState<NavigationState>).routes[\r\n    current?.index || 0\r\n  ];\r\n\r\n  return route;\r\n};\r\n\r\nconst parseQueryParams = (\r\n  path: string,\r\n  parseConfig?: Record<string, (value: string) => any>\r\n) => {\r\n  const query = path.split('?')[1];\r\n  const params = queryString.parse(query);\r\n\r\n  if (parseConfig) {\r\n    Object.keys(params).forEach((name) => {\r\n      if (parseConfig[name] && typeof params[name] === 'string') {\r\n        params[name] = parseConfig[name](params[name] as string);\r\n      }\r\n    });\r\n  }\r\n\r\n  return Object.keys(params).length ? params : undefined;\r\n};\r\n"]}