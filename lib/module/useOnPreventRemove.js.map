{"version":3,"sources":["useOnPreventRemove.tsx"],"names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","has","isPrevented","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","addKeyedListener","useContext","routeKey","useEffect","state","routes"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAKA,OAAOC,wBAAP,MAEO,4BAFP;AAGA,OAAOC,sBAAP,MAAmC,0BAAnC;AAUA,MAAMC,kBAAkB,GAAGC,MAAM,CAAC,oBAAD,CAAjC;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,OADiC,EAEjCC,qBAFiC,EAGjCC,aAHiC,EAIjCC,UAJiC,EAKjCC,MALiC,KAM9B;AAAA;;AACH,QAAMC,aAAa,GAAGF,UAAU,CAACG,GAAX,CAAgBC,KAAD,IAAWA,KAAK,CAACC,GAAhC,CAAtB,CADG,CAGH;;AACA,QAAMC,aAAa,GAAGP,aAAa,CAChCQ,MADmB,CACXH,KAAD,IAAW,CAACF,aAAa,CAACM,QAAd,CAAuBJ,KAAK,CAACC,GAA7B,CADA,EAEnBI,OAFmB,EAAtB;AAIA,QAAMC,gBAA6B,GACjC;AADiC,2BAEjCT,MAAM,CAACP,kBAAD,CAF2B,yEAEH,IAAIiB,GAAJ,EAFhC;AAIA,QAAMC,kBAAkB,GAAG,EACzB,GAAGX,MADsB;AAEzB,KAACP,kBAAD,GAAsBgB;AAFG,GAA3B;;AAKA,OAAK,MAAMN,KAAX,IAAoBE,aAApB,EAAmC;AAAA;;AACjC,QAAII,gBAAgB,CAACG,GAAjB,CAAqBT,KAAK,CAACC,GAA3B,CAAJ,EAAqC;AACnC;AACA;AACD,KAJgC,CAMjC;;;AACA,UAAMS,WAAW,4BAAGhB,qBAAqB,CAACM,KAAK,CAACC,GAAP,CAAxB,0DAAG,2BAAAP,qBAAqB,EAAcc,kBAAd,CAAzC;;AAEA,QAAIE,WAAJ,EAAiB;AACf,aAAO,IAAP;AACD;;AAEDJ,IAAAA,gBAAgB,CAACK,GAAjB,CAAqBX,KAAK,CAACC,GAA3B;AAEA,UAAMW,KAAK,GAAGnB,OAAO,CAACoB,IAAR,CAAa;AACzBC,MAAAA,IAAI,EAAE,cADmB;AAEzBC,MAAAA,MAAM,EAAEf,KAAK,CAACC,GAFW;AAGzBe,MAAAA,IAAI,EAAE;AAAEnB,QAAAA,MAAM,EAAEW;AAAV,OAHmB;AAIzBS,MAAAA,iBAAiB,EAAE;AAJM,KAAb,CAAd;;AAOA,QAAIL,KAAK,CAACM,gBAAV,EAA4B;AAC1B,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAnDM;AAqDP,eAAe,SAASC,kBAAT,CAA4B;AACzCC,EAAAA,QADyC;AAEzC3B,EAAAA,OAFyC;AAGzCC,EAAAA;AAHyC,CAA5B,EAIH;AACV,QAAM;AAAE2B,IAAAA;AAAF,MAAuBlC,KAAK,CAACmC,UAAN,CAAiBlC,wBAAjB,CAA7B;AACA,QAAMY,KAAK,GAAGb,KAAK,CAACmC,UAAN,CAAiBjC,sBAAjB,CAAd;AACA,QAAMkC,QAAQ,GAAGvB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEC,GAAxB;AAEAd,EAAAA,KAAK,CAACqC,SAAN,CAAgB,MAAM;AACpB,QAAID,QAAJ,EAAc;AACZ,aAAOF,gBAAP,aAAOA,gBAAP,uBAAOA,gBAAgB,CAAG,cAAH,EAAmBE,QAAnB,EAA8B1B,MAAD,IAAY;AAC9D,cAAM4B,KAAK,GAAGL,QAAQ,EAAtB;AAEA,eAAO5B,mBAAmB,CACxBC,OADwB,EAExBC,qBAFwB,EAGxB+B,KAAK,CAACC,MAHkB,EAIxB,EAJwB,EAKxB7B,MALwB,CAA1B;AAOD,OAVsB,CAAvB;AAWD;AACF,GAdD,EAcG,CAACwB,gBAAD,EAAmB3B,qBAAnB,EAA0CD,OAA1C,EAAmD2B,QAAnD,EAA6DG,QAA7D,CAdH;AAeD","sourcesContent":["import * as React from 'react';\r\nimport type {\r\n  NavigationState,\r\n  NavigationAction,\r\n} from '@react-navigation/routers';\r\nimport NavigationBuilderContext, {\r\n  ChildBeforeRemoveListener,\r\n} from './NavigationBuilderContext';\r\nimport NavigationRouteContext from './NavigationRouteContext';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\nimport type { EventMapCore } from './types';\r\n\r\ntype Options = {\r\n  getState: () => NavigationState;\r\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\r\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\r\n};\r\n\r\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\r\n\r\nexport const shouldPreventRemove = (\r\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\r\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\r\n  currentRoutes: { key: string }[],\r\n  nextRoutes: { key?: string | undefined }[],\r\n  action: NavigationAction\r\n) => {\r\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\r\n\r\n  // Call these in reverse order so last screens handle the event first\r\n  const removedRoutes = currentRoutes\r\n    .filter((route) => !nextRouteKeys.includes(route.key))\r\n    .reverse();\r\n\r\n  const visitedRouteKeys: Set<string> =\r\n    // @ts-expect-error: add this property to mark that we've already emitted this action\r\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\r\n\r\n  const beforeRemoveAction = {\r\n    ...action,\r\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\r\n  };\r\n\r\n  for (const route of removedRoutes) {\r\n    if (visitedRouteKeys.has(route.key)) {\r\n      // Skip if we've already emitted this action for this screen\r\n      continue;\r\n    }\r\n\r\n    // First, we need to check if any child screens want to prevent it\r\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\r\n\r\n    if (isPrevented) {\r\n      return true;\r\n    }\r\n\r\n    visitedRouteKeys.add(route.key);\r\n\r\n    const event = emitter.emit({\r\n      type: 'beforeRemove',\r\n      target: route.key,\r\n      data: { action: beforeRemoveAction },\r\n      canPreventDefault: true,\r\n    });\r\n\r\n    if (event.defaultPrevented) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport default function useOnPreventRemove({\r\n  getState,\r\n  emitter,\r\n  beforeRemoveListeners,\r\n}: Options) {\r\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\r\n  const route = React.useContext(NavigationRouteContext);\r\n  const routeKey = route?.key;\r\n\r\n  React.useEffect(() => {\r\n    if (routeKey) {\r\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\r\n        const state = getState();\r\n\r\n        return shouldPreventRemove(\r\n          emitter,\r\n          beforeRemoveListeners,\r\n          state.routes,\r\n          [],\r\n          action\r\n        );\r\n      });\r\n    }\r\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\r\n}\r\n"]}