{"version":3,"sources":["useOnAction.tsx"],"names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","useContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  PartialState,\r\n  Router,\r\n  RouterConfigOptions,\r\n} from '@react-navigation/routers';\r\nimport NavigationBuilderContext, {\r\n  ChildActionListener,\r\n  ChildBeforeRemoveListener,\r\n} from './NavigationBuilderContext';\r\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\nimport type { EventMapCore } from './types';\r\n\r\ntype Options = {\r\n  router: Router<NavigationState, NavigationAction>;\r\n  key?: string;\r\n  getState: () => NavigationState;\r\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\r\n  actionListeners: ChildActionListener[];\r\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\r\n  routerConfigOptions: RouterConfigOptions;\r\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\r\n};\r\n\r\n/**\r\n * Hook to handle actions for a navigator, including state updates and bubbling.\r\n *\r\n * Bubbling an action is achieved in 2 ways:\r\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\r\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\r\n *\r\n * When the action handler handles as action, it returns `true`, otherwise `false`.\r\n */\r\nexport default function useOnAction({\r\n  router,\r\n  getState,\r\n  setState,\r\n  key,\r\n  actionListeners,\r\n  beforeRemoveListeners,\r\n  routerConfigOptions,\r\n  emitter,\r\n}: Options) {\r\n  const {\r\n    onAction: onActionParent,\r\n    onRouteFocus: onRouteFocusParent,\r\n    addListener: addListenerParent,\r\n    onDispatchAction,\r\n  } = React.useContext(NavigationBuilderContext);\r\n\r\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\r\n    routerConfigOptions\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    routerConfigOptionsRef.current = routerConfigOptions;\r\n  });\r\n\r\n  const onAction = React.useCallback(\r\n    (\r\n      action: NavigationAction,\r\n      visitedNavigators: Set<string> = new Set<string>()\r\n    ) => {\r\n      const state = getState();\r\n\r\n      // Since actions can bubble both up and down, they could come to the same navigator again\r\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\r\n      if (visitedNavigators.has(state.key)) {\r\n        return false;\r\n      }\r\n\r\n      visitedNavigators.add(state.key);\r\n\r\n      if (typeof action.target !== 'string' || action.target === state.key) {\r\n        let result = router.getStateForAction(\r\n          state,\r\n          action,\r\n          routerConfigOptionsRef.current\r\n        );\r\n\r\n        // If a target is specified and set to current navigator, the action shouldn't bubble\r\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\r\n        result =\r\n          result === null && action.target === state.key ? state : result;\r\n\r\n        if (result !== null) {\r\n          onDispatchAction(action, state === result);\r\n\r\n          if (state !== result) {\r\n            const isPrevented = shouldPreventRemove(\r\n              emitter,\r\n              beforeRemoveListeners,\r\n              state.routes,\r\n              result.routes,\r\n              action\r\n            );\r\n\r\n            if (isPrevented) {\r\n              return true;\r\n            }\r\n\r\n            setState(result);\r\n          }\r\n\r\n          if (onRouteFocusParent !== undefined) {\r\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\r\n            // This means we need to focus all of the parent navigators of this navigator as well\r\n            const shouldFocus = router.shouldActionChangeFocus(action);\r\n\r\n            if (shouldFocus && key !== undefined) {\r\n              onRouteFocusParent(key);\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      }\r\n\r\n      if (onActionParent !== undefined) {\r\n        // Bubble action to the parent if the current navigator didn't handle it\r\n        if (onActionParent(action, visitedNavigators)) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\r\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\r\n        const listener = actionListeners[i];\r\n\r\n        if (listener(action, visitedNavigators)) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n    [\r\n      actionListeners,\r\n      beforeRemoveListeners,\r\n      emitter,\r\n      getState,\r\n      key,\r\n      onActionParent,\r\n      onDispatchAction,\r\n      onRouteFocusParent,\r\n      router,\r\n      setState,\r\n    ]\r\n  );\r\n\r\n  useOnPreventRemove({\r\n    getState,\r\n    emitter,\r\n    beforeRemoveListeners,\r\n  });\r\n\r\n  React.useEffect(() => addListenerParent?.('action', onAction), [\r\n    addListenerParent,\r\n    onAction,\r\n  ]);\r\n\r\n  return onAction;\r\n}\r\n"]}