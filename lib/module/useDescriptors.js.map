{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useRouteCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","screen","name","key","routeOptions","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport SceneView from './SceneView';\r\nimport NavigationBuilderContext, {\r\n  AddListener,\r\n  AddKeyedListener,\r\n} from './NavigationBuilderContext';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\nimport useNavigationCache from './useNavigationCache';\r\nimport useRouteCache from './useRouteCache';\r\nimport NavigationContext from './NavigationContext';\r\nimport NavigationRouteContext from './NavigationRouteContext';\r\nimport type {\r\n  Descriptor,\r\n  NavigationHelpers,\r\n  RouteConfig,\r\n  RouteProp,\r\n  EventMapBase,\r\n} from './types';\r\n\r\ntype Options<\r\n  State extends NavigationState,\r\n  ScreenOptions extends {},\r\n  EventMap extends EventMapBase\r\n> = {\r\n  state: State;\r\n  screens: Record<\r\n    string,\r\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\r\n  >;\r\n  navigation: NavigationHelpers<ParamListBase>;\r\n  screenOptions?:\r\n    | ScreenOptions\r\n    | ((props: {\r\n        route: RouteProp<ParamListBase, string>;\r\n        navigation: any;\r\n      }) => ScreenOptions);\r\n  onAction: (\r\n    action: NavigationAction,\r\n    visitedNavigators?: Set<string>\r\n  ) => boolean;\r\n  getState: () => State;\r\n  setState: (state: State) => void;\r\n  addListener: AddListener;\r\n  addKeyedListener: AddKeyedListener;\r\n  onRouteFocus: (key: string) => void;\r\n  router: Router<State, NavigationAction>;\r\n  emitter: NavigationEventEmitter<any>;\r\n};\r\n\r\n/**\r\n * Hook to create descriptor objects for the child routes.\r\n *\r\n * A descriptor object provides 3 things:\r\n * - Helper method to render a screen\r\n * - Options specified by the screen for the navigator\r\n * - Navigation object intended for the route\r\n */\r\nexport default function useDescriptors<\r\n  State extends NavigationState,\r\n  ScreenOptions extends {},\r\n  EventMap extends EventMapBase\r\n>({\r\n  state,\r\n  screens,\r\n  navigation,\r\n  screenOptions,\r\n  onAction,\r\n  getState,\r\n  setState,\r\n  addListener,\r\n  addKeyedListener,\r\n  onRouteFocus,\r\n  router,\r\n  emitter,\r\n}: Options<State, ScreenOptions, EventMap>) {\r\n  const [options, setOptions] = React.useState<Record<string, object>>({});\r\n  const { onDispatchAction, onOptionsChange } = React.useContext(\r\n    NavigationBuilderContext\r\n  );\r\n\r\n  const context = React.useMemo(\r\n    () => ({\r\n      navigation,\r\n      onAction,\r\n      addListener,\r\n      addKeyedListener,\r\n      onRouteFocus,\r\n      onDispatchAction,\r\n      onOptionsChange,\r\n    }),\r\n    [\r\n      navigation,\r\n      onAction,\r\n      addListener,\r\n      addKeyedListener,\r\n      onRouteFocus,\r\n      onDispatchAction,\r\n      onOptionsChange,\r\n    ]\r\n  );\r\n\r\n  const navigations = useNavigationCache<State, ScreenOptions>({\r\n    state,\r\n    getState,\r\n    navigation,\r\n    setOptions,\r\n    router,\r\n    emitter,\r\n  });\r\n\r\n  const routes = useRouteCache(state.routes);\r\n\r\n  return routes.reduce<\r\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\r\n  >((acc, route, i) => {\r\n    const screen = screens[route.name];\r\n    const navigation = navigations[route.key];\r\n\r\n    const routeOptions = {\r\n      // The default `screenOptions` passed to the navigator\r\n      ...(typeof screenOptions === 'object' || screenOptions == null\r\n        ? screenOptions\r\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\r\n          screenOptions({\r\n            route,\r\n            navigation,\r\n          })),\r\n      // The `options` prop passed to `Screen` elements\r\n      ...(typeof screen.options === 'object' || screen.options == null\r\n        ? screen.options\r\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\r\n          screen.options({\r\n            route,\r\n            navigation,\r\n          })),\r\n      // The options set via `navigation.setOptions`\r\n      ...options[route.key],\r\n    };\r\n\r\n    acc[route.key] = {\r\n      navigation,\r\n      render() {\r\n        return (\r\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\r\n            <NavigationContext.Provider value={navigation}>\r\n              <NavigationRouteContext.Provider value={route}>\r\n                <SceneView\r\n                  navigation={navigation}\r\n                  route={route}\r\n                  screen={screen}\r\n                  routeState={state.routes[i].state}\r\n                  getState={getState}\r\n                  setState={setState}\r\n                  options={routeOptions}\r\n                />\r\n              </NavigationRouteContext.Provider>\r\n            </NavigationContext.Provider>\r\n          </NavigationBuilderContext.Provider>\r\n        );\r\n      },\r\n      options: routeOptions as ScreenOptions,\r\n    };\r\n\r\n    return acc;\r\n  }, {});\r\n}\r\n"]}