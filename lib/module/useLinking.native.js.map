{"version":3,"sources":["useLinking.native.tsx"],"names":["React","Linking","Platform","getActionFromState","getActionFromStateDefault","getStateFromPath","getStateFromPathDefault","escapeStringRegexp","isUsingLinking","useLinking","ref","enabled","prefixes","config","getInitialURL","Promise","race","resolve","setTimeout","subscribe","listener","callback","url","addEventListener","removeEventListener","useEffect","Error","OS","join","trim","enabledRef","useRef","prefixesRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","current","extractPathFromURL","useCallback","prefix","protocol","match","host","replace","prefixRegex","RegExp","split","map","it","test","undefined","getInitialState","state","then","path","thenable","onfulfilled","catch","navigation","rootState","getRootState","routes","some","r","routeNames","includes","name","console","warn","action","dispatch","e","message","resetRoot"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Linking, Platform } from 'react-native';\r\nimport {\r\n  getActionFromState as getActionFromStateDefault,\r\n  getStateFromPath as getStateFromPathDefault,\r\n  NavigationContainerRef,\r\n} from '@react-navigation/core';\r\nimport escapeStringRegexp from 'escape-string-regexp';\r\nimport type { LinkingOptions } from './types';\r\n\r\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\r\n\r\nlet isUsingLinking = false;\r\n\r\nexport default function useLinking(\r\n  ref: React.RefObject<NavigationContainerRef>,\r\n  {\r\n    enabled = true,\r\n    prefixes,\r\n    config,\r\n    getInitialURL = () =>\r\n      Promise.race([\r\n        Linking.getInitialURL(),\r\n        new Promise<undefined>((resolve) =>\r\n          // Timeout in 150ms if `getInitialState` doesn't resolve\r\n          // Workaround for https://github.com/facebook/react-native/issues/25675\r\n          setTimeout(resolve, 150)\r\n        ),\r\n      ]),\r\n    subscribe = (listener) => {\r\n      const callback = ({ url }: { url: string }) => listener(url);\r\n\r\n      Linking.addEventListener('url', callback);\r\n\r\n      return () => Linking.removeEventListener('url', callback);\r\n    },\r\n    getStateFromPath = getStateFromPathDefault,\r\n    getActionFromState = getActionFromStateDefault,\r\n  }: LinkingOptions\r\n) {\r\n  React.useEffect(() => {\r\n    if (enabled !== false && isUsingLinking) {\r\n      throw new Error(\r\n        [\r\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\r\n          \"- You are not using both 'linking' prop and 'useLinking'\",\r\n          \"- You don't have 'useLinking' in multiple components\",\r\n          Platform.OS === 'android'\r\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\r\n            : '',\r\n        ]\r\n          .join('\\n')\r\n          .trim()\r\n      );\r\n    } else {\r\n      isUsingLinking = enabled !== false;\r\n    }\r\n\r\n    return () => {\r\n      isUsingLinking = false;\r\n    };\r\n  });\r\n\r\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\r\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\r\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\r\n  const enabledRef = React.useRef(enabled);\r\n  const prefixesRef = React.useRef(prefixes);\r\n  const configRef = React.useRef(config);\r\n  const getInitialURLRef = React.useRef(getInitialURL);\r\n  const getStateFromPathRef = React.useRef(getStateFromPath);\r\n  const getActionFromStateRef = React.useRef(getActionFromState);\r\n\r\n  React.useEffect(() => {\r\n    enabledRef.current = enabled;\r\n    prefixesRef.current = prefixes;\r\n    configRef.current = config;\r\n    getInitialURLRef.current = getInitialURL;\r\n    getStateFromPathRef.current = getStateFromPath;\r\n    getActionFromStateRef.current = getActionFromState;\r\n  });\r\n\r\n  const extractPathFromURL = React.useCallback((url: string) => {\r\n    for (const prefix of prefixesRef.current) {\r\n      const protocol = prefix.match(/^[^:]+:\\/\\//)?.[0] ?? '';\r\n      const host = prefix.replace(protocol, '');\r\n      const prefixRegex = new RegExp(\r\n        `^${escapeStringRegexp(protocol)}${host\r\n          .split('.')\r\n          .map((it) => (it === '*' ? '[^/]+' : escapeStringRegexp(it)))\r\n          .join('\\\\.')}`\r\n      );\r\n      if (prefixRegex.test(url)) {\r\n        return url.replace(prefixRegex, '');\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }, []);\r\n\r\n  const getInitialState = React.useCallback(() => {\r\n    let state: ResultState | undefined;\r\n\r\n    if (enabledRef.current) {\r\n      const url = getInitialURLRef.current();\r\n\r\n      if (url != null && typeof url !== 'string') {\r\n        return url.then((url) => {\r\n          const path = url ? extractPathFromURL(url) : null;\r\n\r\n          return path\r\n            ? getStateFromPathRef.current(path, configRef.current)\r\n            : undefined;\r\n        });\r\n      }\r\n\r\n      const path = url ? extractPathFromURL(url) : null;\r\n\r\n      state = path\r\n        ? getStateFromPathRef.current(path, configRef.current)\r\n        : undefined;\r\n    }\r\n\r\n    const thenable = {\r\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\r\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\r\n      },\r\n      catch() {\r\n        return thenable;\r\n      },\r\n    };\r\n\r\n    return thenable as PromiseLike<ResultState | undefined>;\r\n  }, [extractPathFromURL]);\r\n\r\n  React.useEffect(() => {\r\n    const listener = (url: string) => {\r\n      if (!enabled) {\r\n        return;\r\n      }\r\n\r\n      const path = extractPathFromURL(url);\r\n      const navigation = ref.current;\r\n\r\n      if (navigation && path) {\r\n        const state = getStateFromPathRef.current(path, configRef.current);\r\n\r\n        if (state) {\r\n          // Make sure that the routes in the state exist in the root navigator\r\n          // Otherwise there's an error in the linking configuration\r\n          const rootState = navigation.getRootState();\r\n\r\n          if (\r\n            state.routes.some((r) => !rootState?.routeNames.includes(r.name))\r\n          ) {\r\n            console.warn(\r\n              \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\r\n            );\r\n            return;\r\n          }\r\n\r\n          const action = getActionFromStateRef.current(\r\n            state,\r\n            configRef.current\r\n          );\r\n\r\n          if (action !== undefined) {\r\n            try {\r\n              navigation.dispatch(action);\r\n            } catch (e) {\r\n              // Ignore any errors from deep linking.\r\n              // This could happen in case of malformed links, navigation object not being initialized etc.\r\n              console.warn(\r\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\r\n              );\r\n            }\r\n          } else {\r\n            navigation.resetRoot(state);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    return subscribe(listener);\r\n  }, [enabled, ref, subscribe, extractPathFromURL]);\r\n\r\n  return {\r\n    getInitialState,\r\n  };\r\n}\r\n"]}