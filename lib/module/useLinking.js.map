{"version":3,"sources":["useLinking.tsx"],"names":["React","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","nanoid","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","isUsingLinking","useLinking","enabled","config","useEffect","join","trim","useState","enabledRef","useRef","configRef","getStateFromPathRef","getActionFromStateRef","getPathFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","console","warn","action","dispatch","e","message","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","currentIndex","addListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  getStateFromPath as getStateFromPathDefault,\r\n  getPathFromState as getPathFromStateDefault,\r\n  getActionFromState as getActionFromStateDefault,\r\n  NavigationContainerRef,\r\n  NavigationState,\r\n} from '@react-navigation/core';\r\nimport { nanoid } from 'nanoid/non-secure';\r\nimport ServerContext from './ServerContext';\r\nimport type { LinkingOptions } from './types';\r\n\r\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\r\n\r\ntype HistoryRecord = {\r\n  // Unique identifier for this record to match it with window.history.state\r\n  id: string;\r\n  // Navigation state object for the history entry\r\n  state: NavigationState;\r\n  // Path of the history entry\r\n  path: string;\r\n};\r\n\r\nconst createMemoryHistory = () => {\r\n  let index = 0;\r\n  let items: HistoryRecord[] = [];\r\n\r\n  // Pending callbacks for `history.go(n)`\r\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\r\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\r\n\r\n  const interrupt = () => {\r\n    // If another history operation was performed we need to interrupt existing ones\r\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\r\n    // Since otherwise it won't be correct if something else has changed\r\n    pending.forEach((it) => {\r\n      const cb = it.cb;\r\n      it.cb = () => cb(true);\r\n    });\r\n  };\r\n\r\n  const history = {\r\n    get index(): number {\r\n      // We store an id in the state instead of an index\r\n      // Index could get out of sync with in-memory values if page reloads\r\n      const id = window.history.state?.id;\r\n\r\n      if (id) {\r\n        const index = items.findIndex((item) => item.id === id);\r\n\r\n        return index > -1 ? index : 0;\r\n      }\r\n\r\n      return 0;\r\n    },\r\n\r\n    get(index: number) {\r\n      return items[index];\r\n    },\r\n\r\n    backIndex({ path }: { path: string }) {\r\n      // We need to find the index from the element before current to get closest path to go back to\r\n      for (let i = index - 1; i >= 0; i--) {\r\n        const item = items[i];\r\n\r\n        if (item.path === path) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    push({ path, state }: { path: string; state: NavigationState }) {\r\n      interrupt();\r\n\r\n      const id = nanoid();\r\n\r\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\r\n      // So we remove any existing entries after the current index to clean them up\r\n      items = items.slice(0, index + 1);\r\n\r\n      items.push({ path, state, id });\r\n      index = items.length - 1;\r\n\r\n      // We pass empty string for title because it's ignored in all browsers except safari\r\n      // We don't store state object in history.state because:\r\n      // - browsers have limits on how big it can be, and we don't control the size\r\n      // - while not recommended, there could be non-serializable data in state\r\n      window.history.pushState({ id }, '', path);\r\n    },\r\n\r\n    replace({ path, state }: { path: string; state: NavigationState }) {\r\n      interrupt();\r\n\r\n      const id = window.history.state?.id ?? nanoid();\r\n\r\n      if (items.length) {\r\n        items[index] = { path, state, id };\r\n      } else {\r\n        // This is the first time any state modifications are done\r\n        // So we need to push the entry as there's nothing to replace\r\n        items.push({ path, state, id });\r\n      }\r\n\r\n      window.history.replaceState({ id }, '', path);\r\n    },\r\n\r\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\r\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\r\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\r\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\r\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\r\n    go(n: number) {\r\n      interrupt();\r\n\r\n      if (n > 0) {\r\n        // We shouldn't go forward more than available index\r\n        n = Math.min(n, items.length - 1);\r\n      } else if (n < 0) {\r\n        // We shouldn't go back more than the 0 index\r\n        // Otherwise we'll exit the page\r\n        n = index + n < 0 ? -index : n;\r\n      }\r\n\r\n      if (n === 0) {\r\n        return;\r\n      }\r\n\r\n      index += n;\r\n\r\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\r\n      // So we need to somehow handle following cases:\r\n      // - There's history to go back, `history.go` is called, and `popstate` fires\r\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\r\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\r\n      return new Promise<void>((resolve, reject) => {\r\n        const done = (interrupted?: boolean) => {\r\n          clearTimeout(timer);\r\n\r\n          if (interrupted) {\r\n            reject(new Error('History was changed during navigation.'));\r\n            return;\r\n          }\r\n\r\n          // There seems to be a bug in Chrome regarding updating the title\r\n          // If we set a title just before calling `history.go`, the title gets lost\r\n          // However the value of `document.title` is still what we set it to\r\n          // It's just not displayed in the tab bar\r\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\r\n          // And set the title to what it was before so it gets applied\r\n          // It won't work without setting it to empty string coz otherwise title isn't changing\r\n          // Which means that the browser won't do anything after setting the title\r\n          const { title } = window.document;\r\n\r\n          window.document.title = '';\r\n          window.document.title = title;\r\n\r\n          resolve();\r\n        };\r\n\r\n        pending.push({ ref: done, cb: done });\r\n\r\n        // If navigation didn't happen within 100ms, assume that it won't happen\r\n        // This may not be accurate, but hopefully it won't take so much time\r\n        // In Chrome, navigation seems to happen instantly in next microtask\r\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\r\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\r\n        const timer = setTimeout(() => {\r\n          const index = pending.findIndex((it) => it.ref === done);\r\n\r\n          if (index > -1) {\r\n            pending[index].cb();\r\n            pending.splice(index, 1);\r\n          }\r\n        }, 100);\r\n\r\n        const onPopState = () => {\r\n          const last = pending.pop();\r\n\r\n          window.removeEventListener('popstate', onPopState);\r\n          last?.cb();\r\n        };\r\n\r\n        window.addEventListener('popstate', onPopState);\r\n        window.history.go(n);\r\n      });\r\n    },\r\n\r\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\r\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\r\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\r\n    listen(listener: () => void) {\r\n      const onPopState = () => {\r\n        if (pending.length) {\r\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\r\n          return;\r\n        }\r\n\r\n        listener();\r\n      };\r\n\r\n      window.addEventListener('popstate', onPopState);\r\n\r\n      return () => window.removeEventListener('popstate', onPopState);\r\n    },\r\n  };\r\n\r\n  return history;\r\n};\r\n\r\n/**\r\n * Find the matching navigation state that changed between 2 navigation states\r\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\r\n */\r\nconst findMatchingState = <T extends NavigationState>(\r\n  a: T | undefined,\r\n  b: T | undefined\r\n): [T | undefined, T | undefined] => {\r\n  if (a === undefined || b === undefined || a.key !== b.key) {\r\n    return [undefined, undefined];\r\n  }\r\n\r\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\r\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\r\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\r\n\r\n  const aRoute = a.routes[a.index];\r\n  const bRoute = b.routes[b.index];\r\n\r\n  const aChildState = aRoute.state as T | undefined;\r\n  const bChildState = bRoute.state as T | undefined;\r\n\r\n  // Stop here if this is the state object that changed:\r\n  // - history length is different\r\n  // - focused routes are different\r\n  // - one of them doesn't have child state\r\n  // - child state keys are different\r\n  if (\r\n    aHistoryLength !== bHistoryLength ||\r\n    aRoute.key !== bRoute.key ||\r\n    aChildState === undefined ||\r\n    bChildState === undefined ||\r\n    aChildState.key !== bChildState.key\r\n  ) {\r\n    return [a, b];\r\n  }\r\n\r\n  return findMatchingState(aChildState, bChildState);\r\n};\r\n\r\n/**\r\n * Run async function in series as it's called.\r\n */\r\nconst series = (cb: () => Promise<void>) => {\r\n  // Whether we're currently handling a callback\r\n  let handling = false;\r\n  let queue: (() => Promise<void>)[] = [];\r\n\r\n  const callback = async () => {\r\n    try {\r\n      if (handling) {\r\n        // If we're currently handling a previous event, wait before handling this one\r\n        // Add the callback to the beginning of the queue\r\n        queue.unshift(callback);\r\n        return;\r\n      }\r\n\r\n      handling = true;\r\n\r\n      await cb();\r\n    } finally {\r\n      handling = false;\r\n\r\n      if (queue.length) {\r\n        // If we have queued items, handle the last one\r\n        const last = queue.pop();\r\n\r\n        last?.();\r\n      }\r\n    }\r\n  };\r\n\r\n  return callback;\r\n};\r\n\r\nlet isUsingLinking = false;\r\n\r\nexport default function useLinking(\r\n  ref: React.RefObject<NavigationContainerRef>,\r\n  {\r\n    enabled = true,\r\n    config,\r\n    getStateFromPath = getStateFromPathDefault,\r\n    getPathFromState = getPathFromStateDefault,\r\n    getActionFromState = getActionFromStateDefault,\r\n  }: LinkingOptions\r\n) {\r\n  React.useEffect(() => {\r\n    if (enabled !== false && isUsingLinking) {\r\n      throw new Error(\r\n        [\r\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\r\n          \"- You are not using both 'linking' prop and 'useLinking'\",\r\n          \"- You don't have 'useLinking' in multiple components\",\r\n        ]\r\n          .join('\\n')\r\n          .trim()\r\n      );\r\n    } else {\r\n      isUsingLinking = enabled !== false;\r\n    }\r\n\r\n    return () => {\r\n      isUsingLinking = false;\r\n    };\r\n  });\r\n\r\n  const [history] = React.useState(createMemoryHistory);\r\n\r\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\r\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\r\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\r\n  const enabledRef = React.useRef(enabled);\r\n  const configRef = React.useRef(config);\r\n  const getStateFromPathRef = React.useRef(getStateFromPath);\r\n  const getActionFromStateRef = React.useRef(getActionFromState);\r\n  const getPathFromStateRef = React.useRef(getPathFromState);\r\n\r\n  React.useEffect(() => {\r\n    enabledRef.current = enabled;\r\n    configRef.current = config;\r\n    getStateFromPathRef.current = getStateFromPath;\r\n    getActionFromStateRef.current = getActionFromState;\r\n    getPathFromStateRef.current = getPathFromState;\r\n  });\r\n\r\n  const server = React.useContext(ServerContext);\r\n\r\n  const getInitialState = React.useCallback(() => {\r\n    let value: ResultState | undefined;\r\n\r\n    if (enabledRef.current) {\r\n      const location =\r\n        server?.location ??\r\n        (typeof window !== 'undefined' ? window.location : undefined);\r\n\r\n      const path = location ? location.pathname + location.search : undefined;\r\n\r\n      if (path) {\r\n        value = getStateFromPathRef.current(path, configRef.current);\r\n      }\r\n    }\r\n\r\n    const thenable = {\r\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\r\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\r\n      },\r\n      catch() {\r\n        return thenable;\r\n      },\r\n    };\r\n\r\n    return thenable as PromiseLike<ResultState | undefined>;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\r\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\r\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\r\n\r\n  React.useEffect(() => {\r\n    previousIndexRef.current = history.index;\r\n\r\n    return history.listen(() => {\r\n      const navigation = ref.current;\r\n\r\n      if (!navigation || !enabled) {\r\n        return;\r\n      }\r\n\r\n      const path = location.pathname + location.search;\r\n      const index = history.index;\r\n\r\n      const previousIndex = previousIndexRef.current ?? 0;\r\n\r\n      previousIndexRef.current = index;\r\n      pendingPopStatePathRef.current = path;\r\n\r\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\r\n      // If it does we'll reset to that state object\r\n      // Otherwise, we'll handle it like a regular deep link\r\n      const record = history.get(index);\r\n\r\n      if (record?.path === path && record?.state) {\r\n        navigation.resetRoot(record.state);\r\n        return;\r\n      }\r\n\r\n      const state = getStateFromPathRef.current(path, configRef.current);\r\n\r\n      // We should only dispatch an action when going forward\r\n      // Otherwise the action will likely add items to history, which would mess things up\r\n      if (state) {\r\n        // Make sure that the routes in the state exist in the root navigator\r\n        // Otherwise there's an error in the linking configuration\r\n        const rootState = navigation.getRootState();\r\n\r\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\r\n          console.warn(\r\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (index > previousIndex) {\r\n          const action = getActionFromStateRef.current(\r\n            state,\r\n            configRef.current\r\n          );\r\n\r\n          if (action !== undefined) {\r\n            try {\r\n              navigation.dispatch(action);\r\n            } catch (e) {\r\n              // Ignore any errors from deep linking.\r\n              // This could happen in case of malformed links, navigation object not being initialized etc.\r\n              console.warn(\r\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\r\n              );\r\n            }\r\n          } else {\r\n            navigation.resetRoot(state);\r\n          }\r\n        } else {\r\n          navigation.resetRoot(state);\r\n        }\r\n      } else {\r\n        // if current path didn't return any state, we should revert to initial state\r\n        navigation.resetRoot(state);\r\n      }\r\n    });\r\n  }, [enabled, history, ref]);\r\n\r\n  React.useEffect(() => {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n\r\n    if (ref.current) {\r\n      // We need to record the current metadata on the first render if they aren't set\r\n      // This will allow the initial state to be in the history entry\r\n      const state = ref.current.getRootState();\r\n\r\n      if (state) {\r\n        const path = getPathFromStateRef.current(state, configRef.current);\r\n\r\n        if (previousStateRef.current === undefined) {\r\n          previousStateRef.current = state;\r\n        }\r\n\r\n        history.replace({ path, state });\r\n      }\r\n    }\r\n\r\n    const onStateChange = async () => {\r\n      const navigation = ref.current;\r\n\r\n      if (!navigation || !enabled) {\r\n        return;\r\n      }\r\n\r\n      const previousState = previousStateRef.current;\r\n      const state = navigation.getRootState();\r\n\r\n      const pendingPath = pendingPopStatePathRef.current;\r\n      const path = getPathFromStateRef.current(state, configRef.current);\r\n\r\n      previousStateRef.current = state;\r\n      pendingPopStatePathRef.current = undefined;\r\n\r\n      // To detect the kind of state change, we need to:\r\n      // - Find the common focused navigation state in previous and current state\r\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\r\n      // - If no common focused navigation state found, it's a replace\r\n      const [previousFocusedState, focusedState] = findMatchingState(\r\n        previousState,\r\n        state\r\n      );\r\n\r\n      if (\r\n        previousFocusedState &&\r\n        focusedState &&\r\n        // We should only handle push/pop if path changed from what was in last `popstate`\r\n        // Otherwise it's likely a change triggered by `popstate`\r\n        path !== pendingPath\r\n      ) {\r\n        const historyDelta =\r\n          (focusedState.history\r\n            ? focusedState.history.length\r\n            : focusedState.routes.length) -\r\n          (previousFocusedState.history\r\n            ? previousFocusedState.history.length\r\n            : previousFocusedState.routes.length);\r\n\r\n        if (historyDelta > 0) {\r\n          // If history length is increased, we should pushState\r\n          // Note that path might not actually change here, for example, drawer open should pushState\r\n          history.push({ path, state });\r\n        } else if (historyDelta < 0) {\r\n          // If history length is decreased, i.e. entries were removed, we want to go back\r\n\r\n          const nextIndex = history.backIndex({ path });\r\n          const currentIndex = history.index;\r\n\r\n          try {\r\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\r\n              // An existing entry for this path exists and it's less than current index, go back to that\r\n              await history.go(nextIndex - currentIndex);\r\n            } else {\r\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\r\n              // This won't be correct if multiple routes were pushed in one go before\r\n              // Usually this shouldn't happen and this is a fallback for that\r\n              await history.go(historyDelta);\r\n            }\r\n\r\n            // Store the updated state as well as fix the path if incorrect\r\n            history.replace({ path, state });\r\n          } catch (e) {\r\n            // The navigation was interrupted\r\n          }\r\n        } else {\r\n          // If history length is unchanged, we want to replaceState\r\n          history.replace({ path, state });\r\n        }\r\n      } else {\r\n        // If no common navigation state was found, assume it's a replace\r\n        // This would happen if the user did a reset/conditionally changed navigators\r\n        history.replace({ path, state });\r\n      }\r\n    };\r\n\r\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\r\n    // This could happen since `history.go(n)` is asynchronous\r\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\r\n    return ref.current?.addListener('state', series(onStateChange));\r\n  });\r\n\r\n  return {\r\n    getInitialState,\r\n  };\r\n}\r\n"]}