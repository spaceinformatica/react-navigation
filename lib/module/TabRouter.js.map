{"version":3,"sources":["TabRouter.tsx"],"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","find","r","Math","min","max","length","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","merge","previousKey","slice","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\nimport BaseRouter from './BaseRouter';\r\nimport type {\r\n  NavigationState,\r\n  PartialState,\r\n  CommonNavigationAction,\r\n  Router,\r\n  DefaultRouterOptions,\r\n  Route,\r\n  ParamListBase,\r\n} from './types';\r\n\r\nexport type TabActionType = {\r\n  type: 'JUMP_TO';\r\n  payload: { name: string; params?: object };\r\n  source?: string;\r\n  target?: string;\r\n};\r\n\r\nexport type BackBehavior =\r\n  | 'initialRoute'\r\n  | 'firstRoute'\r\n  | 'history'\r\n  | 'order'\r\n  | 'none';\r\n\r\nexport type TabRouterOptions = DefaultRouterOptions & {\r\n  backBehavior?: BackBehavior;\r\n};\r\n\r\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\r\n  NavigationState<ParamList>,\r\n  'history'\r\n> & {\r\n  /**\r\n   * Type of the router, in this case, it's tab.\r\n   */\r\n  type: 'tab';\r\n  /**\r\n   * List of previously visited route keys.\r\n   */\r\n  history: { type: 'route'; key: string }[];\r\n};\r\n\r\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\r\n  /**\r\n   * Jump to an existing tab.\r\n   *\r\n   * @param name Name of the route for the tab.\r\n   * @param [params] Params object for the route.\r\n   */\r\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\r\n      : [RouteName, ParamList[RouteName]]\r\n  ): void;\r\n};\r\n\r\nconst TYPE_ROUTE = 'route' as const;\r\n\r\nexport const TabActions = {\r\n  jumpTo(name: string, params?: object): TabActionType {\r\n    return { type: 'JUMP_TO', payload: { name, params } };\r\n  },\r\n};\r\n\r\nconst getRouteHistory = (\r\n  routes: Route<string>[],\r\n  index: number,\r\n  backBehavior: BackBehavior,\r\n  initialRouteName: string | undefined\r\n) => {\r\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\r\n  let initialRouteIndex;\r\n\r\n  switch (backBehavior) {\r\n    case 'order':\r\n      for (let i = index; i > 0; i--) {\r\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\r\n      }\r\n      break;\r\n    case 'firstRoute':\r\n      if (index !== 0) {\r\n        history.unshift({\r\n          type: TYPE_ROUTE,\r\n          key: routes[0].key,\r\n        });\r\n      }\r\n      break;\r\n    case 'initialRoute':\r\n      initialRouteIndex = routes.findIndex(\r\n        (route) => route.name === initialRouteName\r\n      );\r\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\r\n\r\n      if (index !== initialRouteIndex) {\r\n        history.unshift({\r\n          type: TYPE_ROUTE,\r\n          key: routes[initialRouteIndex].key,\r\n        });\r\n      }\r\n      break;\r\n    case 'history':\r\n      // The history will fill up on navigation\r\n      break;\r\n  }\r\n\r\n  return history;\r\n};\r\n\r\nconst changeIndex = (\r\n  state: TabNavigationState<ParamListBase>,\r\n  index: number,\r\n  backBehavior: BackBehavior,\r\n  initialRouteName: string | undefined\r\n) => {\r\n  let history;\r\n\r\n  if (backBehavior === 'history') {\r\n    const currentKey = state.routes[index].key;\r\n\r\n    history = state.history\r\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\r\n      .concat({ type: TYPE_ROUTE, key: currentKey });\r\n  } else {\r\n    history = getRouteHistory(\r\n      state.routes,\r\n      index,\r\n      backBehavior,\r\n      initialRouteName\r\n    );\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    index,\r\n    history,\r\n  };\r\n};\r\n\r\nexport default function TabRouter({\r\n  initialRouteName,\r\n  backBehavior = 'history',\r\n}: TabRouterOptions) {\r\n  const router: Router<\r\n    TabNavigationState<ParamListBase>,\r\n    TabActionType | CommonNavigationAction\r\n  > = {\r\n    ...BaseRouter,\r\n\r\n    type: 'tab',\r\n\r\n    getInitialState({ routeNames, routeParamList }) {\r\n      const index =\r\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\r\n          ? routeNames.indexOf(initialRouteName)\r\n          : 0;\r\n\r\n      const routes = routeNames.map((name) => ({\r\n        name,\r\n        key: `${name}-${nanoid()}`,\r\n        params: routeParamList[name],\r\n      }));\r\n\r\n      const history = getRouteHistory(\r\n        routes,\r\n        index,\r\n        backBehavior,\r\n        initialRouteName\r\n      );\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'tab',\r\n        key: `tab-${nanoid()}`,\r\n        index,\r\n        routeNames,\r\n        history,\r\n        routes,\r\n      };\r\n    },\r\n\r\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\r\n      let state = partialState;\r\n\r\n      if (state.stale === false) {\r\n        return state;\r\n      }\r\n\r\n      const routes = routeNames.map((name) => {\r\n        const route = (state as PartialState<\r\n          TabNavigationState<ParamListBase>\r\n        >).routes.find((r) => r.name === name);\r\n\r\n        return {\r\n          ...route,\r\n          name,\r\n          key:\r\n            route && route.name === name && route.key\r\n              ? route.key\r\n              : `${name}-${nanoid()}`,\r\n          params:\r\n            routeParamList[name] !== undefined\r\n              ? {\r\n                  ...routeParamList[name],\r\n                  ...(route ? route.params : undefined),\r\n                }\r\n              : route\r\n              ? route.params\r\n              : undefined,\r\n        } as Route<string>;\r\n      });\r\n\r\n      const index = Math.min(\r\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\r\n        routes.length - 1\r\n      );\r\n\r\n      const history =\r\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\r\n        [];\r\n\r\n      return changeIndex(\r\n        {\r\n          stale: false,\r\n          type: 'tab',\r\n          key: `tab-${nanoid()}`,\r\n          index,\r\n          routeNames,\r\n          history,\r\n          routes,\r\n        },\r\n        index,\r\n        backBehavior,\r\n        initialRouteName\r\n      );\r\n    },\r\n\r\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\r\n      const routes = routeNames.map(\r\n        (name) =>\r\n          state.routes.find((r) => r.name === name) || {\r\n            name,\r\n            key: `${name}-${nanoid()}`,\r\n            params: routeParamList[name],\r\n          }\r\n      );\r\n\r\n      const index = Math.max(\r\n        0,\r\n        routeNames.indexOf(state.routes[state.index].name)\r\n      );\r\n\r\n      let history = state.history.filter(\r\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\r\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\r\n      );\r\n\r\n      if (!history.length) {\r\n        history = getRouteHistory(\r\n          routes,\r\n          index,\r\n          backBehavior,\r\n          initialRouteName\r\n        );\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        history,\r\n        routeNames,\r\n        routes,\r\n        index,\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const index = state.routes.findIndex((r) => r.key === key);\r\n\r\n      if (index === -1 || index === state.index) {\r\n        return state;\r\n      }\r\n\r\n      return changeIndex(state, index, backBehavior, initialRouteName);\r\n    },\r\n\r\n    getStateForAction(state, action, { routeParamList }) {\r\n      switch (action.type) {\r\n        case 'JUMP_TO':\r\n        case 'NAVIGATE': {\r\n          let index = -1;\r\n\r\n          if (action.type === 'NAVIGATE' && action.payload.key) {\r\n            index = state.routes.findIndex(\r\n              (route) => route.key === action.payload.key\r\n            );\r\n          } else {\r\n            index = state.routes.findIndex(\r\n              (route) => route.name === action.payload.name\r\n            );\r\n          }\r\n\r\n          if (index === -1) {\r\n            return null;\r\n          }\r\n\r\n          return changeIndex(\r\n            {\r\n              ...state,\r\n              routes:\r\n                action.payload.params !== undefined\r\n                  ? state.routes.map((route, i) => {\r\n                      if (i !== index) {\r\n                        return route;\r\n                      }\r\n\r\n                      let params;\r\n\r\n                      if (\r\n                        action.type === 'NAVIGATE' &&\r\n                        action.payload.merge === false\r\n                      ) {\r\n                        params =\r\n                          routeParamList[route.name] !== undefined\r\n                            ? {\r\n                                ...routeParamList[route.name],\r\n                                ...action.payload.params,\r\n                              }\r\n                            : action.payload.params;\r\n                      } else {\r\n                        params = action.payload.params\r\n                          ? {\r\n                              ...route.params,\r\n                              ...action.payload.params,\r\n                            }\r\n                          : route.params;\r\n                      }\r\n\r\n                      return params !== route.params\r\n                        ? { ...route, params }\r\n                        : route;\r\n                    })\r\n                  : state.routes,\r\n            },\r\n            index,\r\n            backBehavior,\r\n            initialRouteName\r\n          );\r\n        }\r\n\r\n        case 'GO_BACK': {\r\n          if (state.history.length === 1) {\r\n            return null;\r\n          }\r\n\r\n          const previousKey = state.history[state.history.length - 2].key;\r\n          const index = state.routes.findIndex(\r\n            (route) => route.key === previousKey\r\n          );\r\n\r\n          if (index === -1) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            history: state.history.slice(0, -1),\r\n            index,\r\n          };\r\n        }\r\n\r\n        default:\r\n          return BaseRouter.getStateForAction(state, action);\r\n      }\r\n    },\r\n\r\n    shouldActionChangeFocus(action) {\r\n      return action.type === 'NAVIGATE';\r\n    },\r\n\r\n    actionCreators: TabActions,\r\n  };\r\n\r\n  return router;\r\n}\r\n"]}