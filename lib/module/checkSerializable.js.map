{"version":3,"sources":["checkSerializable.tsx"],"names":["checkSerializableWithoutCircularReference","o","seen","location","undefined","serializable","Object","prototype","toString","call","Array","isArray","reason","String","has","add","i","length","childResult","Set","key","checkSerializable"],"mappings":"AAAA,MAAMA,yCAAyC,GAAG,CAChDC,CADgD,EAEhDC,IAFgD,EAGhDC,QAHgD,KAUzC;AACP,MACEF,CAAC,KAAKG,SAAN,IACAH,CAAC,KAAK,IADN,IAEA,OAAOA,CAAP,KAAa,SAFb,IAGA,OAAOA,CAAP,KAAa,QAHb,IAIA,OAAOA,CAAP,KAAa,QALf,EAME;AACA,WAAO;AAAEI,MAAAA,YAAY,EAAE;AAAhB,KAAP;AACD;;AAED,MACEC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,CAA/B,MAAsC,iBAAtC,IACA,CAACS,KAAK,CAACC,OAAN,CAAcV,CAAd,CAFH,EAGE;AACA,WAAO;AACLI,MAAAA,YAAY,EAAE,KADT;AAELF,MAAAA,QAFK;AAGLS,MAAAA,MAAM,EAAE,OAAOX,CAAP,KAAa,UAAb,GAA0B,UAA1B,GAAuCY,MAAM,CAACZ,CAAD;AAHhD,KAAP;AAKD;;AAED,MAAIC,IAAI,CAACY,GAAL,CAASb,CAAT,CAAJ,EAAiB;AACf,WAAO;AACLI,MAAAA,YAAY,EAAE,KADT;AAELO,MAAAA,MAAM,EAAE,oBAFH;AAGLT,MAAAA;AAHK,KAAP;AAKD;;AAEDD,EAAAA,IAAI,CAACa,GAAL,CAASd,CAAT;;AAEA,MAAIS,KAAK,CAACC,OAAN,CAAcV,CAAd,CAAJ,EAAsB;AACpB,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,CAAC,CAACgB,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,YAAME,WAAW,GAAGlB,yCAAyC,CAC3DC,CAAC,CAACe,CAAD,CAD0D,EAE3D,IAAIG,GAAJ,CAAajB,IAAb,CAF2D,EAG3D,CAAC,GAAGC,QAAJ,EAAca,CAAd,CAH2D,CAA7D;;AAMA,UAAI,CAACE,WAAW,CAACb,YAAjB,EAA+B;AAC7B,eAAOa,WAAP;AACD;AACF;AACF,GAZD,MAYO;AACL,SAAK,MAAME,GAAX,IAAkBnB,CAAlB,EAAqB;AACnB,YAAMiB,WAAW,GAAGlB,yCAAyC,CAC3DC,CAAC,CAACmB,GAAD,CAD0D,EAE3D,IAAID,GAAJ,CAAajB,IAAb,CAF2D,EAG3D,CAAC,GAAGC,QAAJ,EAAciB,GAAd,CAH2D,CAA7D;;AAMA,UAAI,CAACF,WAAW,CAACb,YAAjB,EAA+B;AAC7B,eAAOa,WAAP;AACD;AACF;AACF;;AAED,SAAO;AAAEb,IAAAA,YAAY,EAAE;AAAhB,GAAP;AACD,CArED;;AAuEA,eAAe,SAASgB,iBAAT,CAA2BpB,CAA3B,EAAsD;AACnE,SAAOD,yCAAyC,CAACC,CAAD,EAAI,IAAIkB,GAAJ,EAAJ,EAAoB,EAApB,CAAhD;AACD","sourcesContent":["const checkSerializableWithoutCircularReference = (\r\n  o: { [key: string]: any },\r\n  seen: Set<any>,\r\n  location: (string | number)[]\r\n):\r\n  | { serializable: true }\r\n  | {\r\n      serializable: false;\r\n      location: (string | number)[];\r\n      reason: string;\r\n    } => {\r\n  if (\r\n    o === undefined ||\r\n    o === null ||\r\n    typeof o === 'boolean' ||\r\n    typeof o === 'number' ||\r\n    typeof o === 'string'\r\n  ) {\r\n    return { serializable: true };\r\n  }\r\n\r\n  if (\r\n    Object.prototype.toString.call(o) !== '[object Object]' &&\r\n    !Array.isArray(o)\r\n  ) {\r\n    return {\r\n      serializable: false,\r\n      location,\r\n      reason: typeof o === 'function' ? 'Function' : String(o),\r\n    };\r\n  }\r\n\r\n  if (seen.has(o)) {\r\n    return {\r\n      serializable: false,\r\n      reason: 'Circular reference',\r\n      location,\r\n    };\r\n  }\r\n\r\n  seen.add(o);\r\n\r\n  if (Array.isArray(o)) {\r\n    for (let i = 0; i < o.length; i++) {\r\n      const childResult = checkSerializableWithoutCircularReference(\r\n        o[i],\r\n        new Set<any>(seen),\r\n        [...location, i]\r\n      );\r\n\r\n      if (!childResult.serializable) {\r\n        return childResult;\r\n      }\r\n    }\r\n  } else {\r\n    for (const key in o) {\r\n      const childResult = checkSerializableWithoutCircularReference(\r\n        o[key],\r\n        new Set<any>(seen),\r\n        [...location, key]\r\n      );\r\n\r\n      if (!childResult.serializable) {\r\n        return childResult;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { serializable: true };\r\n};\r\n\r\nexport default function checkSerializable(o: { [key: string]: any }) {\r\n  return checkSerializableWithoutCircularReference(o, new Set<any>(), []);\r\n}\r\n"]}