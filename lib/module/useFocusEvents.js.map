{"version":3,"sources":["useFocusEvents.tsx"],"names":["React","NavigationContext","useFocusEvents","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;;AASA;AACA;AACA;AACA,eAAe,SAASC,cAAT,CAAuD;AACpEC,EAAAA,KADoE;AAEpEC,EAAAA;AAFoE,CAAvD,EAGI;AACjB,QAAMC,UAAU,GAAGL,KAAK,CAACM,UAAN,CAAiBL,iBAAjB,CAAnB;AACA,QAAMM,iBAAiB,GAAGP,KAAK,CAACQ,MAAN,EAA1B;AAEA,QAAMC,iBAAiB,GAAGN,KAAK,CAACO,MAAN,CAAaP,KAAK,CAACQ,KAAnB,EAA0BC,GAApD,CAJiB,CAMjB;AACA;;AACAZ,EAAAA,KAAK,CAACa,SAAN,CACE,MACER,UADF,aACEA,UADF,uBACEA,UAAU,CAAES,WAAZ,CAAwB,OAAxB,EAAiC,MAAM;AACrCP,IAAAA,iBAAiB,CAACQ,OAAlB,GAA4BN,iBAA5B;AACAL,IAAAA,OAAO,CAACY,IAAR,CAAa;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAET;AAAzB,KAAb;AACD,GAHD,CAFJ,EAME,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANF;AASAL,EAAAA,KAAK,CAACa,SAAN,CACE,MACER,UADF,aACEA,UADF,uBACEA,UAAU,CAAES,WAAZ,CAAwB,MAAxB,EAAgC,MAAM;AACpCP,IAAAA,iBAAiB,CAACQ,OAAlB,GAA4BI,SAA5B;AACAf,IAAAA,OAAO,CAACY,IAAR,CAAa;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAET;AAAxB,KAAb;AACD,GAHD,CAFJ,EAME,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANF;AASAL,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,UAAMO,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;AAEAR,IAAAA,iBAAiB,CAACQ,OAAlB,GAA4BN,iBAA5B,CAHoB,CAKpB;AACA;;AACA,QAAIW,cAAc,KAAKD,SAAnB,IAAgC,CAACd,UAArC,EAAiD;AAC/CD,MAAAA,OAAO,CAACY,IAAR,CAAa;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAET;AAAzB,OAAb;AACD,KATmB,CAWpB;AACA;;;AACA,QACEW,cAAc,KAAKX,iBAAnB,IACA,EAAEJ,UAAU,GAAGA,UAAU,CAACgB,SAAX,EAAH,GAA4B,IAAxC,CAFF,EAGE;AACA;AACD;;AAED,QAAID,cAAc,KAAKD,SAAvB,EAAkC;AAChC;AACA;AACD;;AAEDf,IAAAA,OAAO,CAACY,IAAR,CAAa;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAEE;AAAxB,KAAb;AACAhB,IAAAA,OAAO,CAACY,IAAR,CAAa;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAET;AAAzB,KAAb;AACD,GA3BD,EA2BG,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CA3BH;AA4BD","sourcesContent":["import * as React from 'react';\r\nimport type { NavigationState } from '@react-navigation/routers';\r\nimport NavigationContext from './NavigationContext';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\nimport type { EventMapCore } from './types';\r\n\r\ntype Options<State extends NavigationState> = {\r\n  state: State;\r\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\r\n};\r\n\r\n/**\r\n * Hook to take care of emitting `focus` and `blur` events.\r\n */\r\nexport default function useFocusEvents<State extends NavigationState>({\r\n  state,\r\n  emitter,\r\n}: Options<State>) {\r\n  const navigation = React.useContext(NavigationContext);\r\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\r\n\r\n  const currentFocusedKey = state.routes[state.index].key;\r\n\r\n  // When the parent screen changes its focus state, we also need to change child's focus\r\n  // Coz the child screen can't be focused if the parent screen is out of focus\r\n  React.useEffect(\r\n    () =>\r\n      navigation?.addListener('focus', () => {\r\n        lastFocusedKeyRef.current = currentFocusedKey;\r\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\r\n      }),\r\n    [currentFocusedKey, emitter, navigation]\r\n  );\r\n\r\n  React.useEffect(\r\n    () =>\r\n      navigation?.addListener('blur', () => {\r\n        lastFocusedKeyRef.current = undefined;\r\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\r\n      }),\r\n    [currentFocusedKey, emitter, navigation]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const lastFocusedKey = lastFocusedKeyRef.current;\r\n\r\n    lastFocusedKeyRef.current = currentFocusedKey;\r\n\r\n    // We wouldn't have `lastFocusedKey` on initial mount\r\n    // Fire focus event for the current route on mount if there's no parent navigator\r\n    if (lastFocusedKey === undefined && !navigation) {\r\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\r\n    }\r\n\r\n    // We should only emit events when the focused key changed and navigator is focused\r\n    // When navigator is not focused, screens inside shouldn't receive focused status either\r\n    if (\r\n      lastFocusedKey === currentFocusedKey ||\r\n      !(navigation ? navigation.isFocused() : true)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (lastFocusedKey === undefined) {\r\n      // Only fire events after initial mount\r\n      return;\r\n    }\r\n\r\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\r\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\r\n  }, [currentFocusedKey, emitter, navigation]);\r\n}\r\n"]}