{"version":3,"sources":["getActionFromState.tsx"],"names":["getActionFromState","state","options","normalizedConfig","createNormalizedConfigItem","routes","index","slice","length","undefined","key","name","initialRouteName","type","payload","route","current","config","screens","params","Object","assign","initial","screen","createNormalizedConfigs","entries","reduce","acc","k","v"],"mappings":"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","sourcesContent":["import type {\r\n  Route,\r\n  PartialRoute,\r\n  ParamListBase,\r\n  NavigationState,\r\n  PartialState,\r\n  CommonActions,\r\n} from '@react-navigation/routers';\r\nimport type { PathConfig, PathConfigMap, NavigatorScreenParams } from './types';\r\n\r\ntype ConfigItem = {\r\n  initialRouteName?: string;\r\n  screens?: Record<string, ConfigItem>;\r\n};\r\n\r\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\r\n\r\ntype NavigateAction<State extends NavigationState> = {\r\n  type: 'NAVIGATE';\r\n  payload: {\r\n    name: string;\r\n    params?: NavigatorScreenParams<State>;\r\n  };\r\n};\r\n\r\nexport default function getActionFromState(\r\n  state: PartialState<NavigationState>,\r\n  options?: Options\r\n): NavigateAction<NavigationState> | CommonActions.Action | undefined {\r\n  // Create a normalized configs object which will be easier to use\r\n  const normalizedConfig = options ? createNormalizedConfigItem(options) : {};\r\n\r\n  const routes =\r\n    state.index != null ? state.routes.slice(0, state.index + 1) : state.routes;\r\n\r\n  if (routes.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  if (\r\n    !(\r\n      (routes.length === 1 && routes[0].key === undefined) ||\r\n      (routes.length === 2 &&\r\n        routes[0].key === undefined &&\r\n        routes[0].name === normalizedConfig?.initialRouteName &&\r\n        routes[1].key === undefined)\r\n    )\r\n  ) {\r\n    return {\r\n      type: 'RESET',\r\n      payload: state,\r\n    };\r\n  }\r\n\r\n  const route = state.routes[state.index ?? state.routes.length - 1];\r\n\r\n  let current: PartialState<NavigationState> | undefined = route?.state;\r\n  let config: ConfigItem | undefined = normalizedConfig?.screens?.[route?.name];\r\n  let params = { ...route.params } as NavigatorScreenParams<\r\n    ParamListBase,\r\n    NavigationState\r\n  >;\r\n\r\n  let payload = route ? { name: route.name, params } : undefined;\r\n\r\n  while (current) {\r\n    if (current.routes.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const routes =\r\n      current.index != null\r\n        ? current.routes.slice(0, current.index + 1)\r\n        : current.routes;\r\n\r\n    const route: Route<string> | PartialRoute<Route<string>> =\r\n      routes[routes.length - 1];\r\n\r\n    // Explicitly set to override existing value when merging params\r\n    Object.assign(params, {\r\n      initial: undefined,\r\n      screen: undefined,\r\n      params: undefined,\r\n      state: undefined,\r\n    });\r\n\r\n    if (routes.length === 1 && routes[0].key === undefined) {\r\n      params.initial = true;\r\n      params.screen = route.name;\r\n    } else if (\r\n      routes.length === 2 &&\r\n      routes[0].key === undefined &&\r\n      routes[0].name === config?.initialRouteName &&\r\n      routes[1].key === undefined\r\n    ) {\r\n      params.initial = false;\r\n      params.screen = route.name;\r\n    } else {\r\n      params.state = current;\r\n      break;\r\n    }\r\n\r\n    if (route.state) {\r\n      params.params = { ...route.params };\r\n      params = params.params as NavigatorScreenParams<\r\n        ParamListBase,\r\n        NavigationState\r\n      >;\r\n    } else {\r\n      params.params = route.params;\r\n    }\r\n\r\n    current = route.state;\r\n    config = config?.screens?.[route.name];\r\n  }\r\n\r\n  if (!payload) {\r\n    return;\r\n  }\r\n\r\n  // Try to construct payload for a `NAVIGATE` action from the state\r\n  // This lets us preserve the navigation state and not lose it\r\n  return {\r\n    type: 'NAVIGATE',\r\n    payload,\r\n  };\r\n}\r\n\r\nconst createNormalizedConfigItem = (config: PathConfig | string) =>\r\n  typeof config === 'object' && config != null\r\n    ? {\r\n        initialRouteName: config.initialRouteName,\r\n        screens:\r\n          config.screens != null\r\n            ? createNormalizedConfigs(config.screens)\r\n            : undefined,\r\n      }\r\n    : {};\r\n\r\nconst createNormalizedConfigs = (options: PathConfigMap) =>\r\n  Object.entries(options).reduce<Record<string, ConfigItem>>((acc, [k, v]) => {\r\n    acc[k] = createNormalizedConfigItem(v);\r\n    return acc;\r\n  }, {});\r\n"]}