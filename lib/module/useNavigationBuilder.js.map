{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["React","isValidElementType","CommonActions","NavigationStateContext","NavigationRouteContext","Screen","useEventEmitter","useRegisterNavigator","useDescriptors","useNavigationHelpers","useOnAction","useFocusEvents","useOnRouteFocus","useChildListeners","useFocusedListenersChildrenAdapter","useKeyedChildListeners","useOnGetState","useScheduleUpdate","useCurrentRender","isArrayEqual","PrivateValueStore","getRouteConfigsFromChildren","children","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","Error","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","options","navigatorKey","route","useContext","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","initialParamsFromParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setKey","getKey","getIsInitial","initializedState","isFirstStateInitialization","useMemo","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","reset","navigate","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","key","index","keys","filter","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","screenOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { isValidElementType } from 'react-is';\r\nimport {\r\n  CommonActions,\r\n  DefaultRouterOptions,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Router,\r\n  RouterFactory,\r\n  RouterConfigOptions,\r\n  PartialState,\r\n  NavigationAction,\r\n  Route,\r\n} from '@react-navigation/routers';\r\nimport NavigationStateContext from './NavigationStateContext';\r\nimport NavigationRouteContext from './NavigationRouteContext';\r\nimport Screen from './Screen';\r\nimport useEventEmitter from './useEventEmitter';\r\nimport useRegisterNavigator from './useRegisterNavigator';\r\nimport useDescriptors from './useDescriptors';\r\nimport useNavigationHelpers from './useNavigationHelpers';\r\nimport useOnAction from './useOnAction';\r\nimport useFocusEvents from './useFocusEvents';\r\nimport useOnRouteFocus from './useOnRouteFocus';\r\nimport useChildListeners from './useChildListeners';\r\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\r\nimport useKeyedChildListeners from './useKeyedChildListeners';\r\nimport useOnGetState from './useOnGetState';\r\nimport useScheduleUpdate from './useScheduleUpdate';\r\nimport useCurrentRender from './useCurrentRender';\r\nimport isArrayEqual from './isArrayEqual';\r\nimport {\r\n  DefaultNavigatorOptions,\r\n  RouteConfig,\r\n  PrivateValueStore,\r\n  EventMapBase,\r\n  EventMapCore,\r\n  NavigatorScreenParams,\r\n} from './types';\r\n\r\n// This is to make TypeScript compiler happy\r\n// eslint-disable-next-line babel/no-unused-expressions\r\nPrivateValueStore;\r\n\r\ntype NavigatorRoute<State extends NavigationState> = {\r\n  key: string;\r\n  params?: NavigatorScreenParams<ParamListBase, State>;\r\n};\r\n\r\n/**\r\n * Extract route config object from React children elements.\r\n *\r\n * @param children React Elements to extract the config from.\r\n */\r\nconst getRouteConfigsFromChildren = <\r\n  State extends NavigationState,\r\n  ScreenOptions extends {},\r\n  EventMap extends EventMapBase\r\n>(\r\n  children: React.ReactNode\r\n) => {\r\n  const configs = React.Children.toArray(children).reduce<\r\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>[]\r\n  >((acc, child) => {\r\n    if (React.isValidElement(child)) {\r\n      if (child.type === Screen) {\r\n        // We can only extract the config from `Screen` elements\r\n        // If something else was rendered, it's probably a bug\r\n        acc.push(\r\n          child.props as RouteConfig<\r\n            ParamListBase,\r\n            string,\r\n            State,\r\n            ScreenOptions,\r\n            EventMap\r\n          >\r\n        );\r\n        return acc;\r\n      }\r\n\r\n      if (child.type === React.Fragment) {\r\n        // When we encounter a fragment, we need to dive into its children to extract the configs\r\n        // This is handy to conditionally define a group of screens\r\n        acc.push(\r\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\r\n            child.props.children\r\n          )\r\n        );\r\n        return acc;\r\n      }\r\n    }\r\n\r\n    throw new Error(\r\n      `A navigator can only contain 'Screen' components as its direct children (found ${\r\n        React.isValidElement(child)\r\n          ? `'${\r\n              typeof child.type === 'string' ? child.type : child.type?.name\r\n            }'${\r\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\r\n            }`\r\n          : typeof child === 'object'\r\n          ? JSON.stringify(child)\r\n          : `'${String(child)}'`\r\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\r\n    );\r\n  }, []);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    configs.forEach((config) => {\r\n      const { name, children, component, getComponent } = config;\r\n\r\n      if (typeof name !== 'string' || !name) {\r\n        throw new Error(\r\n          `Got an invalid name (${JSON.stringify(\r\n            name\r\n          )}) for the screen. It must be a non-empty string.`\r\n        );\r\n      }\r\n\r\n      if (\r\n        children != null ||\r\n        component !== undefined ||\r\n        getComponent !== undefined\r\n      ) {\r\n        if (children != null && component !== undefined) {\r\n          throw new Error(\r\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\r\n          );\r\n        }\r\n\r\n        if (children != null && getComponent !== undefined) {\r\n          throw new Error(\r\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\r\n          );\r\n        }\r\n\r\n        if (component !== undefined && getComponent !== undefined) {\r\n          throw new Error(\r\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\r\n          );\r\n        }\r\n\r\n        if (children != null && typeof children !== 'function') {\r\n          throw new Error(\r\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\r\n          );\r\n        }\r\n\r\n        if (component !== undefined && !isValidElementType(component)) {\r\n          throw new Error(\r\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\r\n          );\r\n        }\r\n\r\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\r\n          throw new Error(\r\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\r\n          );\r\n        }\r\n\r\n        if (typeof component === 'function' && component.name === 'component') {\r\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\r\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\r\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\r\n          console.warn(\r\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\r\n          );\r\n        }\r\n      } else {\r\n        throw new Error(\r\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return configs;\r\n};\r\n\r\n/**\r\n * Hook for building navigators.\r\n *\r\n * @param createRouter Factory method which returns router object.\r\n * @param options Options object containing `children` and additional options for the router.\r\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\r\n */\r\nexport default function useNavigationBuilder<\r\n  State extends NavigationState,\r\n  RouterOptions extends DefaultRouterOptions,\r\n  ActionHelpers extends Record<string, () => void>,\r\n  ScreenOptions extends {},\r\n  EventMap extends Record<string, any>\r\n>(\r\n  createRouter: RouterFactory<State, any, RouterOptions>,\r\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\r\n) {\r\n  const navigatorKey = useRegisterNavigator();\r\n\r\n  const route = React.useContext(NavigationRouteContext) as\r\n    | NavigatorRoute<State>\r\n    | undefined;\r\n\r\n  const { children, ...rest } = options;\r\n  const { current: router } = React.useRef<Router<State, any>>(\r\n    createRouter({\r\n      ...((rest as unknown) as RouterOptions),\r\n      ...(route?.params &&\r\n      route.params.state == null &&\r\n      route.params.initial !== false &&\r\n      typeof route.params.screen === 'string'\r\n        ? { initialRouteName: route.params.screen }\r\n        : null),\r\n    })\r\n  );\r\n\r\n  const routeConfigs = getRouteConfigsFromChildren<\r\n    State,\r\n    ScreenOptions,\r\n    EventMap\r\n  >(children);\r\n\r\n  const screens = routeConfigs.reduce<\r\n    Record<\r\n      string,\r\n      RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\r\n    >\r\n  >((acc, config) => {\r\n    if (config.name in acc) {\r\n      throw new Error(\r\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.name}')`\r\n      );\r\n    }\r\n\r\n    acc[config.name] = config;\r\n    return acc;\r\n  }, {});\r\n\r\n  const routeNames = routeConfigs.map((config) => config.name);\r\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\r\n    (acc, curr) => {\r\n      const { initialParams } = screens[curr];\r\n      const initialParamsFromParams =\r\n        route?.params?.state == null &&\r\n        route?.params?.initial !== false &&\r\n        route?.params?.screen === curr\r\n          ? route.params.params\r\n          : undefined;\r\n\r\n      acc[curr] =\r\n        initialParams !== undefined || initialParamsFromParams !== undefined\r\n          ? {\r\n              ...initialParams,\r\n              ...initialParamsFromParams,\r\n            }\r\n          : undefined;\r\n\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n  const routeGetIdList = routeNames.reduce<\r\n    RouterConfigOptions['routeGetIdList']\r\n  >(\r\n    (acc, curr) =>\r\n      Object.assign(acc, {\r\n        [curr]: screens[curr].getId,\r\n      }),\r\n    {}\r\n  );\r\n\r\n  if (!routeNames.length) {\r\n    throw new Error(\r\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\r\n    );\r\n  }\r\n\r\n  const isStateValid = React.useCallback(\r\n    (state) => state.type === undefined || state.type === router.type,\r\n    [router.type]\r\n  );\r\n\r\n  const isStateInitialized = React.useCallback(\r\n    (state) =>\r\n      state !== undefined && state.stale === false && isStateValid(state),\r\n    [isStateValid]\r\n  );\r\n\r\n  const {\r\n    state: currentState,\r\n    getState: getCurrentState,\r\n    setState,\r\n    setKey,\r\n    getKey,\r\n    getIsInitial,\r\n  } = React.useContext(NavigationStateContext);\r\n\r\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\r\n    // If the current state isn't initialized on first render, we initialize it\r\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\r\n    // Otherwise assume that the state was provided as initial state\r\n    // So we need to rehydrate it to make it usable\r\n    if (\r\n      (currentState === undefined || !isStateValid(currentState)) &&\r\n      route?.params?.state == null\r\n    ) {\r\n      return [\r\n        router.getInitialState({\r\n          routeNames,\r\n          routeParamList,\r\n          routeGetIdList,\r\n        }),\r\n        true,\r\n      ];\r\n    } else {\r\n      return [\r\n        router.getRehydratedState(\r\n          route?.params?.state ?? (currentState as PartialState<State>),\r\n          {\r\n            routeNames,\r\n            routeParamList,\r\n            routeGetIdList,\r\n          }\r\n        ),\r\n        false,\r\n      ];\r\n    }\r\n    // We explicitly don't include routeNames/routeParamList in the dep list\r\n    // below. We want to avoid forcing a new state to be calculated in cases\r\n    // where routeConfigs change without affecting routeNames/routeParamList.\r\n    // Instead, we handle changes to these in the nextState code below. Note\r\n    // that some changes to routeConfigs are explicitly ignored, such as changes\r\n    // to initialParams\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentState, router, isStateValid]);\r\n\r\n  let state =\r\n    // If the state isn't initialized, or stale, use the state we initialized instead\r\n    // The state won't update until there's a change needed in the state we have initalized locally\r\n    // So it'll be `undefined` or stale until the first navigation event happens\r\n    isStateInitialized(currentState)\r\n      ? (currentState as State)\r\n      : (initializedState as State);\r\n\r\n  let nextState: State = state;\r\n\r\n  if (!isArrayEqual(state.routeNames, routeNames)) {\r\n    // When the list of route names change, the router should handle it to remove invalid routes\r\n    nextState = router.getStateForRouteNamesChange(state, {\r\n      routeNames,\r\n      routeParamList,\r\n      routeGetIdList,\r\n    });\r\n  }\r\n\r\n  const previousNestedParamsRef = React.useRef(route?.params);\r\n\r\n  React.useEffect(() => {\r\n    previousNestedParamsRef.current = route?.params;\r\n  }, [route?.params]);\r\n\r\n  if (route?.params) {\r\n    const previousParams = previousNestedParamsRef.current;\r\n\r\n    let action: CommonActions.Action | undefined;\r\n\r\n    if (\r\n      typeof route.params.state === 'object' &&\r\n      route.params.state != null &&\r\n      route.params.state !== previousParams?.state\r\n    ) {\r\n      // If the route was updated with new state, we should reset to it\r\n      action = CommonActions.reset(route.params.state);\r\n    } else if (\r\n      typeof route.params.screen === 'string' &&\r\n      ((route.params.initial === false && isFirstStateInitialization) ||\r\n        route.params !== previousParams)\r\n    ) {\r\n      // FIXME: Since params are merged, `route.params.params` might contain params from an older route\r\n      // If the route was updated with new screen name and/or params, we should navigate there\r\n      action = CommonActions.navigate(route.params.screen, route.params.params);\r\n    }\r\n\r\n    // The update should be limited to current navigator only, so we call the router manually\r\n    const updatedState = action\r\n      ? router.getStateForAction(nextState, action, {\r\n          routeNames,\r\n          routeParamList,\r\n          routeGetIdList,\r\n        })\r\n      : null;\r\n\r\n    nextState =\r\n      updatedState !== null\r\n        ? router.getRehydratedState(updatedState, {\r\n            routeNames,\r\n            routeParamList,\r\n            routeGetIdList,\r\n          })\r\n        : nextState;\r\n  }\r\n\r\n  const shouldUpdate = state !== nextState;\r\n\r\n  useScheduleUpdate(() => {\r\n    if (shouldUpdate) {\r\n      // If the state needs to be updated, we'll schedule an update\r\n      setState(nextState);\r\n    }\r\n  });\r\n\r\n  // The up-to-date state will come in next render, but we don't need to wait for it\r\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\r\n  // So we override the state object we return to use the latest state as soon as possible\r\n  state = nextState;\r\n\r\n  React.useEffect(() => {\r\n    setKey(navigatorKey);\r\n\r\n    if (!getIsInitial()) {\r\n      // If it's not initial render, we need to update the state\r\n      // This will make sure that our container gets notifier of state changes due to new mounts\r\n      // This is necessary for proper screen tracking, URL updates etc.\r\n      setState(nextState);\r\n    }\r\n\r\n    return () => {\r\n      // We need to clean up state for this navigator on unmount\r\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\r\n      // For example, if another navigator has started rendering, we should skip cleanup\r\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\r\n      setTimeout(() => {\r\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\r\n          setState(undefined);\r\n        }\r\n      }, 0);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // We initialize this ref here to avoid a new getState getting initialized\r\n  // whenever initializedState changes. We want getState to have access to the\r\n  // latest initializedState, but don't need it to change when that happens\r\n  const initializedStateRef = React.useRef<State>();\r\n  initializedStateRef.current = initializedState;\r\n\r\n  const getState = React.useCallback((): State => {\r\n    const currentState = getCurrentState();\r\n\r\n    return isStateInitialized(currentState)\r\n      ? (currentState as State)\r\n      : (initializedStateRef.current as State);\r\n  }, [getCurrentState, isStateInitialized]);\r\n\r\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\r\n    let routeNames = [];\r\n\r\n    let route: Route<string> | undefined;\r\n\r\n    if (e.target) {\r\n      route = state.routes.find((route) => route.key === e.target);\r\n\r\n      if (route?.name) {\r\n        routeNames.push(route.name);\r\n      }\r\n    } else {\r\n      route = state.routes[state.index];\r\n      routeNames.push(\r\n        ...Object.keys(screens).filter((name) => route?.name === name)\r\n      );\r\n    }\r\n\r\n    if (route == null) {\r\n      return;\r\n    }\r\n\r\n    const navigation = descriptors[route.key].navigation;\r\n\r\n    const listeners = ([] as (((e: any) => void) | undefined)[])\r\n      .concat(\r\n        ...routeNames.map((name) => {\r\n          const { listeners } = screens[name];\r\n          const map =\r\n            typeof listeners === 'function'\r\n              ? listeners({ route: route as any, navigation })\r\n              : listeners;\r\n\r\n          return map\r\n            ? Object.keys(map)\r\n                .filter((type) => type === e.type)\r\n                .map((type) => map?.[type])\r\n            : undefined;\r\n        })\r\n      )\r\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\r\n\r\n    listeners.forEach((listener) => listener?.(e));\r\n  });\r\n\r\n  useFocusEvents({ state, emitter });\r\n\r\n  React.useEffect(() => {\r\n    emitter.emit({ type: 'state', data: { state } });\r\n  }, [emitter, state]);\r\n\r\n  const { listeners: childListeners, addListener } = useChildListeners();\r\n\r\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\r\n\r\n  const onAction = useOnAction({\r\n    router,\r\n    getState,\r\n    setState,\r\n    key: route?.key,\r\n    actionListeners: childListeners.action,\r\n    beforeRemoveListeners: keyedListeners.beforeRemove,\r\n    routerConfigOptions: {\r\n      routeNames,\r\n      routeParamList,\r\n      routeGetIdList,\r\n    },\r\n    emitter,\r\n  });\r\n\r\n  const onRouteFocus = useOnRouteFocus({\r\n    router,\r\n    key: route?.key,\r\n    getState,\r\n    setState,\r\n  });\r\n\r\n  const navigation = useNavigationHelpers<\r\n    State,\r\n    ActionHelpers,\r\n    NavigationAction,\r\n    EventMap\r\n  >({\r\n    onAction,\r\n    getState,\r\n    emitter,\r\n    router,\r\n  });\r\n\r\n  useFocusedListenersChildrenAdapter({\r\n    navigation,\r\n    focusedListeners: childListeners.focus,\r\n  });\r\n\r\n  useOnGetState({\r\n    getState,\r\n    getStateListeners: keyedListeners.getState,\r\n  });\r\n\r\n  const descriptors = useDescriptors<State, ScreenOptions, EventMap>({\r\n    state,\r\n    screens,\r\n    navigation,\r\n    screenOptions: options.screenOptions,\r\n    onAction,\r\n    getState,\r\n    setState,\r\n    onRouteFocus,\r\n    addListener,\r\n    addKeyedListener,\r\n    router,\r\n    emitter,\r\n  });\r\n\r\n  useCurrentRender({\r\n    state,\r\n    navigation,\r\n    descriptors,\r\n  });\r\n\r\n  return {\r\n    state,\r\n    navigation,\r\n    descriptors,\r\n  };\r\n}\r\n"]}