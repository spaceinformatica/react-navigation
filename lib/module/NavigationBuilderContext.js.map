{"version":3,"sources":["NavigationBuilderContext.tsx"],"names":["React","NavigationBuilderContext","createContext","onDispatchAction","undefined","onOptionsChange"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AA8CA;AACA;AACA;AACA,MAAMC,wBAAwB,gBAAGD,KAAK,CAACE,aAAN,CAU9B;AACDC,EAAAA,gBAAgB,EAAE,MAAMC,SADvB;AAEDC,EAAAA,eAAe,EAAE,MAAMD;AAFtB,CAV8B,CAAjC;AAeA,eAAeH,wBAAf","sourcesContent":["import * as React from 'react';\r\nimport type {\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n} from '@react-navigation/routers';\r\nimport type { NavigationHelpers } from './types';\r\n\r\nexport type ListenerMap = {\r\n  action: ChildActionListener;\r\n  focus: FocusedNavigationListener;\r\n};\r\n\r\nexport type KeyedListenerMap = {\r\n  getState: GetStateListener;\r\n  beforeRemove: ChildBeforeRemoveListener;\r\n};\r\n\r\nexport type AddListener = <T extends keyof ListenerMap>(\r\n  type: T,\r\n  listener: ListenerMap[T]\r\n) => void;\r\n\r\nexport type AddKeyedListener = <T extends keyof KeyedListenerMap>(\r\n  type: T,\r\n  key: string,\r\n  listener: KeyedListenerMap[T]\r\n) => void;\r\n\r\nexport type ChildActionListener = (\r\n  action: NavigationAction,\r\n  visitedNavigators?: Set<string>\r\n) => boolean;\r\n\r\nexport type FocusedNavigationCallback<T> = (\r\n  navigation: NavigationHelpers<ParamListBase>\r\n) => T;\r\n\r\nexport type FocusedNavigationListener = <T>(\r\n  callback: FocusedNavigationCallback<T>\r\n) => { handled: boolean; result: T };\r\n\r\nexport type GetStateListener = () => NavigationState;\r\n\r\nexport type ChildBeforeRemoveListener = (action: NavigationAction) => boolean;\r\n\r\n/**\r\n * Context which holds the required helpers needed to build nested navigators.\r\n */\r\nconst NavigationBuilderContext = React.createContext<{\r\n  onAction?: (\r\n    action: NavigationAction,\r\n    visitedNavigators?: Set<string>\r\n  ) => boolean;\r\n  addListener?: AddListener;\r\n  addKeyedListener?: AddKeyedListener;\r\n  onRouteFocus?: (key: string) => void;\r\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\r\n  onOptionsChange: (options: object) => void;\r\n}>({\r\n  onDispatchAction: () => undefined,\r\n  onOptionsChange: () => undefined,\r\n});\r\n\r\nexport default NavigationBuilderContext;\r\n"]}