{"version":3,"sources":["Link.tsx"],"names":["React","Text","Platform","useLinkProps","Link","to","action","rest","props","onPress","e","createElement","select","web","onClick","default"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAiDC,QAAjD,QAAiE,cAAjE;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,MAAN;AAAc,KAAGC;AAAjB,CAAd,EAA8C;AAC3D,QAAMC,KAAK,GAAGL,YAAY,CAAC;AAAEE,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,CAA1B;;AAEA,QAAMG,OAAO,GACXC,CADc,IAEX;AACH,QAAI,aAAaH,IAAjB,EAAuB;AAAA;;AACrB,uBAAAA,IAAI,CAACE,OAAL,qEAAAF,IAAI,EAAWG,CAAX,CAAJ;AACD;;AAEDF,IAAAA,KAAK,CAACC,OAAN,CAAcC,CAAd;AACD,GARD;;AAUA,sBAAOV,KAAK,CAACW,aAAN,CAAoBV,IAApB,EAA0B,EAC/B,GAAGO,KAD4B;AAE/B,OAAGD,IAF4B;AAG/B,OAAGL,QAAQ,CAACU,MAAT,CAAgB;AACjBC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,OAAO,EAAEL;AAAX,OADY;AAEjBM,MAAAA,OAAO,EAAE;AAAEN,QAAAA;AAAF;AAFQ,KAAhB;AAH4B,GAA1B,CAAP;AAQD","sourcesContent":["import * as React from 'react';\r\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\r\nimport type { NavigationAction } from '@react-navigation/core';\r\nimport useLinkProps from './useLinkProps';\r\n\r\ntype Props = {\r\n  to: string;\r\n  action?: NavigationAction;\r\n  target?: string;\r\n  onPress?: (\r\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\r\n  ) => void;\r\n} & (TextProps & { children: React.ReactNode });\r\n\r\n/**\r\n * Component to render link to another screen using a path.\r\n * Uses an anchor tag on the web.\r\n *\r\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\r\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\r\n * @param props.children Child elements to render the content.\r\n */\r\nexport default function Link({ to, action, ...rest }: Props) {\r\n  const props = useLinkProps({ to, action });\r\n\r\n  const onPress = (\r\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\r\n  ) => {\r\n    if ('onPress' in rest) {\r\n      rest.onPress?.(e);\r\n    }\r\n\r\n    props.onPress(e);\r\n  };\r\n\r\n  return React.createElement(Text, {\r\n    ...props,\r\n    ...rest,\r\n    ...Platform.select({\r\n      web: { onClick: onPress } as any,\r\n      default: { onPress },\r\n    }),\r\n  });\r\n}\r\n"]}