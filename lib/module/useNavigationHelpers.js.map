{"version":3,"sources":["useNavigationHelpers.tsx"],"names":["React","CommonActions","NavigationContext","UnhandledActionContext","PrivateValueStore","useNavigationHelpers","onAction","getState","emitter","router","onUnhandledAction","useContext","parentNavigationHelpers","useMemo","dispatch","op","action","handled","actions","actionCreators","helpers","Object","keys","reduce","acc","name","args","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList","routeGetIdList","dangerouslyGetParent","dangerouslyGetState"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAMO,2BANP;AAOA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,SAA4CC,iBAA5C,QAAqE,SAArE,C,CAEA;AACA;;AACAA,iBAAiB;;AAYjB;AACA;AACA;AACA;AACA,eAAe,SAASC,oBAAT,CAKb;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA,OAAtB;AAA+BC,EAAAA;AAA/B,CALa,EAKoD;AACjE,QAAMC,iBAAiB,GAAGV,KAAK,CAACW,UAAN,CAAiBR,sBAAjB,CAA1B;AACA,QAAMS,uBAAuB,GAAGZ,KAAK,CAACW,UAAN,CAAiBT,iBAAjB,CAAhC;AAEA,SAAOF,KAAK,CAACa,OAAN,CAAc,MAAM;AACzB,UAAMC,QAAQ,GAAIC,EAAD,IAA6C;AAC5D,YAAMC,MAAM,GAAG,OAAOD,EAAP,KAAc,UAAd,GAA2BA,EAAE,CAACR,QAAQ,EAAT,CAA7B,GAA4CQ,EAA3D;AAEA,YAAME,OAAO,GAAGX,QAAQ,CAACU,MAAD,CAAxB;;AAEA,UAAI,CAACC,OAAL,EAAc;AACZP,QAAAA,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,YAAAA,iBAAiB,CAAGM,MAAH,CAAjB;AACD;AACF,KARD;;AAUA,UAAME,OAAO,GAAG,EACd,GAAGT,MAAM,CAACU,cADI;AAEd,SAAGlB;AAFW,KAAhB;AAKA,UAAMmB,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,CACd,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb;AACAD,MAAAA,GAAG,CAACC,IAAD,CAAH,GAAY,CAAC,GAAGC,IAAJ,KAAkBZ,QAAQ,CAACI,OAAO,CAACO,IAAD,CAAP,CAAc,GAAGC,IAAjB,CAAD,CAAtC;;AACA,aAAOF,GAAP;AACD,KALa,EAMd,EANc,CAAhB;AASA,WAAO,EACL,GAAGZ,uBADE;AAEL,SAAGQ,OAFE;AAGLN,MAAAA,QAHK;AAILa,MAAAA,IAAI,EAAEnB,OAAO,CAACmB,IAJT;AAKLC,MAAAA,SAAS,EAAEhB,uBAAuB,GAC9BA,uBAAuB,CAACgB,SADM,GAE9B,MAAM,IAPL;AAQLC,MAAAA,SAAS,EAAE,MAAM;AACf,cAAMC,KAAK,GAAGvB,QAAQ,EAAtB;AAEA,eACEE,MAAM,CAACsB,iBAAP,CAAyBD,KAAzB,EAAgC7B,aAAa,CAAC+B,MAAd,EAAhC,EAAkE;AAChEC,UAAAA,UAAU,EAAEH,KAAK,CAACG,UAD8C;AAEhEC,UAAAA,cAAc,EAAE,EAFgD;AAGhEC,UAAAA,cAAc,EAAE;AAHgD,SAAlE,MAIO,IAJP,KAKAvB,uBALA,aAKAA,uBALA,uBAKAA,uBAAuB,CAAEiB,SAAzB,EALA,KAMA,KAPF;AASD,OApBI;AAqBLO,MAAAA,oBAAoB,EAAE,MAAMxB,uBArBvB;AAsBLyB,MAAAA,mBAAmB,EAAE9B;AAtBhB,KAAP;AA0BD,GAnDM,EAmDJ,CACDC,OAAO,CAACmB,IADP,EAEDpB,QAFC,EAGDD,QAHC,EAIDI,iBAJC,EAKDE,uBALC,EAMDH,MANC,CAnDI,CAAP;AA2DD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  CommonActions,\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport NavigationContext from './NavigationContext';\r\nimport UnhandledActionContext from './UnhandledActionContext';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\r\n\r\n// This is to make TypeScript compiler happy\r\n// eslint-disable-next-line babel/no-unused-expressions\r\nPrivateValueStore;\r\n\r\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\r\n  onAction: (\r\n    action: NavigationAction,\r\n    visitedNavigators?: Set<string>\r\n  ) => boolean;\r\n  getState: () => State;\r\n  emitter: NavigationEventEmitter<any>;\r\n  router: Router<State, Action>;\r\n};\r\n\r\n/**\r\n * Navigation object with helper methods to be used by a navigator.\r\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\r\n */\r\nexport default function useNavigationHelpers<\r\n  State extends NavigationState,\r\n  ActionHelpers extends Record<string, () => void>,\r\n  Action extends NavigationAction,\r\n  EventMap extends Record<string, any>\r\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\r\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\r\n  const parentNavigationHelpers = React.useContext(NavigationContext);\r\n\r\n  return React.useMemo(() => {\r\n    const dispatch = (op: Action | ((state: State) => Action)) => {\r\n      const action = typeof op === 'function' ? op(getState()) : op;\r\n\r\n      const handled = onAction(action);\r\n\r\n      if (!handled) {\r\n        onUnhandledAction?.(action);\r\n      }\r\n    };\r\n\r\n    const actions = {\r\n      ...router.actionCreators,\r\n      ...CommonActions,\r\n    };\r\n\r\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\r\n      (acc, name) => {\r\n        // @ts-expect-error: name is a valid key, but TypeScript is dumb\r\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    return {\r\n      ...parentNavigationHelpers,\r\n      ...helpers,\r\n      dispatch,\r\n      emit: emitter.emit,\r\n      isFocused: parentNavigationHelpers\r\n        ? parentNavigationHelpers.isFocused\r\n        : () => true,\r\n      canGoBack: () => {\r\n        const state = getState();\r\n\r\n        return (\r\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\r\n            routeNames: state.routeNames,\r\n            routeParamList: {},\r\n            routeGetIdList: {},\r\n          }) !== null ||\r\n          parentNavigationHelpers?.canGoBack() ||\r\n          false\r\n        );\r\n      },\r\n      dangerouslyGetParent: () => parentNavigationHelpers as any,\r\n      dangerouslyGetState: getState,\r\n    } as NavigationHelpers<ParamListBase, EventMap> &\r\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined) &\r\n      ActionHelpers;\r\n  }, [\r\n    emitter.emit,\r\n    getState,\r\n    onAction,\r\n    onUnhandledAction,\r\n    parentNavigationHelpers,\r\n    router,\r\n  ]);\r\n}\r\n"]}