{"version":3,"sources":["HeaderContainer.tsx"],"names":["React","Animated","View","StyleSheet","NavigationContext","NavigationRouteContext","Header","forSlideLeft","forSlideUp","forNoAnimation","forSlideRight","PreviousSceneContext","HeaderContainer","mode","scenes","layout","insets","getPreviousScene","getFocusedRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","parentPreviousScene","useContext","slice","map","scene","i","self","length","header","headerShown","headerTransparent","descriptor","options","isFocused","key","route","previous","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","navigation","e","height","nativeEvent","undefined","styles","zIndex","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\r\nimport {\r\n  NavigationContext,\r\n  NavigationRouteContext,\r\n  Route,\r\n  ParamListBase,\r\n} from '@react-navigation/native';\r\nimport type { EdgeInsets } from 'react-native-safe-area-context';\r\n\r\nimport Header from './Header';\r\nimport {\r\n  forSlideLeft,\r\n  forSlideUp,\r\n  forNoAnimation,\r\n  forSlideRight,\r\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\r\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\r\nimport type {\r\n  Layout,\r\n  Scene,\r\n  StackHeaderStyleInterpolator,\r\n  StackNavigationProp,\r\n  GestureDirection,\r\n} from '../../types';\r\n\r\nexport type Props = {\r\n  mode: 'float' | 'screen';\r\n  layout: Layout;\r\n  insets: EdgeInsets;\r\n  scenes: (Scene<Route<string>> | undefined)[];\r\n  getPreviousScene: (props: {\r\n    route: Route<string>;\r\n  }) => Scene<Route<string>> | undefined;\r\n  getFocusedRoute: () => Route<string>;\r\n  onContentHeightChange?: (props: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => void;\r\n  styleInterpolator: StackHeaderStyleInterpolator;\r\n  gestureDirection: GestureDirection;\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\nexport default function HeaderContainer({\r\n  mode,\r\n  scenes,\r\n  layout,\r\n  insets,\r\n  getPreviousScene,\r\n  getFocusedRoute,\r\n  onContentHeightChange,\r\n  gestureDirection,\r\n  styleInterpolator,\r\n  style,\r\n}: Props) {\r\n  const focusedRoute = getFocusedRoute();\r\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\r\n\r\n  return (\r\n    <Animated.View pointerEvents=\"box-none\" style={style}>\r\n      {scenes.slice(-3).map((scene, i, self) => {\r\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\r\n          return null;\r\n        }\r\n\r\n        const { header, headerShown = true, headerTransparent } =\r\n          scene.descriptor.options || {};\r\n\r\n        if (!headerShown) {\r\n          return null;\r\n        }\r\n\r\n        const isFocused = focusedRoute.key === scene.route.key;\r\n        const previous =\r\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\r\n\r\n        // If the screen is next to a headerless screen, we need to make the header appear static\r\n        // This makes the header look like it's moving with the screen\r\n        const previousScene = self[i - 1];\r\n        const nextScene = self[i + 1];\r\n\r\n        const { headerShown: previousHeaderShown = true } =\r\n          previousScene?.descriptor.options || {};\r\n\r\n        const { headerShown: nextHeaderShown = true } =\r\n          nextScene?.descriptor.options || {};\r\n\r\n        const isHeaderStatic =\r\n          (previousHeaderShown === false &&\r\n            // We still need to animate when coming back from next scene\r\n            // A hacky way to check this is if the next scene exists\r\n            !nextScene) ||\r\n          nextHeaderShown === false;\r\n\r\n        const props = {\r\n          mode,\r\n          layout,\r\n          insets,\r\n          scene,\r\n          previous,\r\n          navigation: scene.descriptor.navigation as StackNavigationProp<\r\n            ParamListBase\r\n          >,\r\n          styleInterpolator:\r\n            mode === 'float'\r\n              ? isHeaderStatic\r\n                ? gestureDirection === 'vertical' ||\r\n                  gestureDirection === 'vertical-inverted'\r\n                  ? forSlideUp\r\n                  : gestureDirection === 'horizontal-inverted'\r\n                  ? forSlideRight\r\n                  : forSlideLeft\r\n                : styleInterpolator\r\n              : forNoAnimation,\r\n        };\r\n\r\n        return (\r\n          <NavigationContext.Provider\r\n            key={scene.route.key}\r\n            value={scene.descriptor.navigation}\r\n          >\r\n            <NavigationRouteContext.Provider value={scene.route}>\r\n              <View\r\n                onLayout={\r\n                  onContentHeightChange\r\n                    ? (e) => {\r\n                        const { height } = e.nativeEvent.layout;\r\n\r\n                        onContentHeightChange({\r\n                          route: scene.route,\r\n                          height,\r\n                        });\r\n                      }\r\n                    : undefined\r\n                }\r\n                pointerEvents={isFocused ? 'box-none' : 'none'}\r\n                accessibilityElementsHidden={!isFocused}\r\n                importantForAccessibility={\r\n                  isFocused ? 'auto' : 'no-hide-descendants'\r\n                }\r\n                style={\r\n                  // Avoid positioning the focused header absolutely\r\n                  // Otherwise accessibility tools don't seem to be able to find it\r\n                  { ...(((mode === 'float' && !isFocused) || headerTransparent ? styles.header: null) || {}), zIndex: 10 }\r\n                }\r\n              >\r\n                {header !== undefined ? header(props) : <Header {...props} />}\r\n              </View>\r\n            </NavigationRouteContext.Provider>\r\n          </NavigationContext.Provider>\r\n        );\r\n      })}\r\n    </Animated.View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n});\r\n"]}