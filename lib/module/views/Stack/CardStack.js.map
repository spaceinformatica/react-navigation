{"version":3,"sources":["CardStack.tsx"],"names":["React","Animated","StyleSheet","Dimensions","Platform","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","OS","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  StyleSheet,\r\n  LayoutChangeEvent,\r\n  Dimensions,\r\n  Platform,\r\n} from 'react-native';\r\nimport type { EdgeInsets } from 'react-native-safe-area-context';\r\nimport type {\r\n  ParamListBase,\r\n  Route,\r\n  StackNavigationState,\r\n} from '@react-navigation/native';\r\n\r\nimport {\r\n  MaybeScreenContainer,\r\n  MaybeScreen,\r\n  shouldUseActivityState,\r\n} from '../Screens';\r\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\r\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\r\nimport CardContainer from './CardContainer';\r\nimport {\r\n  DefaultTransition,\r\n  ModalTransition,\r\n} from '../../TransitionConfigs/TransitionPresets';\r\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\r\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\r\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\r\nimport type {\r\n  Layout,\r\n  StackHeaderMode,\r\n  StackCardMode,\r\n  Scene,\r\n  StackDescriptorMap,\r\n  StackNavigationOptions,\r\n  StackDescriptor,\r\n} from '../../types';\r\n\r\ntype GestureValues = {\r\n  [key: string]: Animated.Value;\r\n};\r\n\r\ntype Props = {\r\n  mode: StackCardMode;\r\n  insets: EdgeInsets;\r\n  state: StackNavigationState<ParamListBase>;\r\n  descriptors: StackDescriptorMap;\r\n  routes: Route<string>[];\r\n  openingRouteKeys: string[];\r\n  closingRouteKeys: string[];\r\n  onOpenRoute: (props: { route: Route<string> }) => void;\r\n  onCloseRoute: (props: { route: Route<string> }) => void;\r\n  getPreviousRoute: (props: {\r\n    route: Route<string>;\r\n  }) => Route<string> | undefined;\r\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\r\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\r\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\r\n  headerMode: StackHeaderMode;\r\n  isParentHeaderShown: boolean;\r\n  onTransitionStart: (\r\n    props: { route: Route<string> },\r\n    closing: boolean\r\n  ) => void;\r\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\r\n  onPageChangeStart?: () => void;\r\n  onPageChangeConfirm?: (force: boolean) => void;\r\n  onPageChangeCancel?: () => void;\r\n  onGestureStart?: (props: { route: Route<string> }) => void;\r\n  onGestureEnd?: (props: { route: Route<string> }) => void;\r\n  onGestureCancel?: (props: { route: Route<string> }) => void;\r\n  detachInactiveScreens?: boolean;\r\n};\r\n\r\ntype State = {\r\n  routes: Route<string>[];\r\n  descriptors: StackDescriptorMap;\r\n  scenes: Scene<Route<string>>[];\r\n  gestures: GestureValues;\r\n  layout: Layout;\r\n  headerHeights: Record<string, number>;\r\n};\r\n\r\nconst EPSILON = 0.01;\r\n\r\nconst STATE_INACTIVE = 0;\r\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\r\nconst STATE_ON_TOP = 2;\r\n\r\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\r\n\r\nconst getHeaderHeights = (\r\n  routes: Route<string>[],\r\n  insets: EdgeInsets,\r\n  isParentHeaderShown: boolean,\r\n  descriptors: StackDescriptorMap,\r\n  layout: Layout,\r\n  previous: Record<string, number>\r\n) => {\r\n  return routes.reduce<Record<string, number>>((acc, curr) => {\r\n    const { options = {} } = descriptors[curr.key] || {};\r\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\r\n\r\n    const height =\r\n      typeof style.height === 'number' ? style.height : previous[curr.key];\r\n\r\n    const safeAreaInsets = {\r\n      ...insets,\r\n      ...options.safeAreaInsets,\r\n    };\r\n\r\n    const {\r\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\r\n    } = options;\r\n\r\n    acc[curr.key] =\r\n      typeof height === 'number'\r\n        ? height\r\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst getDistanceFromOptions = (\r\n  mode: StackCardMode,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const {\r\n    gestureDirection = mode === 'modal'\r\n      ? ModalTransition.gestureDirection\r\n      : DefaultTransition.gestureDirection,\r\n  } = descriptor?.options || {};\r\n\r\n  return getDistanceForDirection(layout, gestureDirection);\r\n};\r\n\r\nconst getProgressFromGesture = (\r\n  mode: StackCardMode,\r\n  gesture: Animated.Value,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const distance = getDistanceFromOptions(\r\n    mode,\r\n    {\r\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\r\n      // This causes blank screen on web if it was previously inside container with display: none\r\n      width: Math.max(1, layout.width),\r\n      height: Math.max(1, layout.height),\r\n    },\r\n    descriptor\r\n  );\r\n\r\n  if (distance > 0) {\r\n    return gesture.interpolate({\r\n      inputRange: [0, distance],\r\n      outputRange: [1, 0],\r\n    });\r\n  }\r\n\r\n  return gesture.interpolate({\r\n    inputRange: [distance, 0],\r\n    outputRange: [0, 1],\r\n  });\r\n};\r\n\r\nexport default class CardStack extends React.Component<Props, State> {\r\n  static getDerivedStateFromProps(props: Props, state: State) {\r\n    if (\r\n      props.routes === state.routes &&\r\n      props.descriptors === state.descriptors\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\r\n      const descriptor = props.descriptors[curr.key];\r\n      const { animationEnabled } = descriptor?.options || {};\r\n\r\n      acc[curr.key] =\r\n        state.gestures[curr.key] ||\r\n        new Animated.Value(\r\n          props.openingRouteKeys.includes(curr.key) &&\r\n          animationEnabled !== false\r\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\r\n            : 0\r\n        );\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      routes: props.routes,\r\n      scenes: props.routes.map((route, index, self) => {\r\n        const previousRoute = self[index - 1];\r\n        const nextRoute = self[index + 1];\r\n\r\n        const oldScene = state.scenes[index];\r\n\r\n        const currentGesture = gestures[route.key];\r\n        const previousGesture = previousRoute\r\n          ? gestures[previousRoute.key]\r\n          : undefined;\r\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\r\n\r\n        const descriptor =\r\n          props.descriptors[route.key] ||\r\n          state.descriptors[route.key] ||\r\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\r\n\r\n        const nextDescriptor =\r\n          props.descriptors[nextRoute?.key] ||\r\n          state.descriptors[nextRoute?.key];\r\n\r\n        const previousDescriptor =\r\n          props.descriptors[previousRoute?.key] ||\r\n          state.descriptors[previousRoute?.key];\r\n\r\n        const scene = {\r\n          route,\r\n          descriptor,\r\n          progress: {\r\n            current: getProgressFromGesture(\r\n              props.mode,\r\n              currentGesture,\r\n              state.layout,\r\n              descriptor\r\n            ),\r\n            next: nextGesture\r\n              ? getProgressFromGesture(\r\n                  props.mode,\r\n                  nextGesture,\r\n                  state.layout,\r\n                  nextDescriptor\r\n                )\r\n              : undefined,\r\n            previous: previousGesture\r\n              ? getProgressFromGesture(\r\n                  props.mode,\r\n                  previousGesture,\r\n                  state.layout,\r\n                  previousDescriptor\r\n                )\r\n              : undefined,\r\n          },\r\n          __memo: [\r\n            route,\r\n            state.layout,\r\n            descriptor,\r\n            nextDescriptor,\r\n            previousDescriptor,\r\n            currentGesture,\r\n            nextGesture,\r\n            previousGesture,\r\n          ],\r\n        };\r\n\r\n        if (\r\n          oldScene &&\r\n          scene.__memo.every((it, i) => {\r\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\r\n            return oldScene.__memo[i] === it;\r\n          })\r\n        ) {\r\n          return oldScene;\r\n        }\r\n\r\n        return scene;\r\n      }),\r\n      gestures,\r\n      descriptors: props.descriptors,\r\n      headerHeights: getHeaderHeights(\r\n        props.routes,\r\n        props.insets,\r\n        props.isParentHeaderShown,\r\n        state.descriptors,\r\n        state.layout,\r\n        state.headerHeights\r\n      ),\r\n    };\r\n  }\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    const { height = 0, width = 0 } = Dimensions.get('window');\r\n\r\n    this.state = {\r\n      routes: [],\r\n      scenes: [],\r\n      gestures: {},\r\n      layout: { height, width },\r\n      descriptors: this.props.descriptors,\r\n      // Used when card's header is null and mode is float to make transition\r\n      // between screens with headers and those without headers smooth.\r\n      // This is not a great heuristic here. We don't know synchronously\r\n      // on mount what the header height is so we have just used the most\r\n      // common cases here.\r\n      headerHeights: {},\r\n    };\r\n  }\r\n\r\n  private handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    const layout = { width, height };\r\n\r\n    this.setState((state, props) => {\r\n      if (height === state.layout.height && width === state.layout.width) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        layout,\r\n        headerHeights: getHeaderHeights(\r\n          props.routes,\r\n          props.insets,\r\n          props.isParentHeaderShown,\r\n          state.descriptors,\r\n          layout,\r\n          state.headerHeights\r\n        ),\r\n      };\r\n    });\r\n  };\r\n\r\n  private handleHeaderLayout = ({\r\n    route,\r\n    height,\r\n  }: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => {\r\n    this.setState(({ headerHeights }) => {\r\n      const previousHeight = headerHeights[route.key];\r\n\r\n      if (previousHeight === height) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        headerHeights: {\r\n          ...headerHeights,\r\n          [route.key]: height,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  private getFocusedRoute = () => {\r\n    const { state } = this.props;\r\n\r\n    return state.routes[state.index];\r\n  };\r\n\r\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\r\n    const { getPreviousRoute } = this.props;\r\n    const { scenes } = this.state;\r\n\r\n    const previousRoute = getPreviousRoute({ route });\r\n\r\n    if (previousRoute) {\r\n      const previousScene = scenes.find(\r\n        (scene) => scene.route.key === previousRoute.key\r\n      );\r\n\r\n      return previousScene;\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      insets,\r\n      descriptors,\r\n      state,\r\n      routes,\r\n      closingRouteKeys,\r\n      onOpenRoute,\r\n      onCloseRoute,\r\n      getGesturesEnabled,\r\n      renderHeader,\r\n      renderScene,\r\n      headerMode,\r\n      isParentHeaderShown,\r\n      onTransitionStart,\r\n      onTransitionEnd,\r\n      onPageChangeStart,\r\n      onPageChangeConfirm,\r\n      onPageChangeCancel,\r\n      onGestureStart,\r\n      onGestureEnd,\r\n      onGestureCancel,\r\n      // Enable on new versions of `react-native-screens`\r\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\r\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\r\n    } = this.props;\r\n\r\n    const { scenes, layout, gestures, headerHeights } = this.state;\r\n\r\n    const focusedRoute = state.routes[state.index];\r\n    const focusedDescriptor = descriptors[focusedRoute.key];\r\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\r\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\r\n\r\n    let defaultTransitionPreset =\r\n      mode === 'modal' ? ModalTransition : DefaultTransition;\r\n\r\n    if (headerMode === 'screen') {\r\n      defaultTransitionPreset = {\r\n        ...defaultTransitionPreset,\r\n        headerStyleInterpolator: forNoAnimationHeader,\r\n      };\r\n    }\r\n\r\n    const {\r\n      top = insets.top,\r\n      right = insets.right,\r\n      bottom = insets.bottom,\r\n      left = insets.left,\r\n    } = focusedOptions.safeAreaInsets || {};\r\n\r\n    let activeScreensLimit = 1;\r\n\r\n    for (let i = scenes.length - 1; i >= 0; i--) {\r\n      const {\r\n        // By default, we don't want to detach the previous screen of the active one for modals\r\n        detachPreviousScreen = mode === 'modal'\r\n          ? i !== scenes.length - 1\r\n          : true,\r\n      } = scenes[i].descriptor.options;\r\n\r\n      if (detachPreviousScreen === false) {\r\n        activeScreensLimit++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const isFloatHeaderAbsolute =\r\n      headerMode === 'float'\r\n        ? this.state.scenes.slice(-2).some((scene) => {\r\n            const { descriptor } = scene;\r\n            const options = descriptor ? descriptor.options : {};\r\n            const { headerTransparent, headerShown = true } = options;\r\n\r\n            if (headerTransparent || headerShown === false) {\r\n              return true;\r\n            }\r\n\r\n            return false;\r\n          })\r\n        : false;\r\n\r\n    const floatingHeader =\r\n      headerMode === 'float' ? (\r\n        <React.Fragment key=\"header\">\r\n          {renderHeader({\r\n            mode: 'float',\r\n            layout,\r\n            insets: { top, right, bottom, left },\r\n            scenes,\r\n            getPreviousScene: this.getPreviousScene,\r\n            getFocusedRoute: this.getFocusedRoute,\r\n            onContentHeightChange: this.handleHeaderLayout,\r\n            gestureDirection:\r\n              focusedOptions.gestureDirection !== undefined\r\n                ? focusedOptions.gestureDirection\r\n                : defaultTransitionPreset.gestureDirection,\r\n            styleInterpolator:\r\n              focusedOptions.headerStyleInterpolator !== undefined\r\n                ? focusedOptions.headerStyleInterpolator\r\n                : defaultTransitionPreset.headerStyleInterpolator,\r\n            style: [\r\n              styles.floating,\r\n              isFloatHeaderAbsolute && [\r\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\r\n                { height: focusedHeaderHeight },\r\n                styles.absolute,\r\n              ],\r\n            ],\r\n          })}\r\n        </React.Fragment>\r\n      ) : null;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {isFloatHeaderAbsolute ? null : floatingHeader}\r\n        <MaybeScreenContainer\r\n          enabled={detachInactiveScreens}\r\n          style={styles.container}\r\n          onLayout={this.handleLayout}\r\n        >\r\n          {routes.map((route, index, self) => {\r\n            const focused = focusedRoute.key === route.key;\r\n            const gesture = gestures[route.key];\r\n            const scene = scenes[index];\r\n\r\n            // For the screens that shouldn't be active, the value is 0\r\n            // For those that should be active, but are not the top screen, the value is 1\r\n            // For those on top of the stack and with interaction enabled, the value is 2\r\n            // For the old implementation, it stays the same it was\r\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\r\n\r\n            if (shouldUseActivityState) {\r\n              if (index < self.length - activeScreensLimit - 1) {\r\n                // screen should be inactive because it is too deep in the stack\r\n                isScreenActive = STATE_INACTIVE;\r\n              } else {\r\n                const sceneForActivity = scenes[self.length - 1];\r\n                const outputValue =\r\n                  index === self.length - 1\r\n                    ? STATE_ON_TOP // the screen is on top after the transition\r\n                    : index >= self.length - activeScreensLimit\r\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\r\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\r\n                isScreenActive = sceneForActivity\r\n                  ? sceneForActivity.progress.current.interpolate({\r\n                      inputRange: [0, 1 - EPSILON, 1],\r\n                      outputRange: [1, 1, outputValue],\r\n                      extrapolate: 'clamp',\r\n                    })\r\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\r\n              }\r\n            } else {\r\n              isScreenActive = scene.progress.next\r\n                ? scene.progress.next.interpolate({\r\n                    inputRange: [0, 1 - EPSILON, 1],\r\n                    outputRange: [1, 1, 0],\r\n                    extrapolate: 'clamp',\r\n                  })\r\n                : 1;\r\n            }\r\n\r\n            const {\r\n              safeAreaInsets,\r\n              headerShown = true,\r\n              headerTransparent,\r\n              cardShadowEnabled,\r\n              cardOverlayEnabled,\r\n              cardOverlay,\r\n              cardStyle,\r\n              animationEnabled,\r\n              gestureResponseDistance,\r\n              gestureVelocityImpact,\r\n              gestureDirection = defaultTransitionPreset.gestureDirection,\r\n              transitionSpec = defaultTransitionPreset.transitionSpec,\r\n              cardStyleInterpolator = animationEnabled === false\r\n                ? forNoAnimationCard\r\n                : defaultTransitionPreset.cardStyleInterpolator,\r\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n            } = scene.descriptor\r\n              ? scene.descriptor.options\r\n              : ({} as StackNavigationOptions);\r\n\r\n            let transitionConfig = {\r\n              gestureDirection,\r\n              transitionSpec,\r\n              cardStyleInterpolator,\r\n              headerStyleInterpolator,\r\n            };\r\n\r\n            // When a screen is not the last, it should use next screen's transition config\r\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\r\n            // For example combining a slide and a modal transition would look wrong otherwise\r\n            // With this approach, combining different transition styles in the same navigator mostly looks right\r\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\r\n            // but majority of the transitions look alright\r\n            if (index !== self.length - 1) {\r\n              const nextScene = scenes[index + 1];\r\n\r\n              if (nextScene) {\r\n                const {\r\n                  animationEnabled,\r\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\r\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\r\n                  cardStyleInterpolator = animationEnabled === false\r\n                    ? forNoAnimationCard\r\n                    : defaultTransitionPreset.cardStyleInterpolator,\r\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n                } = nextScene.descriptor\r\n                  ? nextScene.descriptor.options\r\n                  : ({} as StackNavigationOptions);\r\n\r\n                transitionConfig = {\r\n                  gestureDirection,\r\n                  transitionSpec,\r\n                  cardStyleInterpolator,\r\n                  headerStyleInterpolator,\r\n                };\r\n              }\r\n            }\r\n\r\n            const {\r\n              top: safeAreaInsetTop = insets.top,\r\n              right: safeAreaInsetRight = insets.right,\r\n              bottom: safeAreaInsetBottom = insets.bottom,\r\n              left: safeAreaInsetLeft = insets.left,\r\n            } = safeAreaInsets || {};\r\n\r\n            const headerHeight =\r\n              headerMode !== 'none' && headerShown !== false\r\n                ? headerHeights[route.key]\r\n                : 0;\r\n\r\n            return (\r\n              <MaybeScreen\r\n                key={route.key}\r\n                style={StyleSheet.absoluteFill}\r\n                enabled={detachInactiveScreens}\r\n                active={isScreenActive}\r\n                pointerEvents=\"box-none\"\r\n              >\r\n                <CardContainer\r\n                  index={index}\r\n                  active={index === self.length - 1}\r\n                  focused={focused}\r\n                  closing={closingRouteKeys.includes(route.key)}\r\n                  layout={layout}\r\n                  gesture={gesture}\r\n                  scene={scene}\r\n                  safeAreaInsetTop={safeAreaInsetTop}\r\n                  safeAreaInsetRight={safeAreaInsetRight}\r\n                  safeAreaInsetBottom={safeAreaInsetBottom}\r\n                  safeAreaInsetLeft={safeAreaInsetLeft}\r\n                  cardOverlay={cardOverlay}\r\n                  cardOverlayEnabled={cardOverlayEnabled}\r\n                  cardShadowEnabled={cardShadowEnabled}\r\n                  cardStyle={cardStyle}\r\n                  onPageChangeStart={onPageChangeStart}\r\n                  onPageChangeConfirm={onPageChangeConfirm}\r\n                  onPageChangeCancel={onPageChangeCancel}\r\n                  onGestureStart={onGestureStart}\r\n                  onGestureCancel={onGestureCancel}\r\n                  onGestureEnd={onGestureEnd}\r\n                  gestureResponseDistance={gestureResponseDistance}\r\n                  headerHeight={headerHeight}\r\n                  isParentHeaderShown={isParentHeaderShown}\r\n                  onHeaderHeightChange={this.handleHeaderLayout}\r\n                  getPreviousScene={this.getPreviousScene}\r\n                  getFocusedRoute={this.getFocusedRoute}\r\n                  mode={mode}\r\n                  headerMode={headerMode}\r\n                  headerShown={headerShown}\r\n                  hasAbsoluteHeader={\r\n                    isFloatHeaderAbsolute && !headerTransparent\r\n                  }\r\n                  renderHeader={renderHeader}\r\n                  renderScene={renderScene}\r\n                  onOpenRoute={onOpenRoute}\r\n                  onCloseRoute={onCloseRoute}\r\n                  onTransitionStart={onTransitionStart}\r\n                  onTransitionEnd={onTransitionEnd}\r\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\r\n                  gestureVelocityImpact={gestureVelocityImpact}\r\n                  {...transitionConfig}\r\n                />\r\n              </MaybeScreen>\r\n            );\r\n          })}\r\n        </MaybeScreenContainer>\r\n        {isFloatHeaderAbsolute ? floatingHeader : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  absolute: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  floating: {\r\n    zIndex: 1,\r\n  },\r\n});\r\n"]}