{"version":3,"sources":["Screens.tsx"],"names":["React","Animated","View","Platform","Screens","require","e","WebScreen","Component","render","active","style","rest","props","display","AnimatedWebScreen","createAnimatedComponent","shouldUseActivityState","MaybeScreenContainer","enabled","OS","screensEnabled","MaybeScreen"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,QAAzB,QAAoD,cAApD;AAEA,IAAIC,OAAJ;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CACV;AACD,C,CAED;AACA;AACA;;;AACA,MAAMC,SAAN,SAAwBP,KAAK,CAACQ,SAA9B,CAKE;AACAC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiB,SAAGC;AAApB,QAA6B,KAAKC,KAAxC;AAEA,wBACE,oBAAC,IAAD,CACE;AADF;AAEE,MAAA,MAAM,EAAE,CAACH,MAFX;AAGE,MAAA,KAAK,EAAE,CAACC,KAAD,EAAQ;AAAEG,QAAAA,OAAO,EAAEJ,MAAM,GAAG,MAAH,GAAY;AAA7B,OAAR;AAHT,OAIME,IAJN,EADF;AAQD;;AAZD;;AAeF,MAAMG,iBAAiB,GAAGd,QAAQ,CAACe,uBAAT,CAAiCT,SAAjC,CAA1B,C,CAEA;;AACA,OAAO,MAAMU,sBAAsB,eAAGb,OAAH,6CAAG,SAASa,sBAAxC;AAEP,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,OADmC;AAEnC,KAAGP;AAFgC,CAAD,KAM9B;AAAA;;AACJ,MAAIO,OAAO,IAAIhB,QAAQ,CAACiB,EAAT,KAAgB,KAA3B,iBAAoChB,OAApC,sCAAoC,UAASiB,cAAT,EAAxC,EAAmE;AACjE;AAAA;AACE;AACA,0BAAC,OAAD,CAAS,eAAT;AAAyB,QAAA,OAAO,EAAEF;AAAlC,SAA+CP,IAA/C;AAFF;AAID;;AAED,sBAAO,oBAAC,IAAD,EAAUA,IAAV,CAAP;AACD,CAfM;AAiBP,OAAO,MAAMU,WAAW,GAAG,CAAC;AAC1BH,EAAAA,OAD0B;AAE1BT,EAAAA,MAF0B;AAG1B,KAAGE;AAHuB,CAAD,KAQrB;AAAA;;AACJ,MAAIO,OAAO,IAAIhB,QAAQ,CAACiB,EAAT,KAAgB,KAA/B,EAAsC;AACpC,wBAAO,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEV;AAA3B,OAAuCE,IAAvC,EAAP;AACD;;AAED,MAAIO,OAAO,iBAAIf,OAAJ,sCAAI,UAASiB,cAAT,EAAf,EAA0C;AACxC,QAAIJ,sBAAJ,EAA4B;AAC1B;AAAA;AACE;AACA,4BAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,OAAO,EAAEE,OAAzB;AAAkC,UAAA,aAAa,EAAET;AAAjD,WAA6DE,IAA7D;AAFF;AAID,KALD,MAKO;AACL;AAAA;AACE;AACA,4BAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,OAAO,EAAEO,OAAzB;AAAkC,UAAA,MAAM,EAAET;AAA1C,WAAsDE,IAAtD;AAFF;AAID;AACF;;AAED,sBAAO,oBAAC,IAAD,EAAUA,IAAV,CAAP;AACD,CA5BM","sourcesContent":["import * as React from 'react';\r\nimport { Animated, View, Platform, ViewProps } from 'react-native';\r\n\r\nlet Screens: typeof import('react-native-screens') | undefined;\r\n\r\ntry {\r\n  Screens = require('react-native-screens');\r\n} catch (e) {\r\n  // Ignore\r\n}\r\n\r\n// The web implementation in react-native-screens seems buggy.\r\n// The view doesn't become visible after coming back in some cases.\r\n// So we use our custom implementation.\r\nclass WebScreen extends React.Component<\r\n  ViewProps & {\r\n    active: number;\r\n    children: React.ReactNode;\r\n  }\r\n> {\r\n  render() {\r\n    const { active, style, ...rest } = this.props;\r\n\r\n    return (\r\n      <View\r\n        // @ts-expect-error: hidden exists on web, but not in React Native\r\n        hidden={!active}\r\n        style={[style, { display: active ? 'flex' : 'none' }]}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\r\n\r\n// @ts-ignore\r\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\r\n\r\nexport const MaybeScreenContainer = ({\r\n  enabled,\r\n  ...rest\r\n}: ViewProps & {\r\n  enabled: boolean;\r\n  children: React.ReactNode;\r\n}) => {\r\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\r\n    return (\r\n      // @ts-ignore\r\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\r\n    );\r\n  }\r\n\r\n  return <View {...rest} />;\r\n};\r\n\r\nexport const MaybeScreen = ({\r\n  enabled,\r\n  active,\r\n  ...rest\r\n}: ViewProps & {\r\n  enabled: boolean;\r\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\r\n  children: React.ReactNode;\r\n}) => {\r\n  if (enabled && Platform.OS === 'web') {\r\n    return <AnimatedWebScreen active={active} {...rest} />;\r\n  }\r\n\r\n  if (enabled && Screens?.screensEnabled()) {\r\n    if (shouldUseActivityState) {\r\n      return (\r\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\r\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\r\n      );\r\n    } else {\r\n      return (\r\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\r\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\r\n      );\r\n    }\r\n  }\r\n\r\n  return <View {...rest} />;\r\n};\r\n"]}