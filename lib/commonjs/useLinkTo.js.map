{"version":3,"sources":["useLinkTo.tsx"],"names":["useLinkTo","navigation","React","useContext","NavigationContext","linking","LinkingContext","linkTo","useCallback","path","startsWith","Error","undefined","options","state","getStateFromPath","config","root","current","dangerouslyGetParent","action","dispatch","reset"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;;;AAEe,SAASA,SAAT,GAAqB;AAClC,QAAMC,UAAU,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAnB;AACA,QAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBG,uBAAjB,CAAhB;AAEA,QAAMC,MAAM,GAAGL,KAAK,CAACM,WAAN,CACZC,IAAD,IAAkB;AAChB,QAAI,CAACA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAL,EAA2B;AACzB,YAAM,IAAIC,KAAJ,yCAA2CF,IAA3C,QAAN;AACD;;AAED,QAAIR,UAAU,KAAKW,SAAnB,EAA8B;AAC5B,YAAM,IAAID,KAAJ,CACJ,sFADI,CAAN;AAGD;;AAED,UAAM;AAAEE,MAAAA;AAAF,QAAcR,OAApB;AAEA,UAAMS,KAAK,GAAGD,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEE,gBAAT,GACVF,OAAO,CAACE,gBAAR,CAAyBN,IAAzB,EAA+BI,OAAO,CAACG,MAAvC,CADU,GAEV,4BAAiBP,IAAjB,EAAuBI,OAAvB,aAAuBA,OAAvB,uBAAuBA,OAAO,CAAEG,MAAhC,CAFJ;;AAIA,QAAIF,KAAJ,EAAW;AACT,UAAIG,IAAI,GAAGhB,UAAX;AACA,UAAIiB,OAAJ,CAFS,CAIT;;AACA,aAAQA,OAAO,GAAGD,IAAI,CAACE,oBAAL,EAAlB,EAAgD;AAC9CF,QAAAA,IAAI,GAAGC,OAAP;AACD;;AAED,YAAME,MAAM,GAAG,8BAAmBN,KAAnB,EAA0BD,OAA1B,aAA0BA,OAA1B,uBAA0BA,OAAO,CAAEG,MAAnC,CAAf;;AAEA,UAAII,MAAM,KAAKR,SAAf,EAA0B;AACxBK,QAAAA,IAAI,CAACI,QAAL,CAAcD,MAAd;AACD,OAFD,MAEO;AACLH,QAAAA,IAAI,CAACK,KAAL,CAAWR,KAAX;AACD;AACF,KAhBD,MAgBO;AACL,YAAM,IAAIH,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF,GArCY,EAsCb,CAACN,OAAD,EAAUJ,UAAV,CAtCa,CAAf;AAyCA,SAAOM,MAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  getStateFromPath,\r\n  getActionFromState,\r\n  NavigationContext,\r\n} from '@react-navigation/core';\r\nimport LinkingContext from './LinkingContext';\r\n\r\nexport default function useLinkTo() {\r\n  const navigation = React.useContext(NavigationContext);\r\n  const linking = React.useContext(LinkingContext);\r\n\r\n  const linkTo = React.useCallback(\r\n    (path: string) => {\r\n      if (!path.startsWith('/')) {\r\n        throw new Error(`The path must start with '/' (${path}).`);\r\n      }\r\n\r\n      if (navigation === undefined) {\r\n        throw new Error(\r\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\r\n        );\r\n      }\r\n\r\n      const { options } = linking;\r\n\r\n      const state = options?.getStateFromPath\r\n        ? options.getStateFromPath(path, options.config)\r\n        : getStateFromPath(path, options?.config);\r\n\r\n      if (state) {\r\n        let root = navigation;\r\n        let current;\r\n\r\n        // Traverse up to get the root navigation\r\n        while ((current = root.dangerouslyGetParent())) {\r\n          root = current;\r\n        }\r\n\r\n        const action = getActionFromState(state, options?.config);\r\n\r\n        if (action !== undefined) {\r\n          root.dispatch(action);\r\n        } else {\r\n          root.reset(state);\r\n        }\r\n      } else {\r\n        throw new Error('Failed to parse the path to a navigation state.');\r\n      }\r\n    },\r\n    [linking, navigation]\r\n  );\r\n\r\n  return linkTo;\r\n}\r\n"]}