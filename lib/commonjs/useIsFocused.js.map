{"version":3,"sources":["useIsFocused.tsx"],"names":["useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","React","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAEA;AACA;AACA;AACA;AACe,SAASA,YAAT,GAAiC;AAC9C,QAAMC,UAAU,GAAG,6BAAnB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,oBAASF,UAAU,CAACC,SAApB,CAAlC;AAEA,QAAME,aAAa,GAAGH,UAAU,CAACC,SAAX,EAAtB;;AAEA,MAAIA,SAAS,KAAKE,aAAlB,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACAD,IAAAA,YAAY,CAACC,aAAD,CAAZ;AACD;;AAEDC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,UAAMC,gBAAgB,GAAGN,UAAU,CAACO,WAAX,CAAuB,OAAvB,EAAgC,MACvDL,YAAY,CAAC,IAAD,CADW,CAAzB;AAIA,UAAMM,eAAe,GAAGR,UAAU,CAACO,WAAX,CAAuB,MAAvB,EAA+B,MACrDL,YAAY,CAAC,KAAD,CADU,CAAxB;AAIA,WAAO,MAAM;AACXI,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAHD;AAID,GAbD,EAaG,CAACR,UAAD,CAbH;AAeAI,EAAAA,KAAK,CAACK,aAAN,CAAoBN,aAApB;AAEA,SAAOA,aAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport useNavigation from './useNavigation';\r\n\r\n/**\r\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\r\n * This can be used if a component needs to render something based on the focus state.\r\n */\r\nexport default function useIsFocused(): boolean {\r\n  const navigation = useNavigation();\r\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\r\n\r\n  const valueToReturn = navigation.isFocused();\r\n\r\n  if (isFocused !== valueToReturn) {\r\n    // If the value has changed since the last render, we need to update it.\r\n    // This could happen if we missed an update from the event listeners during re-render.\r\n    // React will process this update immediately, so the old subscription value won't be committed.\r\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\r\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\r\n    setIsFocused(valueToReturn);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const unsubscribeFocus = navigation.addListener('focus', () =>\r\n      setIsFocused(true)\r\n    );\r\n\r\n    const unsubscribeBlur = navigation.addListener('blur', () =>\r\n      setIsFocused(false)\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeFocus();\r\n      unsubscribeBlur();\r\n    };\r\n  }, [navigation]);\r\n\r\n  React.useDebugValue(valueToReturn);\r\n\r\n  return valueToReturn;\r\n}\r\n"]}