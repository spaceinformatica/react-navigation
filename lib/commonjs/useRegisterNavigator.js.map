{"version":3,"sources":["useRegisterNavigator.tsx"],"names":["useRegisterNavigator","key","React","useState","container","useContext","SingleNavigatorContext","undefined","Error","useEffect","register","unregister"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACe,SAASA,oBAAT,GAAgC;AAC7C,QAAM,CAACC,GAAD,IAAQC,KAAK,CAACC,QAAN,CAAe,MAAM,wBAArB,CAAd;AACA,QAAMC,SAAS,GAAGF,KAAK,CAACG,UAAN,CAAiBC,6CAAjB,CAAlB;;AAEA,MAAIF,SAAS,KAAKG,SAAlB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CACJ,wFADI,CAAN;AAGD;;AAEDN,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA2BP,SAAjC;AAEAM,IAAAA,QAAQ,CAACT,GAAD,CAAR;AAEA,WAAO,MAAMU,UAAU,CAACV,GAAD,CAAvB;AACD,GAND,EAMG,CAACG,SAAD,EAAYH,GAAZ,CANH;AAQA,SAAOA,GAAP;AACD","sourcesContent":["import * as React from 'react';\r\nimport { nanoid } from 'nanoid/non-secure';\r\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\r\n\r\n/**\r\n * Register a navigator in the parent context (either a navigation container or a screen).\r\n * This is used to prevent multiple navigators under a single container or screen.\r\n */\r\nexport default function useRegisterNavigator() {\r\n  const [key] = React.useState(() => nanoid());\r\n  const container = React.useContext(SingleNavigatorContext);\r\n\r\n  if (container === undefined) {\r\n    throw new Error(\r\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\"\r\n    );\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const { register, unregister } = container;\r\n\r\n    register(key);\r\n\r\n    return () => unregister(key);\r\n  }, [container, key]);\r\n\r\n  return key;\r\n}\r\n"]}