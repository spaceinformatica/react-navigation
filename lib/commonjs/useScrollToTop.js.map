{"version":3,"sources":["useScrollToTop.tsx"],"names":["getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","React","useEffect","dangerouslyGetState","type","dangerouslyGetParent","unsubscribe","addListener","e","isFocused","isFirst","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","y","animated","scrollToOffset","offset","scrollResponderScrollTo"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAeA,SAASA,iBAAT,CAA2BC,GAA3B,EAAoE;AAClE,MAAIA,GAAG,CAACC,OAAJ,IAAe,IAAnB,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MACE,iBAAiBD,GAAG,CAACC,OAArB,IACA,cAAcD,GAAG,CAACC,OADlB,IAEA,oBAAoBD,GAAG,CAACC,OAFxB,IAGA,6BAA6BD,GAAG,CAACC,OAJnC,EAKE;AACA;AACA,WAAOD,GAAG,CAACC,OAAX;AACD,GARD,MAQO,IAAI,wBAAwBD,GAAG,CAACC,OAAhC,EAAyC;AAC9C;AACA;AACA,WAAOD,GAAG,CAACC,OAAJ,CAAYC,kBAAZ,EAAP;AACD,GAJM,MAIA,IAAI,aAAaF,GAAG,CAACC,OAArB,EAA8B;AACnC;AACA;AACA;AACA;AACA,WAAOD,GAAG,CAACC,OAAJ,CAAYE,OAAZ,EAAP;AACD,GANM,MAMA;AACL,WAAOH,GAAG,CAACC,OAAX;AACD;AACF;;AAEc,SAASG,cAAT,CACbJ,GADa,EAEb;AACA,QAAMK,UAAU,GAAG,0BAAnB;AACA,QAAMC,KAAK,GAAG,qBAAd;AAEAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAIP,OAAO,GAAGI,UAAd,CADoB,CAGpB;AACA;;AACA,WAAOJ,OAAO,IAAIA,OAAO,CAACQ,mBAAR,GAA8BC,IAA9B,KAAuC,KAAzD,EAAgE;AAC9DT,MAAAA,OAAO,GAAGA,OAAO,CAACU,oBAAR,EAAV;AACD;;AAED,QAAI,CAACV,OAAL,EAAc;AACZ;AACD;;AAED,UAAMW,WAAW,GAAGX,OAAO,CAACY,WAAR,EAClB;AACA;AACA;AACA,cAJkB,EAKjBC,CAAD,IAAmC;AACjC;AACA,YAAMC,SAAS,GAAGV,UAAU,CAACU,SAAX,EAAlB,CAFiC,CAIjC;AACA;;AACA,YAAMC,OAAO,GACXX,UAAU,KAAKJ,OAAf,IACAI,UAAU,CAACI,mBAAX,GAAiCQ,MAAjC,CAAwC,CAAxC,EAA2CC,GAA3C,KAAmDZ,KAAK,CAACY,GAF3D,CANiC,CAUjC;AACA;;AACAC,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,cAAMC,UAAU,GAAGrB,iBAAiB,CAACC,GAAD,CAApC;;AAEA,YAAIe,SAAS,IAAIC,OAAb,IAAwBI,UAAxB,IAAsC,CAACN,CAAC,CAACO,gBAA7C,EAA+D;AAC7D,cAAI,iBAAiBD,UAArB,EAAiC;AAC/BA,YAAAA,UAAU,CAACE,WAAX;AACD,WAFD,MAEO,IAAI,cAAcF,UAAlB,EAA8B;AACnCA,YAAAA,UAAU,CAACG,QAAX,CAAoB;AAAEC,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,QAAQ,EAAE;AAAlB,aAApB;AACD,WAFM,MAEA,IAAI,oBAAoBL,UAAxB,EAAoC;AACzCA,YAAAA,UAAU,CAACM,cAAX,CAA0B;AAAEC,cAAAA,MAAM,EAAE,CAAV;AAAaF,cAAAA,QAAQ,EAAE;AAAvB,aAA1B;AACD,WAFM,MAEA,IAAI,6BAA6BL,UAAjC,EAA6C;AAClDA,YAAAA,UAAU,CAACQ,uBAAX,CAAmC;AAAEJ,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,QAAQ,EAAE;AAAlB,aAAnC;AACD;AACF;AACF,OAdoB,CAArB;AAeD,KAhCiB,CAApB;AAmCA,WAAOb,WAAP;AACD,GAjDD,EAiDG,CAACP,UAAD,EAAaL,GAAb,EAAkBM,KAAK,CAACY,GAAxB,CAjDH;AAkDD","sourcesContent":["import * as React from 'react';\r\nimport { useNavigation, useRoute, EventArg } from '@react-navigation/core';\r\n\r\ntype ScrollOptions = { y?: number; animated?: boolean };\r\n\r\ntype ScrollableView =\r\n  | { scrollToTop(): void }\r\n  | { scrollTo(options: ScrollOptions): void }\r\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\r\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\r\n\r\ntype ScrollableWrapper =\r\n  | { getScrollResponder(): React.ReactNode }\r\n  | { getNode(): ScrollableView }\r\n  | ScrollableView;\r\n\r\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\r\n  if (ref.current == null) {\r\n    return null;\r\n  }\r\n\r\n  if (\r\n    'scrollToTop' in ref.current ||\r\n    'scrollTo' in ref.current ||\r\n    'scrollToOffset' in ref.current ||\r\n    'scrollResponderScrollTo' in ref.current\r\n  ) {\r\n    // This is already a scrollable node.\r\n    return ref.current;\r\n  } else if ('getScrollResponder' in ref.current) {\r\n    // If the view is a wrapper like FlatList, SectionList etc.\r\n    // We need to use `getScrollResponder` to get access to the scroll responder\r\n    return ref.current.getScrollResponder();\r\n  } else if ('getNode' in ref.current) {\r\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\r\n    // we need to use `getNode` to get the ref to the actual scrollview.\r\n    // Note that `getNode` is deprecated in newer versions of react-native\r\n    // this is why we check if we already have a scrollable node above.\r\n    return ref.current.getNode();\r\n  } else {\r\n    return ref.current;\r\n  }\r\n}\r\n\r\nexport default function useScrollToTop(\r\n  ref: React.RefObject<ScrollableWrapper>\r\n) {\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n\r\n  React.useEffect(() => {\r\n    let current = navigation;\r\n\r\n    // The screen might be inside another navigator such as stack nested in tabs\r\n    // We need to find the closest tab navigator and add the listener there\r\n    while (current && current.dangerouslyGetState().type !== 'tab') {\r\n      current = current.dangerouslyGetParent();\r\n    }\r\n\r\n    if (!current) {\r\n      return;\r\n    }\r\n\r\n    const unsubscribe = current.addListener(\r\n      // We don't wanna import tab types here to avoid extra deps\r\n      // in addition, there are multiple tab implementations\r\n      // @ts-expect-error\r\n      'tabPress',\r\n      (e: EventArg<'tabPress', true>) => {\r\n        // We should scroll to top only when the screen is focused\r\n        const isFocused = navigation.isFocused();\r\n\r\n        // In a nested stack navigator, tab press resets the stack to first screen\r\n        // So we should scroll to top only when we are on first screen\r\n        const isFirst =\r\n          navigation === current ||\r\n          navigation.dangerouslyGetState().routes[0].key === route.key;\r\n\r\n        // Run the operation in the next frame so we're sure all listeners have been run\r\n        // This is necessary to know if preventDefault() has been called\r\n        requestAnimationFrame(() => {\r\n          const scrollable = getScrollableNode(ref) as ScrollableWrapper;\r\n\r\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\r\n            if ('scrollToTop' in scrollable) {\r\n              scrollable.scrollToTop();\r\n            } else if ('scrollTo' in scrollable) {\r\n              scrollable.scrollTo({ y: 0, animated: true });\r\n            } else if ('scrollToOffset' in scrollable) {\r\n              scrollable.scrollToOffset({ offset: 0, animated: true });\r\n            } else if ('scrollResponderScrollTo' in scrollable) {\r\n              scrollable.scrollResponderScrollTo({ y: 0, animated: true });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    );\r\n\r\n    return unsubscribe;\r\n  }, [navigation, ref, route.key]);\r\n}\r\n"]}