{"version":3,"sources":["StackRouter.tsx"],"names":["StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","BaseRouter","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","merge","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\nimport BaseRouter from './BaseRouter';\r\nimport type {\r\n  NavigationState,\r\n  CommonNavigationAction,\r\n  Router,\r\n  DefaultRouterOptions,\r\n  Route,\r\n  ParamListBase,\r\n} from './types';\r\n\r\nexport type StackActionType =\r\n  | {\r\n      type: 'REPLACE';\r\n      payload: { name: string; key?: string | undefined; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'PUSH';\r\n      payload: { name: string; key?: string | undefined; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP';\r\n      payload: { count: number };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP_TO_TOP';\r\n      source?: string;\r\n      target?: string;\r\n    };\r\n\r\nexport type StackRouterOptions = DefaultRouterOptions;\r\n\r\nexport type StackNavigationState<\r\n  ParamList extends ParamListBase\r\n> = NavigationState<ParamList> & {\r\n  /**\r\n   * Type of the router, in this case, it's stack.\r\n   */\r\n  type: 'stack';\r\n};\r\n\r\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\r\n  /**\r\n   * Replace the current route with a new one.\r\n   *\r\n   * @param name Route name of the new route.\r\n   * @param [params] Params object for the new route.\r\n   */\r\n  replace<RouteName extends keyof ParamList>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\r\n      : [RouteName, ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Push a new screen onto the stack.\r\n   *\r\n   * @param name Name of the route for the tab.\r\n   * @param [params] Params object for the route.\r\n   */\r\n  push<RouteName extends keyof ParamList>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\r\n      : [RouteName, ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Pop a screen from the stack.\r\n   */\r\n  pop(count?: number): void;\r\n\r\n  /**\r\n   * Pop to the first route in the stack, dismissing all other screens.\r\n   */\r\n  popToTop(): void;\r\n};\r\n\r\nexport const StackActions = {\r\n  replace(name: string, params?: object): StackActionType {\r\n    return { type: 'REPLACE', payload: { name, params } };\r\n  },\r\n  push(name: string, params?: object): StackActionType {\r\n    return { type: 'PUSH', payload: { name, params } };\r\n  },\r\n  pop(count: number = 1): StackActionType {\r\n    return { type: 'POP', payload: { count } };\r\n  },\r\n  popToTop(): StackActionType {\r\n    return { type: 'POP_TO_TOP' };\r\n  },\r\n};\r\n\r\nexport default function StackRouter(options: StackRouterOptions) {\r\n  const router: Router<\r\n    StackNavigationState<ParamListBase>,\r\n    CommonNavigationAction | StackActionType\r\n  > = {\r\n    ...BaseRouter,\r\n\r\n    type: 'stack',\r\n\r\n    getInitialState({ routeNames, routeParamList }) {\r\n      const initialRouteName =\r\n        options.initialRouteName !== undefined &&\r\n        routeNames.includes(options.initialRouteName)\r\n          ? options.initialRouteName\r\n          : routeNames[0];\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: 0,\r\n        routeNames,\r\n        routes: [\r\n          {\r\n            key: `${initialRouteName}-${nanoid()}`,\r\n            name: initialRouteName,\r\n            params: routeParamList[initialRouteName],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n\r\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\r\n      let state = partialState;\r\n\r\n      if (state.stale === false) {\r\n        return state;\r\n      }\r\n\r\n      const routes = state.routes\r\n        .filter((route) => routeNames.includes(route.name))\r\n        .map(\r\n          (route) =>\r\n            ({\r\n              ...route,\r\n              key: route.key || `${route.name}-${nanoid()}`,\r\n              params:\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...route.params,\r\n                    }\r\n                  : route.params,\r\n            } as Route<string>)\r\n        );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: routes.length - 1,\r\n        routeNames,\r\n        routes,\r\n      };\r\n    },\r\n\r\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\r\n      const routes = state.routes.filter((route) =>\r\n        routeNames.includes(route.name)\r\n      );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined &&\r\n          routeNames.includes(options.initialRouteName)\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        routeNames,\r\n        routes,\r\n        index: Math.min(state.index, routes.length - 1),\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const index = state.routes.findIndex((r) => r.key === key);\r\n\r\n      if (index === -1 || index === state.index) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        index,\r\n        routes: state.routes.slice(0, index + 1),\r\n      };\r\n    },\r\n\r\n    getStateForAction(state, action, options) {\r\n      const { routeParamList } = options;\r\n\r\n      switch (action.type) {\r\n        case 'REPLACE': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index === -1) {\r\n            return null;\r\n          }\r\n\r\n          const { name, key, params } = action.payload;\r\n\r\n          if (!state.routeNames.includes(name)) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            routes: state.routes.map((route, i) =>\r\n              i === index\r\n                ? {\r\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\r\n                    name,\r\n                    params:\r\n                      routeParamList[name] !== undefined\r\n                        ? {\r\n                            ...routeParamList[name],\r\n                            ...params,\r\n                          }\r\n                        : params,\r\n                  }\r\n                : route\r\n            ),\r\n          };\r\n        }\r\n\r\n        case 'PUSH':\r\n          if (state.routeNames.includes(action.payload.name)) {\r\n            const getId = options.routeGetIdList[action.payload.name];\r\n            const id = getId?.({ params: action.payload.params });\r\n\r\n            const route =\r\n              action.payload.name && action.payload.key\r\n                ? state.routes.find(\r\n                    (route) =>\r\n                      route.name === action.payload.name &&\r\n                      route.key === action.payload.key\r\n                  )\r\n                : id\r\n                ? state.routes.find(\r\n                    (route) => id === getId?.({ params: route.params })\r\n                  )\r\n                : undefined;\r\n\r\n            let routes: Route<string>[];\r\n\r\n            if (route) {\r\n              routes = state.routes.filter((r) => r.key !== route.key);\r\n              routes.push({\r\n                ...route,\r\n                params:\r\n                  action.payload.params !== undefined\r\n                    ? {\r\n                        ...route.params,\r\n                        ...action.payload.params,\r\n                      }\r\n                    : route.params,\r\n              });\r\n            } else {\r\n              routes = [\r\n                ...state.routes,\r\n                {\r\n                  key:\r\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\r\n                  name: action.payload.name,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ];\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'POP': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index > 0) {\r\n            const count = Math.max(index - action.payload.count + 1, 1);\r\n            const routes = state.routes\r\n              .slice(0, count)\r\n              .concat(state.routes.slice(index + 1));\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n        }\r\n\r\n        case 'POP_TO_TOP':\r\n          return router.getStateForAction(\r\n            state,\r\n            {\r\n              type: 'POP',\r\n              payload: { count: state.routes.length - 1 },\r\n            },\r\n            options\r\n          );\r\n\r\n        case 'NAVIGATE':\r\n          if (\r\n            action.payload.key ||\r\n            (action.payload.name &&\r\n              state.routeNames.includes(action.payload.name))\r\n          ) {\r\n            // If the route already exists, navigate to that\r\n            let index = -1;\r\n\r\n            const getId =\r\n              // `getId` and `key` can't be used together\r\n              action.payload.key === undefined &&\r\n              action.payload.name !== undefined\r\n                ? options.routeGetIdList[action.payload.name]\r\n                : undefined;\r\n            const id = getId?.({ params: action.payload.params });\r\n\r\n            if (id) {\r\n              index = state.routes.findIndex(\r\n                (route) => id === getId?.({ params: route.params })\r\n              );\r\n            } else if (\r\n              (state.routes[state.index].name === action.payload.name &&\r\n                action.payload.key === undefined) ||\r\n              state.routes[state.index].key === action.payload.key\r\n            ) {\r\n              index = state.index;\r\n            } else {\r\n              for (let i = state.routes.length - 1; i >= 0; i--) {\r\n                if (\r\n                  (state.routes[i].name === action.payload.name &&\r\n                    action.payload.key === undefined) ||\r\n                  state.routes[i].key === action.payload.key\r\n                ) {\r\n                  index = i;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              index === -1 &&\r\n              action.payload.key &&\r\n              action.payload.name === undefined\r\n            ) {\r\n              return null;\r\n            }\r\n\r\n            if (index === -1 && action.payload.name !== undefined) {\r\n              const routes = [\r\n                ...state.routes,\r\n                {\r\n                  key:\r\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\r\n                  name: action.payload.name,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ];\r\n\r\n              return {\r\n                ...state,\r\n                routes,\r\n                index: routes.length - 1,\r\n              };\r\n            }\r\n\r\n            const route = state.routes[index];\r\n\r\n            let params;\r\n\r\n            if (action.payload.merge === false) {\r\n              params =\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...action.payload.params,\r\n                    }\r\n                  : action.payload.params;\r\n            } else {\r\n              params = action.payload.params\r\n                ? {\r\n                    ...route.params,\r\n                    ...action.payload.params,\r\n                  }\r\n                : route.params;\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index,\r\n              routes: [\r\n                ...state.routes.slice(0, index),\r\n                params !== route.params\r\n                  ? { ...route, params }\r\n                  : state.routes[index],\r\n              ],\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'GO_BACK':\r\n          if (state.index > 0) {\r\n            return router.getStateForAction(\r\n              state,\r\n              {\r\n                type: 'POP',\r\n                payload: { count: 1 },\r\n                target: action.target,\r\n                source: action.source,\r\n              },\r\n              options\r\n            );\r\n          }\r\n\r\n          return null;\r\n\r\n        default:\r\n          return BaseRouter.getStateForAction(state, action);\r\n      }\r\n    },\r\n\r\n    actionCreators: StackActions,\r\n  };\r\n\r\n  return router;\r\n}\r\n"]}