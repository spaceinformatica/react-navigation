{"version":3,"sources":["useScheduleUpdate.tsx"],"names":["MISSING_CONTEXT_ERROR","ScheduleUpdateContext","React","createContext","scheduleUpdate","Error","flushUpdates","useScheduleUpdate","callback","useContext","useEffect"],"mappings":";;;;;;;;AAAA;;;;;;AAEA,MAAMA,qBAAqB,GAAG,mCAA9B;AAEO,MAAMC,qBAAqB,gBAAGC,KAAK,CAACC,aAAN,CAGlC;AACDC,EAAAA,cAAc,GAAG;AACf,UAAM,IAAIC,KAAJ,CAAUL,qBAAV,CAAN;AACD,GAHA;;AAIDM,EAAAA,YAAY,GAAG;AACb,UAAM,IAAID,KAAJ,CAAUL,qBAAV,CAAN;AACD;;AANA,CAHkC,CAA9B;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACe,SAASO,iBAAT,CAA2BC,QAA3B,EAAiD;AAC9D,QAAM;AAAEJ,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmCJ,KAAK,CAACO,UAAN,CACvCR,qBADuC,CAAzC;AAIAG,EAAAA,cAAc,CAACI,QAAD,CAAd;AAEAN,EAAAA,KAAK,CAACQ,SAAN,CAAgBJ,YAAhB;AACD","sourcesContent":["import * as React from 'react';\r\n\r\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\r\n\r\nexport const ScheduleUpdateContext = React.createContext<{\r\n  scheduleUpdate: (callback: () => void) => void;\r\n  flushUpdates: () => void;\r\n}>({\r\n  scheduleUpdate() {\r\n    throw new Error(MISSING_CONTEXT_ERROR);\r\n  },\r\n  flushUpdates() {\r\n    throw new Error(MISSING_CONTEXT_ERROR);\r\n  },\r\n});\r\n\r\n/**\r\n * When screen config changes, we want to update the navigator in the same update phase.\r\n * However, navigation state is in the root component and React won't let us update it from a child.\r\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\r\n * It lets all subsequent updates access the latest state so it stays correct.\r\n * Then we call setState during after the component updates.\r\n */\r\nexport default function useScheduleUpdate(callback: () => void) {\r\n  const { scheduleUpdate, flushUpdates } = React.useContext(\r\n    ScheduleUpdateContext\r\n  );\r\n\r\n  scheduleUpdate(callback);\r\n\r\n  React.useEffect(flushUpdates);\r\n}\r\n"]}