{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","ModalTransition","DefaultTransition","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","React","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","Dimensions","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","shouldUseActivityState","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","right","bottom","left","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  StyleSheet,\r\n  LayoutChangeEvent,\r\n  Dimensions,\r\n  Platform,\r\n} from 'react-native';\r\nimport type { EdgeInsets } from 'react-native-safe-area-context';\r\nimport type {\r\n  ParamListBase,\r\n  Route,\r\n  StackNavigationState,\r\n} from '@react-navigation/native';\r\n\r\nimport {\r\n  MaybeScreenContainer,\r\n  MaybeScreen,\r\n  shouldUseActivityState,\r\n} from '../Screens';\r\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\r\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\r\nimport CardContainer from './CardContainer';\r\nimport {\r\n  DefaultTransition,\r\n  ModalTransition,\r\n} from '../../TransitionConfigs/TransitionPresets';\r\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\r\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\r\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\r\nimport type {\r\n  Layout,\r\n  StackHeaderMode,\r\n  StackCardMode,\r\n  Scene,\r\n  StackDescriptorMap,\r\n  StackNavigationOptions,\r\n  StackDescriptor,\r\n} from '../../types';\r\n\r\ntype GestureValues = {\r\n  [key: string]: Animated.Value;\r\n};\r\n\r\ntype Props = {\r\n  mode: StackCardMode;\r\n  insets: EdgeInsets;\r\n  state: StackNavigationState<ParamListBase>;\r\n  descriptors: StackDescriptorMap;\r\n  routes: Route<string>[];\r\n  openingRouteKeys: string[];\r\n  closingRouteKeys: string[];\r\n  onOpenRoute: (props: { route: Route<string> }) => void;\r\n  onCloseRoute: (props: { route: Route<string> }) => void;\r\n  getPreviousRoute: (props: {\r\n    route: Route<string>;\r\n  }) => Route<string> | undefined;\r\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\r\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\r\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\r\n  headerMode: StackHeaderMode;\r\n  isParentHeaderShown: boolean;\r\n  onTransitionStart: (\r\n    props: { route: Route<string> },\r\n    closing: boolean\r\n  ) => void;\r\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\r\n  onPageChangeStart?: () => void;\r\n  onPageChangeConfirm?: (force: boolean) => void;\r\n  onPageChangeCancel?: () => void;\r\n  onGestureStart?: (props: { route: Route<string> }) => void;\r\n  onGestureEnd?: (props: { route: Route<string> }) => void;\r\n  onGestureCancel?: (props: { route: Route<string> }) => void;\r\n  detachInactiveScreens?: boolean;\r\n};\r\n\r\ntype State = {\r\n  routes: Route<string>[];\r\n  descriptors: StackDescriptorMap;\r\n  scenes: Scene<Route<string>>[];\r\n  gestures: GestureValues;\r\n  layout: Layout;\r\n  headerHeights: Record<string, number>;\r\n};\r\n\r\nconst EPSILON = 0.01;\r\n\r\nconst STATE_INACTIVE = 0;\r\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\r\nconst STATE_ON_TOP = 2;\r\n\r\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\r\n\r\nconst getHeaderHeights = (\r\n  routes: Route<string>[],\r\n  insets: EdgeInsets,\r\n  isParentHeaderShown: boolean,\r\n  descriptors: StackDescriptorMap,\r\n  layout: Layout,\r\n  previous: Record<string, number>\r\n) => {\r\n  return routes.reduce<Record<string, number>>((acc, curr) => {\r\n    const { options = {} } = descriptors[curr.key] || {};\r\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\r\n\r\n    const height =\r\n      typeof style.height === 'number' ? style.height : previous[curr.key];\r\n\r\n    const safeAreaInsets = {\r\n      ...insets,\r\n      ...options.safeAreaInsets,\r\n    };\r\n\r\n    const {\r\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\r\n    } = options;\r\n\r\n    acc[curr.key] =\r\n      typeof height === 'number'\r\n        ? height\r\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst getDistanceFromOptions = (\r\n  mode: StackCardMode,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const {\r\n    gestureDirection = mode === 'modal'\r\n      ? ModalTransition.gestureDirection\r\n      : DefaultTransition.gestureDirection,\r\n  } = descriptor?.options || {};\r\n\r\n  return getDistanceForDirection(layout, gestureDirection);\r\n};\r\n\r\nconst getProgressFromGesture = (\r\n  mode: StackCardMode,\r\n  gesture: Animated.Value,\r\n  layout: Layout,\r\n  descriptor?: StackDescriptor\r\n) => {\r\n  const distance = getDistanceFromOptions(\r\n    mode,\r\n    {\r\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\r\n      // This causes blank screen on web if it was previously inside container with display: none\r\n      width: Math.max(1, layout.width),\r\n      height: Math.max(1, layout.height),\r\n    },\r\n    descriptor\r\n  );\r\n\r\n  if (distance > 0) {\r\n    return gesture.interpolate({\r\n      inputRange: [0, distance],\r\n      outputRange: [1, 0],\r\n    });\r\n  }\r\n\r\n  return gesture.interpolate({\r\n    inputRange: [distance, 0],\r\n    outputRange: [0, 1],\r\n  });\r\n};\r\n\r\nexport default class CardStack extends React.Component<Props, State> {\r\n  static getDerivedStateFromProps(props: Props, state: State) {\r\n    if (\r\n      props.routes === state.routes &&\r\n      props.descriptors === state.descriptors\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\r\n      const descriptor = props.descriptors[curr.key];\r\n      const { animationEnabled } = descriptor?.options || {};\r\n\r\n      acc[curr.key] =\r\n        state.gestures[curr.key] ||\r\n        new Animated.Value(\r\n          props.openingRouteKeys.includes(curr.key) &&\r\n          animationEnabled !== false\r\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\r\n            : 0\r\n        );\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      routes: props.routes,\r\n      scenes: props.routes.map((route, index, self) => {\r\n        const previousRoute = self[index - 1];\r\n        const nextRoute = self[index + 1];\r\n\r\n        const oldScene = state.scenes[index];\r\n\r\n        const currentGesture = gestures[route.key];\r\n        const previousGesture = previousRoute\r\n          ? gestures[previousRoute.key]\r\n          : undefined;\r\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\r\n\r\n        const descriptor =\r\n          props.descriptors[route.key] ||\r\n          state.descriptors[route.key] ||\r\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\r\n\r\n        const nextDescriptor =\r\n          props.descriptors[nextRoute?.key] ||\r\n          state.descriptors[nextRoute?.key];\r\n\r\n        const previousDescriptor =\r\n          props.descriptors[previousRoute?.key] ||\r\n          state.descriptors[previousRoute?.key];\r\n\r\n        const scene = {\r\n          route,\r\n          descriptor,\r\n          progress: {\r\n            current: getProgressFromGesture(\r\n              props.mode,\r\n              currentGesture,\r\n              state.layout,\r\n              descriptor\r\n            ),\r\n            next: nextGesture\r\n              ? getProgressFromGesture(\r\n                  props.mode,\r\n                  nextGesture,\r\n                  state.layout,\r\n                  nextDescriptor\r\n                )\r\n              : undefined,\r\n            previous: previousGesture\r\n              ? getProgressFromGesture(\r\n                  props.mode,\r\n                  previousGesture,\r\n                  state.layout,\r\n                  previousDescriptor\r\n                )\r\n              : undefined,\r\n          },\r\n          __memo: [\r\n            route,\r\n            state.layout,\r\n            descriptor,\r\n            nextDescriptor,\r\n            previousDescriptor,\r\n            currentGesture,\r\n            nextGesture,\r\n            previousGesture,\r\n          ],\r\n        };\r\n\r\n        if (\r\n          oldScene &&\r\n          scene.__memo.every((it, i) => {\r\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\r\n            return oldScene.__memo[i] === it;\r\n          })\r\n        ) {\r\n          return oldScene;\r\n        }\r\n\r\n        return scene;\r\n      }),\r\n      gestures,\r\n      descriptors: props.descriptors,\r\n      headerHeights: getHeaderHeights(\r\n        props.routes,\r\n        props.insets,\r\n        props.isParentHeaderShown,\r\n        state.descriptors,\r\n        state.layout,\r\n        state.headerHeights\r\n      ),\r\n    };\r\n  }\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    const { height = 0, width = 0 } = Dimensions.get('window');\r\n\r\n    this.state = {\r\n      routes: [],\r\n      scenes: [],\r\n      gestures: {},\r\n      layout: { height, width },\r\n      descriptors: this.props.descriptors,\r\n      // Used when card's header is null and mode is float to make transition\r\n      // between screens with headers and those without headers smooth.\r\n      // This is not a great heuristic here. We don't know synchronously\r\n      // on mount what the header height is so we have just used the most\r\n      // common cases here.\r\n      headerHeights: {},\r\n    };\r\n  }\r\n\r\n  private handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    const layout = { width, height };\r\n\r\n    this.setState((state, props) => {\r\n      if (height === state.layout.height && width === state.layout.width) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        layout,\r\n        headerHeights: getHeaderHeights(\r\n          props.routes,\r\n          props.insets,\r\n          props.isParentHeaderShown,\r\n          state.descriptors,\r\n          layout,\r\n          state.headerHeights\r\n        ),\r\n      };\r\n    });\r\n  };\r\n\r\n  private handleHeaderLayout = ({\r\n    route,\r\n    height,\r\n  }: {\r\n    route: Route<string>;\r\n    height: number;\r\n  }) => {\r\n    this.setState(({ headerHeights }) => {\r\n      const previousHeight = headerHeights[route.key];\r\n\r\n      if (previousHeight === height) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        headerHeights: {\r\n          ...headerHeights,\r\n          [route.key]: height,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  private getFocusedRoute = () => {\r\n    const { state } = this.props;\r\n\r\n    return state.routes[state.index];\r\n  };\r\n\r\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\r\n    const { getPreviousRoute } = this.props;\r\n    const { scenes } = this.state;\r\n\r\n    const previousRoute = getPreviousRoute({ route });\r\n\r\n    if (previousRoute) {\r\n      const previousScene = scenes.find(\r\n        (scene) => scene.route.key === previousRoute.key\r\n      );\r\n\r\n      return previousScene;\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      mode,\r\n      insets,\r\n      descriptors,\r\n      state,\r\n      routes,\r\n      closingRouteKeys,\r\n      onOpenRoute,\r\n      onCloseRoute,\r\n      getGesturesEnabled,\r\n      renderHeader,\r\n      renderScene,\r\n      headerMode,\r\n      isParentHeaderShown,\r\n      onTransitionStart,\r\n      onTransitionEnd,\r\n      onPageChangeStart,\r\n      onPageChangeConfirm,\r\n      onPageChangeCancel,\r\n      onGestureStart,\r\n      onGestureEnd,\r\n      onGestureCancel,\r\n      // Enable on new versions of `react-native-screens`\r\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\r\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\r\n    } = this.props;\r\n\r\n    const { scenes, layout, gestures, headerHeights } = this.state;\r\n\r\n    const focusedRoute = state.routes[state.index];\r\n    const focusedDescriptor = descriptors[focusedRoute.key];\r\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\r\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\r\n\r\n    let defaultTransitionPreset =\r\n      mode === 'modal' ? ModalTransition : DefaultTransition;\r\n\r\n    if (headerMode === 'screen') {\r\n      defaultTransitionPreset = {\r\n        ...defaultTransitionPreset,\r\n        headerStyleInterpolator: forNoAnimationHeader,\r\n      };\r\n    }\r\n\r\n    const {\r\n      top = insets.top,\r\n      right = insets.right,\r\n      bottom = insets.bottom,\r\n      left = insets.left,\r\n    } = focusedOptions.safeAreaInsets || {};\r\n\r\n    let activeScreensLimit = 1;\r\n\r\n    for (let i = scenes.length - 1; i >= 0; i--) {\r\n      const {\r\n        // By default, we don't want to detach the previous screen of the active one for modals\r\n        detachPreviousScreen = mode === 'modal'\r\n          ? i !== scenes.length - 1\r\n          : true,\r\n      } = scenes[i].descriptor.options;\r\n\r\n      if (detachPreviousScreen === false) {\r\n        activeScreensLimit++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const isFloatHeaderAbsolute =\r\n      headerMode === 'float'\r\n        ? this.state.scenes.slice(-2).some((scene) => {\r\n            const { descriptor } = scene;\r\n            const options = descriptor ? descriptor.options : {};\r\n            const { headerTransparent, headerShown = true } = options;\r\n\r\n            if (headerTransparent || headerShown === false) {\r\n              return true;\r\n            }\r\n\r\n            return false;\r\n          })\r\n        : false;\r\n\r\n    const floatingHeader =\r\n      headerMode === 'float' ? (\r\n        <React.Fragment key=\"header\">\r\n          {renderHeader({\r\n            mode: 'float',\r\n            layout,\r\n            insets: { top, right, bottom, left },\r\n            scenes,\r\n            getPreviousScene: this.getPreviousScene,\r\n            getFocusedRoute: this.getFocusedRoute,\r\n            onContentHeightChange: this.handleHeaderLayout,\r\n            gestureDirection:\r\n              focusedOptions.gestureDirection !== undefined\r\n                ? focusedOptions.gestureDirection\r\n                : defaultTransitionPreset.gestureDirection,\r\n            styleInterpolator:\r\n              focusedOptions.headerStyleInterpolator !== undefined\r\n                ? focusedOptions.headerStyleInterpolator\r\n                : defaultTransitionPreset.headerStyleInterpolator,\r\n            style: [\r\n              styles.floating,\r\n              isFloatHeaderAbsolute && [\r\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\r\n                { height: focusedHeaderHeight },\r\n                styles.absolute,\r\n              ],\r\n            ],\r\n          })}\r\n        </React.Fragment>\r\n      ) : null;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {isFloatHeaderAbsolute ? null : floatingHeader}\r\n        <MaybeScreenContainer\r\n          enabled={detachInactiveScreens}\r\n          style={styles.container}\r\n          onLayout={this.handleLayout}\r\n        >\r\n          {routes.map((route, index, self) => {\r\n            const focused = focusedRoute.key === route.key;\r\n            const gesture = gestures[route.key];\r\n            const scene = scenes[index];\r\n\r\n            // For the screens that shouldn't be active, the value is 0\r\n            // For those that should be active, but are not the top screen, the value is 1\r\n            // For those on top of the stack and with interaction enabled, the value is 2\r\n            // For the old implementation, it stays the same it was\r\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\r\n\r\n            if (shouldUseActivityState) {\r\n              if (index < self.length - activeScreensLimit - 1) {\r\n                // screen should be inactive because it is too deep in the stack\r\n                isScreenActive = STATE_INACTIVE;\r\n              } else {\r\n                const sceneForActivity = scenes[self.length - 1];\r\n                const outputValue =\r\n                  index === self.length - 1\r\n                    ? STATE_ON_TOP // the screen is on top after the transition\r\n                    : index >= self.length - activeScreensLimit\r\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\r\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\r\n                isScreenActive = sceneForActivity\r\n                  ? sceneForActivity.progress.current.interpolate({\r\n                      inputRange: [0, 1 - EPSILON, 1],\r\n                      outputRange: [1, 1, outputValue],\r\n                      extrapolate: 'clamp',\r\n                    })\r\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\r\n              }\r\n            } else {\r\n              isScreenActive = scene.progress.next\r\n                ? scene.progress.next.interpolate({\r\n                    inputRange: [0, 1 - EPSILON, 1],\r\n                    outputRange: [1, 1, 0],\r\n                    extrapolate: 'clamp',\r\n                  })\r\n                : 1;\r\n            }\r\n\r\n            const {\r\n              safeAreaInsets,\r\n              headerShown = true,\r\n              headerTransparent,\r\n              cardShadowEnabled,\r\n              cardOverlayEnabled,\r\n              cardOverlay,\r\n              cardStyle,\r\n              animationEnabled,\r\n              gestureResponseDistance,\r\n              gestureVelocityImpact,\r\n              gestureDirection = defaultTransitionPreset.gestureDirection,\r\n              transitionSpec = defaultTransitionPreset.transitionSpec,\r\n              cardStyleInterpolator = animationEnabled === false\r\n                ? forNoAnimationCard\r\n                : defaultTransitionPreset.cardStyleInterpolator,\r\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n            } = scene.descriptor\r\n              ? scene.descriptor.options\r\n              : ({} as StackNavigationOptions);\r\n\r\n            let transitionConfig = {\r\n              gestureDirection,\r\n              transitionSpec,\r\n              cardStyleInterpolator,\r\n              headerStyleInterpolator,\r\n            };\r\n\r\n            // When a screen is not the last, it should use next screen's transition config\r\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\r\n            // For example combining a slide and a modal transition would look wrong otherwise\r\n            // With this approach, combining different transition styles in the same navigator mostly looks right\r\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\r\n            // but majority of the transitions look alright\r\n            if (index !== self.length - 1) {\r\n              const nextScene = scenes[index + 1];\r\n\r\n              if (nextScene) {\r\n                const {\r\n                  animationEnabled,\r\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\r\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\r\n                  cardStyleInterpolator = animationEnabled === false\r\n                    ? forNoAnimationCard\r\n                    : defaultTransitionPreset.cardStyleInterpolator,\r\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\r\n                } = nextScene.descriptor\r\n                  ? nextScene.descriptor.options\r\n                  : ({} as StackNavigationOptions);\r\n\r\n                transitionConfig = {\r\n                  gestureDirection,\r\n                  transitionSpec,\r\n                  cardStyleInterpolator,\r\n                  headerStyleInterpolator,\r\n                };\r\n              }\r\n            }\r\n\r\n            const {\r\n              top: safeAreaInsetTop = insets.top,\r\n              right: safeAreaInsetRight = insets.right,\r\n              bottom: safeAreaInsetBottom = insets.bottom,\r\n              left: safeAreaInsetLeft = insets.left,\r\n            } = safeAreaInsets || {};\r\n\r\n            const headerHeight =\r\n              headerMode !== 'none' && headerShown !== false\r\n                ? headerHeights[route.key]\r\n                : 0;\r\n\r\n            return (\r\n              <MaybeScreen\r\n                key={route.key}\r\n                style={StyleSheet.absoluteFill}\r\n                enabled={detachInactiveScreens}\r\n                active={isScreenActive}\r\n                pointerEvents=\"box-none\"\r\n              >\r\n                <CardContainer\r\n                  index={index}\r\n                  active={index === self.length - 1}\r\n                  focused={focused}\r\n                  closing={closingRouteKeys.includes(route.key)}\r\n                  layout={layout}\r\n                  gesture={gesture}\r\n                  scene={scene}\r\n                  safeAreaInsetTop={safeAreaInsetTop}\r\n                  safeAreaInsetRight={safeAreaInsetRight}\r\n                  safeAreaInsetBottom={safeAreaInsetBottom}\r\n                  safeAreaInsetLeft={safeAreaInsetLeft}\r\n                  cardOverlay={cardOverlay}\r\n                  cardOverlayEnabled={cardOverlayEnabled}\r\n                  cardShadowEnabled={cardShadowEnabled}\r\n                  cardStyle={cardStyle}\r\n                  onPageChangeStart={onPageChangeStart}\r\n                  onPageChangeConfirm={onPageChangeConfirm}\r\n                  onPageChangeCancel={onPageChangeCancel}\r\n                  onGestureStart={onGestureStart}\r\n                  onGestureCancel={onGestureCancel}\r\n                  onGestureEnd={onGestureEnd}\r\n                  gestureResponseDistance={gestureResponseDistance}\r\n                  headerHeight={headerHeight}\r\n                  isParentHeaderShown={isParentHeaderShown}\r\n                  onHeaderHeightChange={this.handleHeaderLayout}\r\n                  getPreviousScene={this.getPreviousScene}\r\n                  getFocusedRoute={this.getFocusedRoute}\r\n                  mode={mode}\r\n                  headerMode={headerMode}\r\n                  headerShown={headerShown}\r\n                  hasAbsoluteHeader={\r\n                    isFloatHeaderAbsolute && !headerTransparent\r\n                  }\r\n                  renderHeader={renderHeader}\r\n                  renderScene={renderScene}\r\n                  onOpenRoute={onOpenRoute}\r\n                  onCloseRoute={onCloseRoute}\r\n                  onTransitionStart={onTransitionStart}\r\n                  onTransitionEnd={onTransitionEnd}\r\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\r\n                  gestureVelocityImpact={gestureVelocityImpact}\r\n                  {...transitionConfig}\r\n                />\r\n              </MaybeScreen>\r\n            );\r\n          })}\r\n        </MaybeScreenContainer>\r\n        {isFloatHeaderAbsolute ? floatingHeader : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  absolute: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  floating: {\r\n    zIndex: 1,\r\n  },\r\n});\r\n"]}