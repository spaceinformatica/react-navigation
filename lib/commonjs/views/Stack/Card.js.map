{"version":3,"sources":["Card.tsx"],"names":["GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","hasOpacityStyle","style","flattenedStyle","StyleSheet","flatten","opacity","Card","React","Component","Animated","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","InteractionManager","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","GestureState","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","absoluteFill","styles","container","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Animated,\r\n  View,\r\n  StyleSheet,\r\n  ViewProps,\r\n  StyleProp,\r\n  ViewStyle,\r\n  Platform,\r\n  InteractionManager,\r\n} from 'react-native';\r\nimport type { EdgeInsets } from 'react-native-safe-area-context';\r\nimport Color from 'color';\r\n\r\nimport CardSheet from './CardSheet';\r\nimport {\r\n  PanGestureHandler,\r\n  GestureState,\r\n  PanGestureHandlerGestureEvent,\r\n} from '../GestureHandler';\r\nimport CardAnimationContext from '../../utils/CardAnimationContext';\r\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\r\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\r\nimport memoize from '../../utils/memoize';\r\nimport type {\r\n  TransitionSpec,\r\n  StackCardStyleInterpolator,\r\n  GestureDirection,\r\n  Layout,\r\n} from '../../types';\r\n\r\ntype Props = ViewProps & {\r\n  index: number;\r\n  closing: boolean;\r\n  next?: Animated.AnimatedInterpolation;\r\n  current: Animated.AnimatedInterpolation;\r\n  gesture: Animated.Value;\r\n  layout: Layout;\r\n  insets: EdgeInsets;\r\n  pageOverflowEnabled: boolean;\r\n  gestureDirection: GestureDirection;\r\n  onOpen: () => void;\r\n  onClose: () => void;\r\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\r\n  onGestureBegin?: () => void;\r\n  onGestureCanceled?: () => void;\r\n  onGestureEnd?: () => void;\r\n  children: React.ReactNode;\r\n  overlay: (props: {\r\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  }) => React.ReactNode;\r\n  overlayEnabled: boolean;\r\n  shadowEnabled: boolean;\r\n  gestureEnabled: boolean;\r\n  gestureResponseDistance?: {\r\n    vertical?: number;\r\n    horizontal?: number;\r\n  };\r\n  gestureVelocityImpact: number;\r\n  transitionSpec: {\r\n    open: TransitionSpec;\r\n    close: TransitionSpec;\r\n  };\r\n  styleInterpolator: StackCardStyleInterpolator;\r\n  containerStyle?: StyleProp<ViewStyle>;\r\n  contentStyle?: StyleProp<ViewStyle>;\r\n};\r\n\r\nconst GESTURE_VELOCITY_IMPACT = 0.3;\r\n\r\nconst TRUE = 1;\r\nconst FALSE = 0;\r\n\r\n/**\r\n * The distance of touch start from the edge of the screen where the gesture will be recognized\r\n */\r\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\r\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\r\n\r\nconst useNativeDriver = Platform.OS !== 'web';\r\n\r\nconst hasOpacityStyle = (style: any) => {\r\n  if (style) {\r\n    const flattenedStyle = StyleSheet.flatten(style);\r\n    return flattenedStyle.opacity != null;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport default class Card extends React.Component<Props> {\r\n  static defaultProps = {\r\n    overlayEnabled: Platform.OS !== 'ios',\r\n    shadowEnabled: true,\r\n    gestureEnabled: true,\r\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\r\n    overlay: ({\r\n      style,\r\n    }: {\r\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n    }) =>\r\n      style ? (\r\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\r\n      ) : null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.animate({ closing: this.props.closing });\r\n    this.isCurrentlyMounted = true;\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const { layout, gestureDirection, closing } = this.props;\r\n    const { width, height } = layout;\r\n\r\n    if (width !== prevProps.layout.width) {\r\n      this.layout.width.setValue(width);\r\n    }\r\n\r\n    if (height !== prevProps.layout.height) {\r\n      this.layout.height.setValue(height);\r\n    }\r\n\r\n    if (gestureDirection !== prevProps.gestureDirection) {\r\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\r\n    }\r\n\r\n    const toValue = this.getAnimateToValue(this.props);\r\n\r\n    if (\r\n      this.getAnimateToValue(prevProps) !== toValue ||\r\n      this.lastToValue !== toValue\r\n    ) {\r\n      // We need to trigger the animation when route was closed\r\n      // Thr route might have been closed by a `POP` action or by a gesture\r\n      // When route was closed due to a gesture, the animation would've happened already\r\n      // It's still important to trigger the animation so that `onClose` is called\r\n      // If `onClose` is not called, cleanup step won't be performed for gestures\r\n      this.animate({ closing });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.isCurrentlyMounted = false;\r\n    this.handleEndInteraction();\r\n  }\r\n\r\n  private isCurrentlyMounted = false;\r\n\r\n  private isClosing = new Animated.Value(FALSE);\r\n\r\n  private inverted = new Animated.Value(\r\n    getInvertedMultiplier(this.props.gestureDirection)\r\n  );\r\n\r\n  private layout = {\r\n    width: new Animated.Value(this.props.layout.width),\r\n    height: new Animated.Value(this.props.layout.height),\r\n  };\r\n\r\n  private isSwiping = new Animated.Value(FALSE);\r\n\r\n  private interactionHandle: number | undefined;\r\n\r\n  private pendingGestureCallback: number | undefined;\r\n\r\n  private lastToValue: number | undefined;\r\n\r\n  private animate = ({\r\n    closing,\r\n    velocity,\r\n  }: {\r\n    closing: boolean;\r\n    velocity?: number;\r\n  }) => {\r\n    const {\r\n      gesture,\r\n      transitionSpec,\r\n      onOpen,\r\n      onClose,\r\n      onTransition,\r\n    } = this.props;\r\n\r\n    const toValue = this.getAnimateToValue({\r\n      ...this.props,\r\n      closing,\r\n    });\r\n\r\n    this.lastToValue = toValue;\r\n\r\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\r\n\r\n    const animation =\r\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\r\n\r\n    this.setPointerEventsEnabled(!closing);\r\n    this.handleStartInteraction();\r\n\r\n    clearTimeout(this.pendingGestureCallback);\r\n\r\n    onTransition?.({ closing, gesture: velocity !== undefined });\r\n    animation(gesture, {\r\n      ...spec.config,\r\n      velocity,\r\n      toValue,\r\n      useNativeDriver,\r\n      isInteraction: false,\r\n    }).start(({ finished }) => {\r\n      this.handleEndInteraction();\r\n\r\n      clearTimeout(this.pendingGestureCallback);\r\n\r\n      if (finished) {\r\n        if (closing) {\r\n          onClose();\r\n        } else {\r\n          onOpen();\r\n        }\r\n\r\n        if (this.isCurrentlyMounted) {\r\n          // Make sure to re-open screen if it wasn't removed\r\n          this.forceUpdate();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  private getAnimateToValue = ({\r\n    closing,\r\n    layout,\r\n    gestureDirection,\r\n  }: {\r\n    closing?: boolean;\r\n    layout: Layout;\r\n    gestureDirection: GestureDirection;\r\n  }) => {\r\n    if (!closing) {\r\n      return 0;\r\n    }\r\n\r\n    return getDistanceForDirection(layout, gestureDirection);\r\n  };\r\n\r\n  private setPointerEventsEnabled = (enabled: boolean) => {\r\n    const pointerEvents = enabled ? 'box-none' : 'none';\r\n\r\n    this.contentRef.current?.setNativeProps({ pointerEvents });\r\n  };\r\n\r\n  private handleStartInteraction = () => {\r\n    if (this.interactionHandle === undefined) {\r\n      this.interactionHandle = InteractionManager.createInteractionHandle();\r\n    }\r\n  };\r\n\r\n  private handleEndInteraction = () => {\r\n    if (this.interactionHandle !== undefined) {\r\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\r\n      this.interactionHandle = undefined;\r\n    }\r\n  };\r\n\r\n  private handleGestureStateChange = ({\r\n    nativeEvent,\r\n  }: PanGestureHandlerGestureEvent) => {\r\n    const {\r\n      layout,\r\n      onClose,\r\n      onGestureBegin,\r\n      onGestureCanceled,\r\n      onGestureEnd,\r\n      gestureDirection,\r\n      gestureVelocityImpact,\r\n    } = this.props;\r\n\r\n    switch (nativeEvent.state) {\r\n      case GestureState.BEGAN:\r\n        this.isSwiping.setValue(TRUE);\r\n        this.handleStartInteraction();\r\n        onGestureBegin?.();\r\n        break;\r\n      case GestureState.CANCELLED: {\r\n        this.isSwiping.setValue(FALSE);\r\n        this.handleEndInteraction();\r\n\r\n        const velocity =\r\n          gestureDirection === 'vertical' ||\r\n          gestureDirection === 'vertical-inverted'\r\n            ? nativeEvent.velocityY\r\n            : nativeEvent.velocityX;\r\n\r\n        this.animate({ closing: this.props.closing, velocity });\r\n\r\n        onGestureCanceled?.();\r\n        break;\r\n      }\r\n      case GestureState.END: {\r\n        this.isSwiping.setValue(FALSE);\r\n\r\n        let distance;\r\n        let translation;\r\n        let velocity;\r\n\r\n        if (\r\n          gestureDirection === 'vertical' ||\r\n          gestureDirection === 'vertical-inverted'\r\n        ) {\r\n          distance = layout.height;\r\n          translation = nativeEvent.translationY;\r\n          velocity = nativeEvent.velocityY;\r\n        } else {\r\n          distance = layout.width;\r\n          translation = nativeEvent.translationX;\r\n          velocity = nativeEvent.velocityX;\r\n        }\r\n\r\n        const closing =\r\n          (translation + velocity * gestureVelocityImpact) *\r\n            getInvertedMultiplier(gestureDirection) >\r\n          distance / 2\r\n            ? velocity !== 0 || translation !== 0\r\n            : this.props.closing;\r\n\r\n        this.animate({ closing, velocity });\r\n\r\n        if (closing) {\r\n          // We call onClose with a delay to make sure that the animation has already started\r\n          // This will make sure that the state update caused by this doesn't affect start of animation\r\n          this.pendingGestureCallback = (setTimeout(() => {\r\n            onClose();\r\n\r\n            // Trigger an update after we dispatch the action to remove the screen\r\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\r\n            this.forceUpdate();\r\n          }, 32) as any) as number;\r\n        }\r\n\r\n        onGestureEnd?.();\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Memoize this to avoid extra work on re-render\r\n  private getInterpolatedStyle = memoize(\r\n    (\r\n      styleInterpolator: StackCardStyleInterpolator,\r\n      index: number,\r\n      current: Animated.AnimatedInterpolation,\r\n      next: Animated.AnimatedInterpolation | undefined,\r\n      layout: Layout,\r\n      insetTop: number,\r\n      insetRight: number,\r\n      insetBottom: number,\r\n      insetLeft: number\r\n    ) =>\r\n      styleInterpolator({\r\n        index,\r\n        current: { progress: current },\r\n        next: next && { progress: next },\r\n        closing: this.isClosing,\r\n        swiping: this.isSwiping,\r\n        inverted: this.inverted,\r\n        layouts: {\r\n          screen: layout,\r\n        },\r\n        insets: {\r\n          top: insetTop,\r\n          right: insetRight,\r\n          bottom: insetBottom,\r\n          left: insetLeft,\r\n        },\r\n      })\r\n  );\r\n\r\n  // Keep track of the animation context when deps changes.\r\n  private getCardAnimationContext = memoize(\r\n    (\r\n      index: number,\r\n      current: Animated.AnimatedInterpolation,\r\n      next: Animated.AnimatedInterpolation | undefined,\r\n      layout: Layout,\r\n      insetTop: number,\r\n      insetRight: number,\r\n      insetBottom: number,\r\n      insetLeft: number\r\n    ) => ({\r\n      index,\r\n      current: { progress: current },\r\n      next: next && { progress: next },\r\n      closing: this.isClosing,\r\n      swiping: this.isSwiping,\r\n      inverted: this.inverted,\r\n      layouts: {\r\n        screen: layout,\r\n      },\r\n      insets: {\r\n        top: insetTop,\r\n        right: insetRight,\r\n        bottom: insetBottom,\r\n        left: insetLeft,\r\n      },\r\n    })\r\n  );\r\n\r\n  private gestureActivationCriteria() {\r\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\r\n\r\n    const distance =\r\n      gestureDirection === 'vertical' ||\r\n      gestureDirection === 'vertical-inverted'\r\n        ? gestureResponseDistance?.vertical !== undefined\r\n          ? gestureResponseDistance.vertical\r\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\r\n        : gestureResponseDistance?.horizontal !== undefined\r\n        ? gestureResponseDistance.horizontal\r\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\r\n\r\n    if (gestureDirection === 'vertical') {\r\n      return {\r\n        maxDeltaX: 15,\r\n        minOffsetY: 5,\r\n        hitSlop: { bottom: -layout.height + distance },\r\n      };\r\n    } else if (gestureDirection === 'vertical-inverted') {\r\n      return {\r\n        maxDeltaX: 15,\r\n        minOffsetY: -5,\r\n        hitSlop: { top: -layout.height + distance },\r\n      };\r\n    } else {\r\n      const hitSlop = -layout.width + distance;\r\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\r\n\r\n      if (invertedMultiplier === 1) {\r\n        return {\r\n          minOffsetX: 5,\r\n          maxDeltaY: 20,\r\n          hitSlop: { right: hitSlop },\r\n        };\r\n      } else {\r\n        return {\r\n          minOffsetX: -5,\r\n          maxDeltaY: 20,\r\n          hitSlop: { left: hitSlop },\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private contentRef = React.createRef<View>();\r\n\r\n  render() {\r\n    const {\r\n      styleInterpolator,\r\n      index,\r\n      current,\r\n      gesture,\r\n      next,\r\n      layout,\r\n      insets,\r\n      overlay,\r\n      overlayEnabled,\r\n      shadowEnabled,\r\n      gestureEnabled,\r\n      gestureDirection,\r\n      pageOverflowEnabled,\r\n      children,\r\n      containerStyle: customContainerStyle,\r\n      contentStyle,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const interpolatedStyle = this.getInterpolatedStyle(\r\n      styleInterpolator,\r\n      index,\r\n      current,\r\n      next,\r\n      layout,\r\n      insets.top,\r\n      insets.right,\r\n      insets.bottom,\r\n      insets.left\r\n    );\r\n\r\n    const animationContext = this.getCardAnimationContext(\r\n      index,\r\n      current,\r\n      next,\r\n      layout,\r\n      insets.top,\r\n      insets.right,\r\n      insets.bottom,\r\n      insets.left\r\n    );\r\n\r\n    const {\r\n      containerStyle,\r\n      cardStyle,\r\n      overlayStyle,\r\n      shadowStyle,\r\n    } = interpolatedStyle;\r\n\r\n    const handleGestureEvent = gestureEnabled\r\n      ? Animated.event(\r\n          [\r\n            {\r\n              nativeEvent:\r\n                gestureDirection === 'vertical' ||\r\n                gestureDirection === 'vertical-inverted'\r\n                  ? { translationY: gesture }\r\n                  : { translationX: gesture },\r\n            },\r\n          ],\r\n          { useNativeDriver }\r\n        )\r\n      : undefined;\r\n\r\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\r\n    const isTransparent =\r\n      typeof backgroundColor === 'string'\r\n        ? Color(backgroundColor).alpha() === 0\r\n        : false;\r\n\r\n    return (\r\n      <CardAnimationContext.Provider value={animationContext}>\r\n        <Animated.View\r\n          style={{\r\n            // This is a dummy style that doesn't actually change anything visually.\r\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\r\n            // If we disable animations and hide header, it could end up making the value unused.\r\n            // So we have this dummy style that will always be used regardless of what else changed.\r\n            opacity: current,\r\n          }}\r\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\r\n          collapsable={false}\r\n        />\r\n        <View pointerEvents=\"box-none\" {...rest}>\r\n          {overlayEnabled ? (\r\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\r\n              {overlay({ style: overlayStyle })}\r\n            </View>\r\n          ) : null}\r\n          <Animated.View\r\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\r\n            style={[styles.container, containerStyle, customContainerStyle]}\r\n            pointerEvents=\"box-none\"\r\n          >\r\n            <PanGestureHandler\r\n              enabled={layout.width !== 0 && gestureEnabled}\r\n              onGestureEvent={handleGestureEvent}\r\n              onHandlerStateChange={this.handleGestureStateChange}\r\n              {...this.gestureActivationCriteria()}\r\n            >\r\n              <Animated.View style={[styles.container, cardStyle]}>\r\n                {shadowEnabled && shadowStyle && !isTransparent ? (\r\n                  <Animated.View\r\n                    style={[\r\n                      styles.shadow,\r\n                      gestureDirection === 'horizontal'\r\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\r\n                        : gestureDirection === 'horizontal-inverted'\r\n                        ? [styles.shadowHorizontal, styles.shadowRight]\r\n                        : gestureDirection === 'vertical'\r\n                        ? [styles.shadowVertical, styles.shadowTop]\r\n                        : [styles.shadowVertical, styles.shadowBottom],\r\n                      { backgroundColor },\r\n                      shadowStyle,\r\n                    ]}\r\n                    pointerEvents=\"none\"\r\n                  />\r\n                ) : null}\r\n                <CardSheet\r\n                  ref={this.contentRef}\r\n                  enabled={pageOverflowEnabled}\r\n                  layout={layout}\r\n                  style={contentStyle}\r\n                >\r\n                  {children}\r\n                </CardSheet>\r\n              </Animated.View>\r\n            </PanGestureHandler>\r\n          </Animated.View>\r\n        </View>\r\n      </CardAnimationContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  overlay: {\r\n    flex: 1,\r\n    backgroundColor: '#000',\r\n  },\r\n  shadow: {\r\n    position: 'absolute',\r\n    shadowRadius: 5,\r\n    shadowColor: '#000',\r\n    shadowOpacity: 0.3,\r\n  },\r\n  shadowHorizontal: {\r\n    top: 0,\r\n    bottom: 0,\r\n    width: 3,\r\n    shadowOffset: { width: -1, height: 1 },\r\n  },\r\n  shadowLeft: {\r\n    left: 0,\r\n  },\r\n  shadowRight: {\r\n    right: 0,\r\n  },\r\n  shadowVertical: {\r\n    left: 0,\r\n    right: 0,\r\n    height: 3,\r\n    shadowOffset: { width: 1, height: -1 },\r\n  },\r\n  shadowTop: {\r\n    top: 0,\r\n  },\r\n  shadowBottom: {\r\n    bottom: 0,\r\n  },\r\n});\r\n"]}