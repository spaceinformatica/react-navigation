{"version":3,"sources":["TouchableItem.ios.tsx"],"names":["AnimatedBaseButton","Animated","createAnimatedComponent","BaseButton","useNativeDriver","Platform","OS","TouchableItem","React","Component","Value","active","spring","opacity","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","toValue","props","activeOpacity","start","onActiveStateChange","render","children","style","enabled","rest","handleActiveStateChange","borderless"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,kBAAkB,GAAGC,sBAASC,uBAAT,CAAiCC,qCAAjC,CAA3B;;AAMA,MAAMC,eAAe,GAAGC,sBAASC,EAAT,KAAgB,KAAxC;;AAEe,MAAMC,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAAmD;AAAA;AAAA;;AAAA,qCAO9C,IAAIR,sBAASS,KAAb,CAAmB,CAAnB,CAP8C;;AAAA,qDAS7BC,MAAD,IAAqB;AAAA;;AACrDV,4BAASW,MAAT,CAAgB,KAAKC,OAArB,EAA8B;AAC5BC,QAAAA,SAAS,EAAE,IADiB;AAE5BC,QAAAA,OAAO,EAAE,GAFmB;AAG5BC,QAAAA,IAAI,EAAE,CAHsB;AAI5BC,QAAAA,iBAAiB,EAAE,IAJS;AAK5BC,QAAAA,yBAAyB,EAAE,IALC;AAM5BC,QAAAA,kBAAkB,EAAE,IANQ;AAO5BC,QAAAA,OAAO,EAAET,MAAM,GAAG,KAAKU,KAAL,CAAWC,aAAd,GAA8B,CAPjB;AAQ5BlB,QAAAA;AAR4B,OAA9B,EASGmB,KATH;;AAWA,mDAAKF,KAAL,EAAWG,mBAAX,kGAAiCb,MAAjC;AACD,KAtB+D;AAAA;;AAwBhEc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA,OAAnB;AAA4B,SAAGC;AAA/B,QAAwC,KAAKR,KAAnD;AAEA,wBACE,oBAAC,kBAAD,eACMQ,IADN;AAEE,MAAA,mBAAmB,EAAE,KAAKC,uBAF5B;AAGE,MAAA,KAAK,EAAE,CAACH,KAAD,EAAQC,OAAO,IAAI;AAAEf,QAAAA,OAAO,EAAE,KAAKA;AAAhB,OAAnB;AAHT,QAKGa,QALH,CADF;AASD;;AApC+D;;;;gBAA7CnB,a,kBACG;AACpBe,EAAAA,aAAa,EAAE,GADK;AAEpBS,EAAAA,UAAU,EAAE,IAFQ;AAGpBH,EAAAA,OAAO,EAAE;AAHW,C","sourcesContent":["import * as React from 'react';\r\nimport { Animated, Platform } from 'react-native';\r\nimport { BaseButton } from 'react-native-gesture-handler';\r\n\r\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\r\n\r\ntype Props = React.ComponentProps<typeof BaseButton> & {\r\n  activeOpacity: number;\r\n};\r\n\r\nconst useNativeDriver = Platform.OS !== 'web';\r\n\r\nexport default class TouchableItem extends React.Component<Props> {\r\n  static defaultProps = {\r\n    activeOpacity: 0.3,\r\n    borderless: true,\r\n    enabled: true,\r\n  };\r\n\r\n  private opacity = new Animated.Value(1);\r\n\r\n  private handleActiveStateChange = (active: boolean) => {\r\n    Animated.spring(this.opacity, {\r\n      stiffness: 1000,\r\n      damping: 500,\r\n      mass: 3,\r\n      overshootClamping: true,\r\n      restDisplacementThreshold: 0.01,\r\n      restSpeedThreshold: 0.01,\r\n      toValue: active ? this.props.activeOpacity : 1,\r\n      useNativeDriver,\r\n    }).start();\r\n\r\n    this.props.onActiveStateChange?.(active);\r\n  };\r\n\r\n  render() {\r\n    const { children, style, enabled, ...rest } = this.props;\r\n\r\n    return (\r\n      <AnimatedBaseButton\r\n        {...rest}\r\n        onActiveStateChange={this.handleActiveStateChange}\r\n        style={[style, enabled && { opacity: this.opacity }]}\r\n      >\r\n        {children}\r\n      </AnimatedBaseButton>\r\n    );\r\n  }\r\n}\r\n"]}