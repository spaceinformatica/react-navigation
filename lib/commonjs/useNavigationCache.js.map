{"version":3,"sources":["useNavigationCache.tsx"],"names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","React","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","previous","key","emit","rest","dispatch","action","payload","source","helpers","Object","keys","name","args","create","options","o","isFocused","index"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACe,SAASA,kBAAT,CAGb;AACAC,EAAAA,KADA;AAEAC,EAAAA,QAFA;AAGAC,EAAAA,UAHA;AAIAC,EAAAA,UAJA;AAKAC,EAAAA,MALA;AAMAC,EAAAA;AANA,CAHa,EAUI;AACjB;AACA;AACA;AACA,QAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CACZ,OAAO;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAP,CADY,EAEZ;AACA,GAACR,QAAD,EAAWC,UAAX,EAAuBC,UAAvB,EAAmCC,MAAnC,EAA2CC,OAA3C,CAHY,CAAd;AAMA,QAAMK,OAAO,GAAG,EACd,GAAGN,MAAM,CAACO,cADI;AAEd,OAAGC;AAFW,GAAhB;AAKAN,EAAAA,KAAK,CAACG,OAAN,GAAgBT,KAAK,CAACa,MAAN,CAAaC,MAAb,CACd,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd,UAAMC,QAAQ,GAAGX,KAAK,CAACG,OAAN,CAAcO,KAAK,CAACE,GAApB,CAAjB;;AAEA,QAAID,QAAJ,EAAc;AACZ;AACAF,MAAAA,GAAG,CAACC,KAAK,CAACE,GAAP,CAAH,GAAiBD,QAAjB;AACD,KAHD,MAGO;AACL;AACA,YAAM;AAAEE,QAAAA,IAAF;AAAQ,WAAGC;AAAX,UAAoBlB,UAA1B;;AAEA,YAAMmB,QAAQ,GACZC,MADe,IAEZ;AACH,cAAMC,OAAO,GACX,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACrB,QAAQ,EAAT,CAArC,GAAoDqB,MADtD;AAGApB,QAAAA,UAAU,CAACmB,QAAX,CACE,OAAOE,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA1C,GACI;AAAEC,UAAAA,MAAM,EAAER,KAAK,CAACE,GAAhB;AAAqB,aAAGK;AAAxB,SADJ,GAEIA,OAHN;AAKD,OAXD;;AAaA,YAAME,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYjB,OAAZ,EAAqBI,MAArB,CACd,CAACC,GAAD,EAAMa,IAAN,KAAe;AACb;AACAb,QAAAA,GAAG,CAACa,IAAD,CAAH,GAAY,CAAC,GAAGC,IAAJ,KAAkBR,QAAQ,CAACX,OAAO,CAACkB,IAAD,CAAP,CAAc,GAAGC,IAAjB,CAAD,CAAtC;;AACA,eAAOd,GAAP;AACD,OALa,EAMd,EANc,CAAhB;AASAA,MAAAA,GAAG,CAACC,KAAK,CAACE,GAAP,CAAH,GAAiB,EACf,GAAGE,IADY;AAEf,WAAGK,OAFY;AAGf,WAAGpB,OAAO,CAACyB,MAAR,CAAed,KAAK,CAACE,GAArB,CAHY;AAIfG,QAAAA,QAJe;AAKflB,QAAAA,UAAU,EAAG4B,OAAD,IACV5B,UAAU,CAAE6B,CAAD,KAAQ,EACjB,GAAGA,CADc;AAEjB,WAAChB,KAAK,CAACE,GAAP,GAAa,EAAE,GAAGc,CAAC,CAAChB,KAAK,CAACE,GAAP,CAAN;AAAmB,eAAGa;AAAtB;AAFI,SAAR,CAAD,CANG;AAUfE,QAAAA,SAAS,EAAE,MAAM;AACf,gBAAMjC,KAAK,GAAGC,QAAQ,EAAtB;;AAEA,cAAID,KAAK,CAACa,MAAN,CAAab,KAAK,CAACkC,KAAnB,EAA0BhB,GAA1B,KAAkCF,KAAK,CAACE,GAA5C,EAAiD;AAC/C,mBAAO,KAAP;AACD,WALc,CAOf;AACA;;;AACA,iBAAOhB,UAAU,GAAGA,UAAU,CAAC+B,SAAX,EAAH,GAA4B,IAA7C;AACD;AApBc,OAAjB;AAsBD;;AAED,WAAOlB,GAAP;AACD,GA1Da,EA2Dd,EA3Dc,CAAhB;AA8DA,SAAOT,KAAK,CAACG,OAAb;AACD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  CommonActions,\r\n  NavigationAction,\r\n  ParamListBase,\r\n  NavigationState,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport type { NavigationEventEmitter } from './useEventEmitter';\r\n\r\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\r\n\r\ntype Options<State extends NavigationState> = {\r\n  state: State;\r\n  getState: () => State;\r\n  navigation: NavigationHelpers<ParamListBase> &\r\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\r\n  setOptions: (\r\n    cb: (options: Record<string, object>) => Record<string, object>\r\n  ) => void;\r\n  router: Router<State, NavigationAction>;\r\n  emitter: NavigationEventEmitter<EventMapBase>;\r\n};\r\n\r\ntype NavigationCache<\r\n  State extends NavigationState,\r\n  ScreenOptions extends {}\r\n> = {\r\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\r\n};\r\n\r\n/**\r\n * Hook to cache navigation objects for each screen in the navigator.\r\n * It's important to cache them to make sure navigation objects don't change between renders.\r\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\r\n */\r\nexport default function useNavigationCache<\r\n  State extends NavigationState,\r\n  ScreenOptions extends {}\r\n>({\r\n  state,\r\n  getState,\r\n  navigation,\r\n  setOptions,\r\n  router,\r\n  emitter,\r\n}: Options<State>) {\r\n  // Cache object which holds navigation objects for each screen\r\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\r\n  // In reality, these deps will rarely change, if ever\r\n  const cache = React.useMemo(\r\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [getState, navigation, setOptions, router, emitter]\r\n  );\r\n\r\n  const actions = {\r\n    ...router.actionCreators,\r\n    ...CommonActions,\r\n  };\r\n\r\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\r\n    (acc, route) => {\r\n      const previous = cache.current[route.key];\r\n\r\n      if (previous) {\r\n        // If a cached navigation object already exists, reuse it\r\n        acc[route.key] = previous;\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { emit, ...rest } = navigation;\r\n\r\n        const dispatch = (\r\n          action: NavigationAction | ((state: State) => NavigationAction)\r\n        ) => {\r\n          const payload =\r\n            typeof action === 'function' ? action(getState()) : action;\r\n\r\n          navigation.dispatch(\r\n            typeof payload === 'object' && payload != null\r\n              ? { source: route.key, ...payload }\r\n              : payload\r\n          );\r\n        };\r\n\r\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\r\n          (acc, name) => {\r\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\r\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n\r\n        acc[route.key] = {\r\n          ...rest,\r\n          ...helpers,\r\n          ...emitter.create(route.key),\r\n          dispatch,\r\n          setOptions: (options: object) =>\r\n            setOptions((o) => ({\r\n              ...o,\r\n              [route.key]: { ...o[route.key], ...options },\r\n            })),\r\n          isFocused: () => {\r\n            const state = getState();\r\n\r\n            if (state.routes[state.index].key !== route.key) {\r\n              return false;\r\n            }\r\n\r\n            // If the current screen is focused, we also need to check if parent navigator is focused\r\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\r\n            return navigation ? navigation.isFocused() : true;\r\n          },\r\n        };\r\n      }\r\n\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n\r\n  return cache.current;\r\n}\r\n"]}