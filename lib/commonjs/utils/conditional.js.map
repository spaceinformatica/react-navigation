{"version":3,"sources":["conditional.tsx"],"names":["add","multiply","Animated","conditional","condition","main","fallback","interpolate","inputRange","outputRange"],"mappings":";;;;;;;AAAA;;AAEA,MAAM;AAAEA,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAoBC,qBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASC,WAAT,CACbC,SADa,EAEbC,IAFa,EAGbC,QAHa,EAIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAON,GAAG,CACRC,QAAQ,CAACG,SAAD,EAAYC,IAAZ,CADA,EAERJ,QAAQ,CACNG,SAAS,CAACG,WAAV,CAAsB;AACpBC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADQ;AAEpBC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFO,GAAtB,CADM,EAKNH,QALM,CAFA,CAAV;AAUD","sourcesContent":["import { Animated } from 'react-native';\r\n\r\nconst { add, multiply } = Animated;\r\n\r\n/**\r\n * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\r\n *\r\n * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\r\n * @param main Animated Node to use if the condition is `true`\r\n * @param fallback Animated Node to use if the condition is `false`\r\n */\r\nexport default function conditional(\r\n  condition: Animated.AnimatedInterpolation,\r\n  main: Animated.AnimatedInterpolation,\r\n  fallback: Animated.AnimatedInterpolation\r\n) {\r\n  // To implement this behavior, we multiply the main node with the condition.\r\n  // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\r\n  // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\r\n  // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\r\n  // This way, one of them will always be 0, and other one will be the value we need.\r\n  // In the end we add them both together, 0 + value we need = value we need\r\n  return add(\r\n    multiply(condition, main),\r\n    multiply(\r\n      condition.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [1, 0],\r\n      }),\r\n      fallback\r\n    )\r\n  );\r\n}\r\n"]}