{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","some","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\nimport type {\r\n  PartialState,\r\n  CommonNavigationAction,\r\n  Router,\r\n  ParamListBase,\r\n} from './types';\r\nimport TabRouter, {\r\n  TabActions,\r\n  TabActionType,\r\n  TabRouterOptions,\r\n  TabNavigationState,\r\n  TabActionHelpers,\r\n} from './TabRouter';\r\n\r\nexport type DrawerActionType =\r\n  | TabActionType\r\n  | {\r\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\r\n      source?: string;\r\n      target?: string;\r\n    };\r\n\r\nexport type DrawerRouterOptions = TabRouterOptions & {\r\n  openByDefault?: boolean;\r\n};\r\n\r\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\r\n  TabNavigationState<ParamList>,\r\n  'type' | 'history'\r\n> & {\r\n  /**\r\n   * Type of the router, in this case, it's drawer.\r\n   */\r\n  type: 'drawer';\r\n  /**\r\n   * List of previously visited route keys and drawer open status.\r\n   */\r\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\r\n};\r\n\r\nexport type DrawerActionHelpers<\r\n  ParamList extends ParamListBase\r\n> = TabActionHelpers<ParamList> & {\r\n  /**\r\n   * Open the drawer sidebar.\r\n   */\r\n  openDrawer(): void;\r\n\r\n  /**\r\n   * Close the drawer sidebar.\r\n   */\r\n  closeDrawer(): void;\r\n\r\n  /**\r\n   * Open the drawer sidebar if closed, or close if opened.\r\n   */\r\n  toggleDrawer(): void;\r\n};\r\n\r\nexport const DrawerActions = {\r\n  ...TabActions,\r\n  openDrawer(): DrawerActionType {\r\n    return { type: 'OPEN_DRAWER' };\r\n  },\r\n  closeDrawer(): DrawerActionType {\r\n    return { type: 'CLOSE_DRAWER' };\r\n  },\r\n  toggleDrawer(): DrawerActionType {\r\n    return { type: 'TOGGLE_DRAWER' };\r\n  },\r\n};\r\n\r\nconst isDrawerOpen = (\r\n  state:\r\n    | DrawerNavigationState<ParamListBase>\r\n    | PartialState<DrawerNavigationState<ParamListBase>>\r\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\r\n\r\nconst openDrawer = (\r\n  state: DrawerNavigationState<ParamListBase>\r\n): DrawerNavigationState<ParamListBase> => {\r\n  if (isDrawerOpen(state)) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    history: [...state.history, { type: 'drawer' }],\r\n  };\r\n};\r\n\r\nconst closeDrawer = (\r\n  state: DrawerNavigationState<ParamListBase>\r\n): DrawerNavigationState<ParamListBase> => {\r\n  if (!isDrawerOpen(state)) {\r\n    return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    history: state.history.filter((it) => it.type !== 'drawer'),\r\n  };\r\n};\r\n\r\nexport default function DrawerRouter({\r\n  openByDefault,\r\n  ...rest\r\n}: DrawerRouterOptions): Router<\r\n  DrawerNavigationState<ParamListBase>,\r\n  DrawerActionType | CommonNavigationAction\r\n> {\r\n  const router = (TabRouter(rest) as unknown) as Router<\r\n    DrawerNavigationState<ParamListBase>,\r\n    TabActionType | CommonNavigationAction\r\n  >;\r\n\r\n  return {\r\n    ...router,\r\n\r\n    type: 'drawer',\r\n\r\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\r\n      let state = router.getInitialState({\r\n        routeNames,\r\n        routeParamList,\r\n        routeGetIdList,\r\n      });\r\n\r\n      if (openByDefault) {\r\n        state = openDrawer(state);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        stale: false,\r\n        type: 'drawer',\r\n        key: `drawer-${nanoid()}`,\r\n      };\r\n    },\r\n\r\n    getRehydratedState(\r\n      partialState,\r\n      { routeNames, routeParamList, routeGetIdList }\r\n    ) {\r\n      if (partialState.stale === false) {\r\n        return partialState;\r\n      }\r\n\r\n      let state = router.getRehydratedState(partialState, {\r\n        routeNames,\r\n        routeParamList,\r\n        routeGetIdList,\r\n      });\r\n\r\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\r\n        state = openDrawer(state);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        type: 'drawer',\r\n        key: `drawer-${nanoid()}`,\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const result = router.getStateForRouteFocus(state, key);\r\n\r\n      if (openByDefault) {\r\n        return openDrawer(result);\r\n      }\r\n\r\n      return closeDrawer(result);\r\n    },\r\n\r\n    getStateForAction(state, action, options) {\r\n      switch (action.type) {\r\n        case 'OPEN_DRAWER':\r\n          return openDrawer(state);\r\n\r\n        case 'CLOSE_DRAWER':\r\n          return closeDrawer(state);\r\n\r\n        case 'TOGGLE_DRAWER':\r\n          if (isDrawerOpen(state)) {\r\n            return closeDrawer(state);\r\n          }\r\n\r\n          return openDrawer(state);\r\n\r\n        case 'GO_BACK':\r\n          if (openByDefault) {\r\n            if (!isDrawerOpen(state)) {\r\n              return openDrawer(state);\r\n            }\r\n          } else {\r\n            if (isDrawerOpen(state)) {\r\n              return closeDrawer(state);\r\n            }\r\n          }\r\n\r\n          return router.getStateForAction(state, action, options);\r\n\r\n        default:\r\n          return router.getStateForAction(state, action, options);\r\n      }\r\n    },\r\n\r\n    actionCreators: DrawerActions,\r\n  };\r\n}\r\n"]}