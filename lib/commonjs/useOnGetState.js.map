{"version":3,"sources":["useOnGetState.tsx"],"names":["useOnGetState","getState","getStateListeners","addKeyedListener","React","useContext","NavigationBuilderContext","route","NavigationRouteContext","key","getRehydratedState","useCallback","state","routes","map","childState","useEffect"],"mappings":";;;;;;;AAAA;;AAEA;;AAGA;;AACA;;;;;;;;AAOe,SAASA,aAAT,CAAuB;AACpCC,EAAAA,QADoC;AAEpCC,EAAAA;AAFoC,CAAvB,EAGH;AACV,QAAM;AAAEC,IAAAA;AAAF,MAAuBC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CAA7B;AACA,QAAMC,KAAK,GAAGH,KAAK,CAACC,UAAN,CAAiBG,+BAAjB,CAAd;AACA,QAAMC,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAACE,GAAT,GAAe,MAAhC;AAEA,QAAMC,kBAAkB,GAAGN,KAAK,CAACO,WAAN,CAAkB,MAAM;AACjD,UAAMC,KAAK,GAAGX,QAAQ,EAAtB,CADiD,CAGjD;;AACA,UAAMY,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAkBP,KAAD,IAAW;AAAA;;AACzC,YAAMQ,UAAU,4BAAGb,iBAAiB,CAACK,KAAK,CAACE,GAAP,CAApB,0DAAG,2BAAAP,iBAAiB,CAApC;;AAEA,UAAIK,KAAK,CAACK,KAAN,KAAgBG,UAApB,EAAgC;AAC9B,eAAOR,KAAP;AACD;;AAED,aAAO,EAAE,GAAGA,KAAL;AAAYK,QAAAA,KAAK,EAAEG;AAAnB,OAAP;AACD,KARc,CAAf;;AAUA,QAAI,2BAAaH,KAAK,CAACC,MAAnB,EAA2BA,MAA3B,CAAJ,EAAwC;AACtC,aAAOD,KAAP;AACD;;AAED,WAAO,EAAE,GAAGA,KAAL;AAAYC,MAAAA;AAAZ,KAAP;AACD,GAnB0B,EAmBxB,CAACZ,QAAD,EAAWC,iBAAX,CAnBwB,CAA3B;AAqBAE,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,WAAOb,gBAAP,aAAOA,gBAAP,uBAAOA,gBAAgB,CAAG,UAAH,EAAeM,GAAf,EAAoBC,kBAApB,CAAvB;AACD,GAFD,EAEG,CAACP,gBAAD,EAAmBO,kBAAnB,EAAuCD,GAAvC,CAFH;AAGD","sourcesContent":["import * as React from 'react';\r\nimport type { NavigationState } from '@react-navigation/routers';\r\nimport NavigationBuilderContext, {\r\n  GetStateListener,\r\n} from './NavigationBuilderContext';\r\nimport NavigationRouteContext from './NavigationRouteContext';\r\nimport isArrayEqual from './isArrayEqual';\r\n\r\ntype Options = {\r\n  getState: () => NavigationState;\r\n  getStateListeners: Record<string, GetStateListener | undefined>;\r\n};\r\n\r\nexport default function useOnGetState({\r\n  getState,\r\n  getStateListeners,\r\n}: Options) {\r\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\r\n  const route = React.useContext(NavigationRouteContext);\r\n  const key = route ? route.key : 'root';\r\n\r\n  const getRehydratedState = React.useCallback(() => {\r\n    const state = getState();\r\n\r\n    // Avoid returning new route objects if we don't need to\r\n    const routes = state.routes.map((route) => {\r\n      const childState = getStateListeners[route.key]?.();\r\n\r\n      if (route.state === childState) {\r\n        return route;\r\n      }\r\n\r\n      return { ...route, state: childState };\r\n    });\r\n\r\n    if (isArrayEqual(state.routes, routes)) {\r\n      return state;\r\n    }\r\n\r\n    return { ...state, routes };\r\n  }, [getState, getStateListeners]);\r\n\r\n  React.useEffect(() => {\r\n    return addKeyedListener?.('getState', key, getRehydratedState);\r\n  }, [addKeyedListener, getRehydratedState, key]);\r\n}\r\n"]}